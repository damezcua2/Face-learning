// ta_Dump File v3.0 -- code v8.0.4.0 rev10446
LeabraProject .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [3] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
    EditMbrItem @[2] { };
   };

   EditMthItem_Group @.mths = [4] {
    EditMthItem @[0] { };
    EditMthItem @[1] { };
    EditMthItem @[2] { };
    EditMthItem @[3] { };
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_running.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_done.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_done.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_deleted.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_deleted.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_deleted.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_archive.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_archive.control_panel_cells = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.file_list.control_panel_cells = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.cluster_info.control_panel_cells = [0] {
   };

   DataTableCols @.clusterscript_timestamp.data = [2] {
    String_Data @["timestamp"] { };
    int_Data @["version"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
   };

   DataOpList @.clusterscript_timestamp.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.clusterscript_timestamp.control_panel_cells = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [3] { 
   DataTable @["StdInputData"] { 
    DataTableCols @.data = [5] {
     String_Data @["Name"] { };
     float_Data @["Emotions"] { };
     float_Data @["Input"] { };
     int_Data @["Gender"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["Identity"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["StdInputData_copy"] { 
    DataTableCols @.data = [5] {
     String_Data @["Name"] { };
     float_Data @["Emotions"] { };
     float_Data @["Input"] { };
     int_Data @["Gender"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["Identity"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["Osumnis_oof_phaicz"] { 
    DataTableCols @.data = [5] {
     String_Data @["Name"] { };
     float_Data @["Input"] { };
     float_Data @["Emotions"] { };
     float_Data @["Gender"] { };
     float_Data @["Identity"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["OutputData"] = [4] { 
   DataTable @["TrialOutputData"] { 
    DataTableCols @.data = [46] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     String_Data @["train_mode"] { };
     int_Data @["group"] { };
     int_Data @["trial"] { };
     int_Data @["tick"] { };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["Emotio_lay_sse"] { };
     float_Data @["Gender_lay_sse"] { };
     float_Data @["Identi_lay_sse"] { };
     float_Data @["Emotio_lay_bin_err"] { };
     float_Data @["Gender_lay_bin_err"] { };
     float_Data @["Identi_lay_bin_err"] { };
     float_Data @["Emotio_lay_norm_err"] { };
     float_Data @["Gender_lay_norm_err"] { };
     float_Data @["Identi_lay_norm_err"] { };
     float_Data @["Emotio_lay_cos_err"] { };
     float_Data @["Gender_lay_cos_err"] { };
     float_Data @["Identi_lay_cos_err"] { };
     float_Data @["Hidden_lay_net_sd"] { };
     float_Data @["Emotio_lay_net_sd"] { };
     float_Data @["Gender_lay_net_sd"] { };
     float_Data @["Identi_lay_net_sd"] { };
     float_Data @["net_cos_diff"] { };
     float_Data @["net_trial_cos_diff"] { };
     float_Data @["net_avg_act_diff"] { };
     float_Data @["Hidden_cos_diff"] { };
     float_Data @["Emotions_cos_diff"] { };
     float_Data @["Gender_cos_diff"] { };
     float_Data @["Identity_cos_diff"] { };
     float_Data @["Hidden_trial_cos_diff"] { };
     float_Data @["Emotions_trial_cos_diff"] { };
     float_Data @["Gender_trial_cos_diff"] { };
     float_Data @["Identity_trial_cos_diff"] { };
     float_Data @["Hidden_avg_act_diff"] { };
     float_Data @["Emotions_avg_act_diff"] { };
     float_Data @["Gender_avg_act_diff"] { };
     float_Data @["Identity_avg_act_diff"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["EpochOutputData"] { 
    DataTableCols @.data = [69] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["Emotio_lay_avg_sse"] { };
     float_Data @["Gender_lay_avg_sse"] { };
     float_Data @["Identi_lay_avg_sse"] { };
     float_Data @["Emotio_lay_cnt_err"] { };
     float_Data @["Gender_lay_cnt_err"] { };
     float_Data @["Identi_lay_cnt_err"] { };
     float_Data @["Emotio_lay_pct_cor"] { };
     float_Data @["Gender_lay_pct_cor"] { };
     float_Data @["Identi_lay_pct_cor"] { };
     float_Data @["Emotio_lay_pct_err"] { };
     float_Data @["Gender_lay_pct_err"] { };
     float_Data @["Identi_lay_pct_err"] { };
     float_Data @["Emotio_lay_avg_norm_err"] { };
     float_Data @["Gender_lay_avg_norm_err"] { };
     float_Data @["Identi_lay_avg_norm_err"] { };
     float_Data @["Emotio_lay_avg_cos_err"] { };
     float_Data @["Gender_lay_avg_cos_err"] { };
     float_Data @["Identi_lay_avg_cos_err"] { };
     float_Data @["net_avg_cos_diff"] { };
     float_Data @["net_avg_trial_cos_diff"] { };
     float_Data @["net_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_cos_diff"] { };
     float_Data @["Emotions_avg_cos_diff"] { };
     float_Data @["Gender_avg_cos_diff"] { };
     float_Data @["Identity_avg_cos_diff"] { };
     float_Data @["Hidden_avg_trial_cos_diff"] { };
     float_Data @["Emotions_avg_trial_cos_diff"] { };
     float_Data @["Gender_avg_trial_cos_diff"] { };
     float_Data @["Identity_avg_trial_cos_diff"] { };
     float_Data @["Hidden_avg_avg_act_diff"] { };
     float_Data @["Emotions_avg_avg_act_diff"] { };
     float_Data @["Gender_avg_avg_act_diff"] { };
     float_Data @["Identity_avg_avg_act_diff"] { };
     float_Data @["Hidden_avg_net_sd"] { };
     float_Data @["Emotions_avg_net_sd"] { };
     float_Data @["Gender_avg_net_sd"] { };
     float_Data @["Identity_avg_net_sd"] { };
     float_Data @["Hidden_hog_pct"] { };
     float_Data @["Emotions_hog_pct"] { };
     float_Data @["Gender_hog_pct"] { };
     float_Data @["Identity_hog_pct"] { };
     float_Data @["Hidden_dead_pct"] { };
     float_Data @["Emotions_dead_pct"] { };
     float_Data @["Gender_dead_pct"] { };
     float_Data @["Identity_dead_pct"] { };
     float_Data @["Hidden_netmax"] { };
     float_Data @["Emotio_netmax"] { };
     float_Data @["Gender_netmax"] { };
     float_Data @["Identi_netmax"] { };
     float_Data @["Hidden_avg_act"] { };
     float_Data @["Emotio_avg_act"] { };
     float_Data @["Gender_avg_act"] { };
     float_Data @["Identi_avg_act"] { };
     float_Data @["Hidden_netrel"] { };
     float_Data @["Emotio_netrel"] { };
     float_Data @["Gender_netrel"] { };
     float_Data @["Identi_netrel"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestTrialOutputData"] { 
    DataTableCols @.data = [31] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     String_Data @["train_mode"] { };
     int_Data @["group"] { };
     int_Data @["trial"] { };
     int_Data @["tick"] { };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["Emotio_lay_sse"] { };
     float_Data @["Gender_lay_sse"] { };
     float_Data @["Identi_lay_sse"] { };
     float_Data @["Emotio_lay_bin_err"] { };
     float_Data @["Gender_lay_bin_err"] { };
     float_Data @["Identi_lay_bin_err"] { };
     float_Data @["Emotio_lay_norm_err"] { };
     float_Data @["Gender_lay_norm_err"] { };
     float_Data @["Identi_lay_norm_err"] { };
     float_Data @["Emotio_lay_cos_err"] { };
     float_Data @["Gender_lay_cos_err"] { };
     float_Data @["Identi_lay_cos_err"] { };
     float_Data @["Hidden_lay_net_sd"] { };
     float_Data @["Emotio_lay_net_sd"] { };
     float_Data @["Gender_lay_net_sd"] { };
     float_Data @["Identi_lay_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestEpochOutputData"] { 
    DataTableCols @.data = [34] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["Emotio_lay_avg_sse"] { };
     float_Data @["Gender_lay_avg_sse"] { };
     float_Data @["Identi_lay_avg_sse"] { };
     float_Data @["Emotio_lay_cnt_err"] { };
     float_Data @["Gender_lay_cnt_err"] { };
     float_Data @["Identi_lay_cnt_err"] { };
     float_Data @["Emotio_lay_pct_cor"] { };
     float_Data @["Gender_lay_pct_cor"] { };
     float_Data @["Identi_lay_pct_cor"] { };
     float_Data @["Emotio_lay_pct_err"] { };
     float_Data @["Gender_lay_pct_err"] { };
     float_Data @["Identi_lay_pct_err"] { };
     float_Data @["Emotio_lay_avg_norm_err"] { };
     float_Data @["Gender_lay_avg_norm_err"] { };
     float_Data @["Identi_lay_avg_norm_err"] { };
     float_Data @["Emotio_lay_avg_cos_err"] { };
     float_Data @["Gender_lay_avg_cos_err"] { };
     float_Data @["Identi_lay_avg_cos_err"] { };
     float_Data @["Hidden_avg_net_sd"] { };
     float_Data @["Emotions_avg_net_sd"] { };
     float_Data @["Gender_avg_net_sd"] { };
     float_Data @["Identity_avg_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["LeabraStartup"] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @["network"] { };
    ProgVar @["input_data"] { };
   };

   ProgVar_List @.vars = [12] {
    ProgVar @["train_prog"] { };
    ProgVar @["batch_prog"] { };
    ProgVar @["param_set"] { };
    ProgVar @["tag"] { };
    ProgVar @["batch_str"] { };
    ProgVar @["log_dir"] { };
    ProgVar @["log_file_nm"] { };
    ProgVar @["batch_start"] { };
    ProgVar @["EpochOutputData"] { };
    ProgVar @["TrialOutputData"] { };
    ProgVar @["MyClusterRun"] { };
    ProgVar @["param_sets"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [30] {
    RegisterArgs @[0] { };
    PrintExpr @[1] { };
    Comment @[2] { };
    ProgVarFmArg @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    ControlPanelsFmArgs @[12] { };
    If @[13] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Comment @[14] { };
    Comment @[15] { };
    If @[16] { 
     ProgEl_List @.true_code = [4] {
      ProgVarFmArg @[0] { };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[2] { };
      If @[3] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[17] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MiscCall @[18] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[19] { };
    MethodCall @[20] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[21] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[22] { };
    Comment @[23] { };
    MethodCall @[24] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[25] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[26] { };
    OtherProgramVar @[27] { };
    PrintExpr @[28] { };
    ProgramCall @[29] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Std"] = [11] { 
   Program @["LeabraBatch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["batch"] { };
     ProgVar @["batch_start"] { };
     ProgVar @["n_batches"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["i"] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @["LeabraTrain"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @["rnd_seeds"] { 
      taList @.seeds = [25] {
       RndSeed @["RndSeed_1"] { };
       RndSeed @["RndSeed_2"] { };
       RndSeed @["RndSeed_3"] { };
       RndSeed @["RndSeed_4"] { };
       RndSeed @["RndSeed_5"] { };
       RndSeed @["RndSeed_6"] { };
       RndSeed @["RndSeed_7"] { };
       RndSeed @["RndSeed_8"] { };
       RndSeed @["RndSeed_9"] { };
       RndSeed @["RndSeed_10"] { };
       RndSeed @["RndSeed_11"] { };
       RndSeed @["RndSeed_12"] { };
       RndSeed @["RndSeed_13"] { };
       RndSeed @["RndSeed_14"] { };
       RndSeed @["RndSeed_15"] { };
       RndSeed @["RndSeed_16"] { };
       RndSeed @["RndSeed_17"] { };
       RndSeed @["RndSeed_18"] { };
       RndSeed @["RndSeed_19"] { };
       RndSeed @["RndSeed_20"] { };
       RndSeed @["RndSeed_21"] { };
       RndSeed @["RndSeed_22"] { };
       RndSeed @["RndSeed_23"] { };
       RndSeed @["RndSeed_24"] { };
       RndSeed @["RndSeed_25"] { };
      };
     };
     RndSeed @["rnd_seed"] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @["RndInitType"] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @["OLD_SEED"] { };
       DynEnumItem @["NEW_SEED"] { };
       DynEnumItem @["BATCH_SEEDS"] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["no_prompts"] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @["max_epoch"] { };
     ProgVar @["epoch"] { };
     ProgVar @["train_mode"] { };
     ProgVar @["rnd_init"] { };
     ProgVar @["err_stopcrit"] { };
     ProgVar @["n_under_thr"] { };
     ProgVar @["save_final_wts"] { };
     ProgVar @["save_wts_interval"] { };
     ProgVar @["n_under_cnt"] { };
     ProgVar @["rnd_seeds"] { };
     ProgVar @["train_timer"] { };
     ProgVar @["rnd_seed"] { };
    };

    Function_List @.functions = [1] {
     Function @["GetRandomSeed"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @["rnd_seeds"] { 
      taList @.seeds = [25] {
       RndSeed @["RndSeed_1"] { };
       RndSeed @["RndSeed_2"] { };
       RndSeed @["RndSeed_3"] { };
       RndSeed @["RndSeed_4"] { };
       RndSeed @["RndSeed_5"] { };
       RndSeed @["RndSeed_6"] { };
       RndSeed @["RndSeed_7"] { };
       RndSeed @["RndSeed_8"] { };
       RndSeed @["RndSeed_9"] { };
       RndSeed @["RndSeed_10"] { };
       RndSeed @["RndSeed_11"] { };
       RndSeed @["RndSeed_12"] { };
       RndSeed @["RndSeed_13"] { };
       RndSeed @["RndSeed_14"] { };
       RndSeed @["RndSeed_15"] { };
       RndSeed @["RndSeed_16"] { };
       RndSeed @["RndSeed_17"] { };
       RndSeed @["RndSeed_18"] { };
       RndSeed @["RndSeed_19"] { };
       RndSeed @["RndSeed_20"] { };
       RndSeed @["RndSeed_21"] { };
       RndSeed @["RndSeed_22"] { };
       RndSeed @["RndSeed_23"] { };
       RndSeed @["RndSeed_24"] { };
       RndSeed @["RndSeed_25"] { };
      };
     };
     RndSeed @["rnd_seed"] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @["RndInitType"] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @["OLD_SEED"] { };
       DynEnumItem @["NEW_SEED"] { };
       DynEnumItem @["BATCH_SEEDS"] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["no_prompts"] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @["max_epoch"] { };
     ProgVar @["epoch"] { };
     ProgVar @["train_mode"] { };
     ProgVar @["rnd_init"] { };
     ProgVar @["err_stopcrit"] { };
     ProgVar @["n_under_thr"] { };
     ProgVar @["save_final_wts"] { };
     ProgVar @["save_wts_interval"] { };
     ProgVar @["n_under_cnt"] { };
     ProgVar @["rnd_seeds"] { };
     ProgVar @["train_timer"] { };
     ProgVar @["rnd_seed"] { };
    };

    Function_List @.functions = [1] {
     Function @["GetRandomSeed"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraEpoch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["step_on_err"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["LeabraTrial"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarter"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycle"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputs"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [5] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
       LayerWriterEl @[3] { };
       LayerWriterEl @[4] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["layer_writer_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitor"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [26] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_bin_err"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
       NetMonItem @["net_cos_diff"] { };
       NetMonItem @["net_trial_cos_diff"] { };
       NetMonItem @["net_avg_act_diff"] { };
       NetMonItem @["cos_diff"] { };
       NetMonItem @["trial_cos_diff"] { };
       NetMonItem @["avg_act_diff"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitor"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [30] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["net_avg_cos_diff"] { };
       NetMonItem @["net_avg_trial_cos_diff"] { };
       NetMonItem @["net_avg_avg_act_diff"] { };
       NetMonItem @["avg_cos_diff"] { };
       NetMonItem @["avg_trial_cos_diff"] { };
       NetMonItem @["avg_avg_act_diff"] { };
       NetMonItem @["avg_net_sd"] { };
       NetMonItem @["hog_pct"] { };
       NetMonItem @["dead_pct"] { };
       NetMonItem @["netmax"] { };
       NetMonItem @["avg_act"] { };
       NetMonItem @["netrel"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @["SaveWeights"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["tag"] { };
     ProgVar @["wts_subdir"] { };
     ProgVar @["fname"] { };
     ProgVar @["epoch_str"] { };
     ProgVar @["batch_str"] { };
     ProgVar @["final_tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] = [7] { 
   Program @["LeabraEpochTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["input_data"] { };
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[10] { };
    };
   };
   Program @["LeabraTrialTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarterTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycleTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputsTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [20] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_bin_err"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["avg_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [5] {
      T3Panel @["Network_0"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["Network_0_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [13] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["EpochOutputData_Graph"] { 
	 T3DataView_List @.children = [69] {
	  GraphColView @["batch"] { };
	  GraphColView @["epoch"] { };
	  GraphColView @["avg_sse"] { };
	  GraphColView @["cnt_err"] { };
	  GraphColView @["pct_cor"] { };
	  GraphColView @["pct_err"] { };
	  GraphColView @["avg_norm_err"] { };
	  GraphColView @["avg_cos_err"] { };
	  GraphColView @["avg_ext_rew"] { };
	  GraphColView @["avg_cycles"] { };
	  GraphColView @["epoch_time_tot"] { };
	  GraphColView @["epoch_time_usr"] { };
	  GraphColView @["Emotio_lay_avg_sse"] { };
	  GraphColView @["Gender_lay_avg_sse"] { };
	  GraphColView @["Identi_lay_avg_sse"] { };
	  GraphColView @["Emotio_lay_cnt_err"] { };
	  GraphColView @["Gender_lay_cnt_err"] { };
	  GraphColView @["Identi_lay_cnt_err"] { };
	  GraphColView @["Emotio_lay_pct_cor"] { };
	  GraphColView @["Gender_lay_pct_cor"] { };
	  GraphColView @["Identi_lay_pct_cor"] { };
	  GraphColView @["Emotio_lay_pct_err"] { };
	  GraphColView @["Gender_lay_pct_err"] { };
	  GraphColView @["Identi_lay_pct_err"] { };
	  GraphColView @["Emotio_lay_avg_norm_err"] { };
	  GraphColView @["Gender_lay_avg_norm_err"] { };
	  GraphColView @["Identi_lay_avg_norm_err"] { };
	  GraphColView @["Emotio_lay_avg_cos_err"] { };
	  GraphColView @["Gender_lay_avg_cos_err"] { };
	  GraphColView @["Identi_lay_avg_cos_err"] { };
	  GraphColView @["net_avg_cos_diff"] { };
	  GraphColView @["net_avg_trial_cos_diff"] { };
	  GraphColView @["net_avg_avg_act_diff"] { };
	  GraphColView @["Hidden_avg_cos_diff"] { };
	  GraphColView @["Emotions_avg_cos_diff"] { };
	  GraphColView @["Gender_avg_cos_diff"] { };
	  GraphColView @["Identity_avg_cos_diff"] { };
	  GraphColView @["Hidden_avg_trial_cos_diff"] { };
	  GraphColView @["Emotions_avg_trial_cos_diff"] { };
	  GraphColView @["Gender_avg_trial_cos_diff"] { };
	  GraphColView @["Identity_avg_trial_cos_diff"] { };
	  GraphColView @["Hidden_avg_avg_act_diff"] { };
	  GraphColView @["Emotions_avg_avg_act_diff"] { };
	  GraphColView @["Gender_avg_avg_act_diff"] { };
	  GraphColView @["Identity_avg_avg_act_diff"] { };
	  GraphColView @["Hidden_avg_net_sd"] { };
	  GraphColView @["Emotions_avg_net_sd"] { };
	  GraphColView @["Gender_avg_net_sd"] { };
	  GraphColView @["Identity_avg_net_sd"] { };
	  GraphColView @["Hidden_hog_pct"] { };
	  GraphColView @["Emotions_hog_pct"] { };
	  GraphColView @["Gender_hog_pct"] { };
	  GraphColView @["Identity_hog_pct"] { };
	  GraphColView @["Hidden_dead_pct"] { };
	  GraphColView @["Emotions_dead_pct"] { };
	  GraphColView @["Gender_dead_pct"] { };
	  GraphColView @["Identity_dead_pct"] { };
	  GraphColView @["Hidden_netmax"] { };
	  GraphColView @["Emotio_netmax"] { };
	  GraphColView @["Gender_netmax"] { };
	  GraphColView @["Identi_netmax"] { };
	  GraphColView @["Hidden_avg_act"] { };
	  GraphColView @["Emotio_avg_act"] { };
	  GraphColView @["Gender_avg_act"] { };
	  GraphColView @["Identi_avg_act"] { };
	  GraphColView @["Hidden_netrel"] { };
	  GraphColView @["Emotio_netrel"] { };
	  GraphColView @["Gender_netrel"] { };
	  GraphColView @["Identi_netrel"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @["EpochOutputData_Graph_plot_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_16"] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @["EpochOutputData_Graph_err_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_16"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["TestTrialOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["TestTrialOutputData_Grid"] { 
	 T3DataView_List @.children = [31] {
	  GridColView @["batch"] { };
	  GridColView @["epoch"] { };
	  GridColView @["train_mode"] { };
	  GridColView @["group"] { };
	  GridColView @["trial"] { };
	  GridColView @["tick"] { };
	  GridColView @["time"] { };
	  GridColView @["trial_name"] { };
	  GridColView @["group_name"] { };
	  GridColView @["output_name"] { };
	  GridColView @["rt_cycles"] { };
	  GridColView @["sse"] { };
	  GridColView @["norm_err"] { };
	  GridColView @["cos_err"] { };
	  GridColView @["ext_rew"] { };
	  GridColView @["Emotio_lay_sse"] { };
	  GridColView @["Gender_lay_sse"] { };
	  GridColView @["Identi_lay_sse"] { };
	  GridColView @["Emotio_lay_bin_err"] { };
	  GridColView @["Gender_lay_bin_err"] { };
	  GridColView @["Identi_lay_bin_err"] { };
	  GridColView @["Emotio_lay_norm_err"] { };
	  GridColView @["Gender_lay_norm_err"] { };
	  GridColView @["Identi_lay_norm_err"] { };
	  GridColView @["Emotio_lay_cos_err"] { };
	  GridColView @["Gender_lay_cos_err"] { };
	  GridColView @["Identi_lay_cos_err"] { };
	  GridColView @["Hidden_lay_net_sd"] { };
	  GridColView @["Emotio_lay_net_sd"] { };
	  GridColView @["Gender_lay_net_sd"] { };
	  GridColView @["Identi_lay_net_sd"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Osumnis_oof_phaicz"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["Osumnis_oof_phaicz_Grid"] { 
	 T3DataView_List @.children = [5] {
	  GridColView @["Name"] { };
	  GridColView @["Input"] { };
	  GridColView @["Emotions"] { };
	  GridColView @["Gender"] { };
	  GridColView @["Identity"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Panel7"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["EpochOutputData_Grid"] { 
	 T3DataView_List @.children = [69] {
	  GridColView @["batch"] { };
	  GridColView @["epoch"] { };
	  GridColView @["avg_sse"] { };
	  GridColView @["cnt_err"] { };
	  GridColView @["pct_cor"] { };
	  GridColView @["pct_err"] { };
	  GridColView @["avg_norm_err"] { };
	  GridColView @["avg_cos_err"] { };
	  GridColView @["avg_ext_rew"] { };
	  GridColView @["avg_cycles"] { };
	  GridColView @["epoch_time_tot"] { };
	  GridColView @["epoch_time_usr"] { };
	  GridColView @["Emotio_lay_avg_sse"] { };
	  GridColView @["Gender_lay_avg_sse"] { };
	  GridColView @["Identi_lay_avg_sse"] { };
	  GridColView @["Emotio_lay_cnt_err"] { };
	  GridColView @["Gender_lay_cnt_err"] { };
	  GridColView @["Identi_lay_cnt_err"] { };
	  GridColView @["Emotio_lay_pct_cor"] { };
	  GridColView @["Gender_lay_pct_cor"] { };
	  GridColView @["Identi_lay_pct_cor"] { };
	  GridColView @["Emotio_lay_pct_err"] { };
	  GridColView @["Gender_lay_pct_err"] { };
	  GridColView @["Identi_lay_pct_err"] { };
	  GridColView @["Emotio_lay_avg_norm_err"] { };
	  GridColView @["Gender_lay_avg_norm_err"] { };
	  GridColView @["Identi_lay_avg_norm_err"] { };
	  GridColView @["Emotio_lay_avg_cos_err"] { };
	  GridColView @["Gender_lay_avg_cos_err"] { };
	  GridColView @["Identi_lay_avg_cos_err"] { };
	  GridColView @["net_avg_cos_diff"] { };
	  GridColView @["net_avg_trial_cos_diff"] { };
	  GridColView @["net_avg_avg_act_diff"] { };
	  GridColView @["Hidden_avg_cos_diff"] { };
	  GridColView @["Emotions_avg_cos_diff"] { };
	  GridColView @["Gender_avg_cos_diff"] { };
	  GridColView @["Identity_avg_cos_diff"] { };
	  GridColView @["Hidden_avg_trial_cos_diff"] { };
	  GridColView @["Emotions_avg_trial_cos_diff"] { };
	  GridColView @["Gender_avg_trial_cos_diff"] { };
	  GridColView @["Identity_avg_trial_cos_diff"] { };
	  GridColView @["Hidden_avg_avg_act_diff"] { };
	  GridColView @["Emotions_avg_avg_act_diff"] { };
	  GridColView @["Gender_avg_avg_act_diff"] { };
	  GridColView @["Identity_avg_avg_act_diff"] { };
	  GridColView @["Hidden_avg_net_sd"] { };
	  GridColView @["Emotions_avg_net_sd"] { };
	  GridColView @["Gender_avg_net_sd"] { };
	  GridColView @["Identity_avg_net_sd"] { };
	  GridColView @["Hidden_hog_pct"] { };
	  GridColView @["Emotions_hog_pct"] { };
	  GridColView @["Gender_hog_pct"] { };
	  GridColView @["Identity_hog_pct"] { };
	  GridColView @["Hidden_dead_pct"] { };
	  GridColView @["Emotions_dead_pct"] { };
	  GridColView @["Gender_dead_pct"] { };
	  GridColView @["Identity_dead_pct"] { };
	  GridColView @["Hidden_netmax"] { };
	  GridColView @["Emotio_netmax"] { };
	  GridColView @["Gender_netmax"] { };
	  GridColView @["Identi_netmax"] { };
	  GridColView @["Hidden_avg_act"] { };
	  GridColView @["Emotio_avg_act"] { };
	  GridColView @["Gender_avg_act"] { };
	  GridColView @["Identi_avg_act"] { };
	  GridColView @["Hidden_netrel"] { };
	  GridColView @["Emotio_netrel"] { };
	  GridColView @["Gender_netrel"] { };
	  GridColView @["Identi_netrel"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @["Network_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [4] {
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [2] {
      LeabraBiasSpec @["LeabraBiasSpec_0"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @["TopDownCons"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [5] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [256] {
     };
    };
    LeabraLayer @["Hidden"] { 
     Projection_Group @.projections = [5] {
      LeabraPrjn @["Fm_Input"] { };
      LeabraPrjn @["Fm_Emotions"] { };
      LeabraPrjn @["Fm_Identity"] { };
      LeabraPrjn @["Fm_Gender"] { };
      LeabraPrjn @["Fm_Identity_4"] { };
     };

     Unit_Group @.units = [225] {
     };
    };
    LeabraLayer @["Emotions"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Hidden"] { };
     };

     Unit_Group @.units = [3] {
     };
    };
    LeabraLayer @["Gender"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Hidden"] { };
     };

     Unit_Group @.units = [2] {
     };
    };
    LeabraLayer @["Identity"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Hidden"] { };
     };

     Unit_Group @.units = [10] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"] {
 user_data_=NULL;
 name="projects_1_with_graphy_thing_and_EpochOutputDataTable";
 desc=;
 tags=;
 version {
  user_data_=NULL;
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  user_data_=NULL;
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {
  user_data_=NULL;
  wiki=;
  page_name=;
 };
 docs {
  user_data_=NULL;
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  user_data_=NULL;
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     user_data_=NULL;
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=0;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  user_data_=NULL;
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     user_data_=NULL;
     label="leabra_con_spec_0_lrate";
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
    EditMbrItem @[1] {
     user_data_=NULL;
     label="leabra_cycle_update_net_view";
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=1;
     base=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
    EditMbrItem @[2] {
     user_data_=NULL;
     label="cycle_qtr";
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].times$$;
     mbr=LeabraTimes::cycle_qtr;
     is_numeric=0;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     user_data_=NULL;
     label="Train_Init";
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     user_data_=NULL;
     label="Train_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     user_data_=NULL;
     label="Train_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     user_data_=NULL;
     label="Train_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    user_data_=NULL;
    name="jobs_running";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_done {
    user_data_=NULL;
    name="jobs_done";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_deleted {
    user_data_=NULL;
    name="jobs_deleted";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_archive {
    user_data_=NULL;
    name="jobs_archive";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   file_list {
    user_data_=NULL;
    name="file_list";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_name"] {
      user_data_=NULL;
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["size"] {
      user_data_=NULL;
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["kind"] {
      user_data_=NULL;
      name="kind";
      desc="type of file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_modified"] {
      user_data_=NULL;
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_created"] {
      user_data_=NULL;
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["svn_file_path"] {
      user_data_=NULL;
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["proj_file_path"] {
      user_data_=NULL;
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_path"] {
      user_data_=NULL;
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   cluster_info {
    user_data_=NULL;
    name="cluster_info";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["state"] {
      user_data_=NULL;
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["procs"] {
      user_data_=NULL;
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   clusterscript_timestamp {
    user_data_=NULL;
    name="clusterscript_timestamp";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["timestamp"] {
      user_data_=NULL;
      name="timestamp";
      desc="Timestamp of last interaction from the cluster run script";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["version"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="version";
      desc="Version number of cluster run script ";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   search_algos {
    user_data_=NULL;
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  user_data_=NULL;
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  user_data_=NULL;
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   user_data_=NULL;
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["StdInputData"] {
    user_data_=NULL;
    name="StdInputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      user_data_=NULL;
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3] "Generic_Happy";"Generic_Sad";"Generic_RBF";      };
     };
     float_Data @["Emotions"] {
      user_data_=NULL;
      name="Emotions";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 3] 1;0;0;0;1;0;0;0;1;      };
     };
     float_Data @["Input"] {
      user_data_=NULL;
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [16 16 3] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;1;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;0;0;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
     int_Data @["Gender"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_118";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 3] 0;0;0;0;0;0;      };
     };
     String_Data @["Identity"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_119";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Identity";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=4;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 3] "0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [3] 0;1;2;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["StdInputData_copy"] {
    user_data_=NULL;
    name="StdInputData_copy";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      user_data_=NULL;
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3] "Generic_Happy";"Generic_Sad";"Generic_RBF";      };
     };
     float_Data @["Emotions"] {
      user_data_=NULL;
      name="Emotions";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 3] 1;0;0;0;1;0;0;0;1;      };
     };
     float_Data @["Input"] {
      user_data_=NULL;
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [16 16 3] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;1;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;0;0;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
     int_Data @["Gender"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_118";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 3] 0;0;0;0;0;0;      };
     };
     String_Data @["Identity"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_119";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Identity";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=4;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 3] "0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [3] 0;1;2;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["Osumnis_oof_phaicz"] {
    user_data_=NULL;
    name="Osumnis_oof_phaicz";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      user_data_=NULL;
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [18] "Alberto_happy";"Alberto_sad";"Alberto_RB";"Betty_happy";"Betty_sad";"Betty_RB";"Lisa_happy";"Lisa_sad";"Lisa_RB";"Mark_happy";
"Mark_sad";"Mark_RB";"Wendy_happy";"Wendy_sad";"Wendy_RB";"Zane_happy";"Zane_sad";"Zane_RB";      };
     };
     float_Data @["Input"] {
      user_data_=NULL;
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [16 16 18] 0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;1;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;1;0;1;0;0;1;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;1;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;1;1;1;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
1;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;1;1;1;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;0;1;1;1;1;0;0;
0;1;0;1;0;1;0;1;0;1;
0;0;0;0;1;0;1;0;1;0;
0;0;1;0;1;0;0;1;1;0;
0;1;0;1;0;0;0;1;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
1;0;1;0;1;0;1;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;1;1;1;0;0;0;1;0;1;
0;1;0;1;0;1;0;0;0;0;
1;0;1;0;1;0;0;0;1;0;
1;0;1;0;0;1;0;1;0;1;
0;0;0;1;0;1;0;0;0;1;
1;0;0;1;0;0;1;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;1;0;0;0;1;1;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;1;0;0;0;1;1;1;1;
0;0;0;1;0;1;0;1;0;1;
0;1;0;0;0;0;1;0;1;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;1;1;0;1;1;1;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;1;1;1;1;0;0;0;1;
0;1;0;1;0;1;0;1;0;0;
0;0;1;0;1;0;1;0;0;0;
1;0;1;0;0;1;1;0;0;1;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;1;0;0;1;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;1;1;0;
1;0;1;0;1;0;1;1;0;0;
0;0;0;1;0;1;0;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;0;0;0;0;
0;0;1;0;1;0;0;0;1;1;
1;1;0;0;0;1;0;1;0;1;
0;1;0;1;0;0;0;0;1;0;
1;0;1;0;0;0;1;0;1;0;
1;0;0;1;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;1;0;
0;1;0;0;1;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;0;1;
1;1;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;0;0;0;0;0;0;1;0;
1;0;0;0;1;1;1;1;0;0;
0;1;0;1;0;1;0;1;0;1;
0;0;0;0;1;0;1;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;0;1;0;0;0;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
1;1;1;0;1;1;1;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;1;0;1;0;
0;1;0;1;0;1;1;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;1;0;0;1;0;0;
0;1;1;0;0;0;1;0;1;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
1;1;1;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;0;0;
0;0;0;0;0;0;0;1;1;0;
0;0;1;0;1;1;1;0;0;1;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;1;1;
1;1;0;0;1;1;1;0;0;0;
0;1;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;1;1;0;0;1;0;1;0;0;
0;0;0;1;0;0;1;0;0;1;
0;1;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;1;1;0;1;0;1;0;
1;0;1;1;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;0;0;1;1;1;1;0;0;
1;1;1;0;0;0;0;1;0;1;
0;0;0;0;1;1;1;0;0;0;
0;0;1;0;1;0;1;0;0;1;
0;1;0;1;0;0;0;0;0;1;
0;0;0;1;1;0;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;1;
0;0;1;0;1;0;0;0;1;1;
0;0;0;0;0;1;1;1;0;0;
0;1;1;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;1;0;0;
1;1;1;1;0;0;1;1;1;0;
0;0;0;1;0;1;0;0;0;0;
1;1;1;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;1;
0;0;0;0;0;1;0;0;1;1;
1;1;0;1;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;1;1;1;0;1;1;1;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;1;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;1;0;1;0;0;1;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;1;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;1;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;1;1;1;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
1;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;1;1;1;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;1;
1;1;1;1;0;0;0;0;      };
     };
     float_Data @["Emotions"] {
      user_data_=NULL;
      name="Emotions";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 18] 1;0;0;0;1;0;0;0;1;1;
0;0;0;1;0;0;0;1;1;0;
0;0;1;0;0;0;1;1;0;0;
0;1;0;0;0;1;1;0;0;0;
1;0;0;0;1;1;0;0;0;1;
0;0;0;1;      };
     };
     float_Data @["Gender"] {
      user_data_=NULL;
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 18] 0;1;0;1;0;1;1;0;1;0;
1;0;1;0;1;0;1;0;0;1;
0;1;0;1;1;0;1;0;1;0;
0;1;0;1;0;1;      };
     };
     float_Data @["Identity"] {
      user_data_=NULL;
      name="Identity";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 18] 1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [18] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   user_data_=NULL;
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["TrialOutputData"] {
    user_data_=NULL;
    name="TrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 102;      };
     };
     String_Data @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] "TRAIN";      };
     };
     int_Data @["group"] {
      user_data_=NULL;
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     int_Data @["trial"] {
      user_data_=NULL;
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     int_Data @["tick"] {
      user_data_=NULL;
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["time"] {
      user_data_=NULL;
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 30.700001;      };
     };
     String_Data @["trial_name"] {
      user_data_=NULL;
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] "Generic_Happy";      };
     };
     String_Data @["group_name"] {
      user_data_=NULL;
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] ;      };
     };
     String_Data @["output_name"] {
      user_data_=NULL;
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] ;      };
     };
     float_Data @["rt_cycles"] {
      user_data_=NULL;
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 75;      };
     };
     float_Data @["sse"] {
      user_data_=NULL;
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 2;      };
     };
     float_Data @["norm_err"] {
      user_data_=NULL;
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.5;      };
     };
     float_Data @["cos_err"] {
      user_data_=NULL;
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["ext_rew"] {
      user_data_=NULL;
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Emotio_lay_sse"] {
      user_data_=NULL;
      name="Emotio_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 1;      };
     };
     float_Data @["Gender_lay_sse"] {
      user_data_=NULL;
      name="Gender_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Identi_lay_sse"] {
      user_data_=NULL;
      name="Identi_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 1;      };
     };
     float_Data @["Emotio_lay_bin_err"] {
      user_data_=NULL;
      name="Emotio_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 1;      };
     };
     float_Data @["Gender_lay_bin_err"] {
      user_data_=NULL;
      name="Gender_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Identi_lay_bin_err"] {
      user_data_=NULL;
      name="Identi_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 1;      };
     };
     float_Data @["Emotio_lay_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.5;      };
     };
     float_Data @["Gender_lay_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] -1;      };
     };
     float_Data @["Identi_lay_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.5;      };
     };
     float_Data @["Emotio_lay_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Gender_lay_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Identi_lay_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Hidden_lay_net_sd"] {
      user_data_=NULL;
      name="Hidden_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.17897452;      };
     };
     float_Data @["Emotio_lay_net_sd"] {
      user_data_=NULL;
      name="Emotio_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Gender_lay_net_sd"] {
      user_data_=NULL;
      name="Gender_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Identi_lay_net_sd"] {
      user_data_=NULL;
      name="Identi_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["net_cos_diff"] {
      user_data_=NULL;
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.41837171;      };
     };
     float_Data @["net_trial_cos_diff"] {
      user_data_=NULL;
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.97936362;      };
     };
     float_Data @["net_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.0067289099;      };
     };
     float_Data @["Hidden_cos_diff"] {
      user_data_=NULL;
      name="Hidden_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] -0.16325659;      };
     };
     float_Data @["Emotions_cos_diff"] {
      user_data_=NULL;
      name="Emotions_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Gender_cos_diff"] {
      user_data_=NULL;
      name="Gender_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Identity_cos_diff"] {
      user_data_=NULL;
      name="Identity_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Hidden_trial_cos_diff"] {
      user_data_=NULL;
      name="Hidden_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.95884973;      };
     };
     float_Data @["Emotions_trial_cos_diff"] {
      user_data_=NULL;
      name="Emotions_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.99975556;      };
     };
     float_Data @["Gender_trial_cos_diff"] {
      user_data_=NULL;
      name="Gender_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0;      };
     };
     float_Data @["Identity_trial_cos_diff"] {
      user_data_=NULL;
      name="Identity_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.9999997;      };
     };
     float_Data @["Hidden_avg_act_diff"] {
      user_data_=NULL;
      name="Hidden_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.013457813;      };
     };
     float_Data @["Emotions_avg_act_diff"] {
      user_data_=NULL;
      name="Emotions_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.025885781;      };
     };
     float_Data @["Gender_avg_act_diff"] {
      user_data_=NULL;
      name="Gender_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] -4.2038954e-45;      };
     };
     float_Data @["Identity_avg_act_diff"] {
      user_data_=NULL;
      name="Identity_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1] 0.007765728;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [1] 0;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["EpochOutputData"] {
    user_data_=NULL;
    name="EpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;      };
     };
     float_Data @["avg_sse"] {
      user_data_=NULL;
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 2.6145809;2.9738686;1.8587307;2.7911065;2.5155718;3.0339406;3.1963952;3.1408062;3.4235115;3.2742319;
3.9574823;3.5443637;3.5788624;3.6188533;3.6439512;3.6986399;3.5200737;3.3612511;3.1335976;3.1806278;
3.6496725;3.2143433;3.268404;3.9185374;3.5915763;3.9027317;3.4946079;3.5972049;3.6108017;4.022222;
3.6672657;3.8675869;3.5740745;3.9128666;4.2536945;3.79813;3.3736866;3.7371273;3.5637121;4.058836;
3.1840394;3.7792656;3.4975355;3.8071783;3.5520623;4.1949124;3.2848024;3.5662739;3.4300814;4.1579041;
4.0570245;3.3672152;3.7399304;4.4120874;3.7673385;3.1055644;4.2593417;3.7910235;3.3861716;3.7688358;
3.486248;3.4402733;2.8533804;2.9584954;2.660301;2.6876485;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;      };
     };
     float_Data @["cnt_err"] {
      user_data_=NULL;
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;      };
     };
     float_Data @["pct_cor"] {
      user_data_=NULL;
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["pct_err"] {
      user_data_=NULL;
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["avg_norm_err"] {
      user_data_=NULL;
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.58333331;0.75;0.5;0.66666669;0.58333331;0.75;0.75;0.66666669;0.83333331;0.83333331;
0.91666669;0.83333331;0.91666669;0.83333331;0.83333331;0.91666669;0.83333331;0.75;0.66666669;0.75;
0.83333331;0.75;0.66666669;0.75;0.75;0.75;0.83333331;0.83333331;0.91666669;0.83333331;
0.83333331;0.83333331;0.66666669;0.75;1;0.83333331;0.58333331;0.75;0.66666669;0.83333331;
0.66666669;0.75;0.83333331;0.83333331;0.75;0.83333331;0.66666669;0.75;0.66666669;0.91666669;
0.83333331;0.66666669;0.75;0.91666669;0.75;0.66666669;0.83333331;0.66666669;0.75;0.83333331;
0.66666669;0.75;0.66666669;0.66666669;0.66666669;0.66666669;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;      };
     };
     float_Data @["avg_cos_err"] {
      user_data_=NULL;
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.0030741126;0.11608598;0.13709261;0.18998337;0.20569332;0.10849119;8.2899978e-06;0.11196465;3.6598592e-06;0.10228586;
0.0011757404;0.10838863;0.099985875;0.11114213;0.11380283;0.10657705;0.11114118;0.11441493;0.19759338;0.2221572;
0.11607196;0.22147121;0.22064917;0.095797479;0.030743308;0.1112668;0.11749307;0.018414823;0.11186337;0.11068993;
0.18750252;0.11111531;0.11208847;0.11659161;0.0023149976;0.11111119;0.22243361;0.12987478;0.22223158;0.13500558;
0.11126313;0.15368766;0.14221621;0.12163541;0.1435339;0.035021104;0.16093409;0.22179888;0.11974492;0.0091406992;
3.4373832e-05;0.11111169;0.18262862;0.00016225343;0.11274441;2.0684616e-05;0.044397082;0.22221959;0.067631215;0.0001117368;
0.10156548;0.00031316601;5.7637949e-06;9.6365984e-05;0.00022464;0.0020371911;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["avg_ext_rew"] {
      user_data_=NULL;
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["avg_cycles"] {
      user_data_=NULL;
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 72;69.666664;68;67.666664;66.666664;63.333332;64.666664;60.666668;58;57.333332;
49;52.333332;50.333332;44.333332;45.333332;48.333332;40.333332;38.666668;37.666668;36.666668;
36;38.666668;37.666668;34.333332;33.666668;33.666668;33.333332;33.333332;32;34;
35.333332;37.666668;38.333332;36.333332;35.666668;35;35;37;38;32.666668;
32;32.333332;33.666668;35;36.666668;39.666668;35.666668;38;38.666668;42;
46.666668;47;50.666668;56.333332;51.333332;59;50.666668;52.666668;53.666668;59.666668;
60.333332;64.333336;66.666664;70.333336;69;72.333336;75;75;75;75;
75;75;75;75;75;75;75;75;75;75;
75;75;75;75;75;75;75;75;75;75;
75;75;75;75;75;75;75;75;75;75;
75;75;      };
     };
     float_Data @["epoch_time_tot"] {
      user_data_=NULL;
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.059999999;0.025;0.028999999;0.030999999;0.027000001;0.12899999;0.127;0.043000001;0.088;0.081;
0.032000002;0.046;0.023;0.028000001;0.028999999;0.027000001;0.044;0.025;0.035;0.029999999;
0.027000001;0.11;0.015;0.025;0.027000001;0.046;0.030999999;0.030999999;0.026000001;0.026000001;
0.028000001;0.026000001;0.025;0.026000001;0.026000001;0.052999999;0.035;0.025;0.028999999;0.027000001;
0.026000001;0.027000001;0.025;0.028999999;0.025;0.025;0.025;0.030999999;0.026000001;0.027000001;
0.028000001;0.026000001;0.029999999;0.027000001;0.026000001;0.048999999;0.030999999;0.022;0.030999999;0.026000001;
0.024;0.026000001;0.032000002;0.033;0.029999999;0.026000001;0.027000001;0.026000001;0.026000001;0.030999999;
0.025;0.028999999;0.025;0.030999999;0.025;0.025;0.026000001;0.027000001;0.029999999;0.025;
0.028999999;0.057999998;0.025;0.066;0.046;0.061999999;0.324;0.234;0.16;0.059999999;
0.030999999;0.017000001;0.024;0.027000001;0.026000001;0.027000001;0.027000001;0.027000001;0.035;0.046999998;
0.028999999;0.030999999;      };
     };
     float_Data @["epoch_time_usr"] {
      user_data_=NULL;
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.059999999;0.025;0.028999999;0.030999999;0.027000001;0.12899999;0.127;0.043000001;0.088;0.081;
0.032000002;0.046;0.023;0.028000001;0.028999999;0.027000001;0.044;0.025;0.035;0.029999999;
0.027000001;0.11;0.015;0.025;0.027000001;0.046;0.030999999;0.030999999;0.026000001;0.026000001;
0.028000001;0.026000001;0.025;0.026000001;0.026000001;0.052999999;0.035;0.025;0.028999999;0.027000001;
0.026000001;0.027000001;0.025;0.028999999;0.025;0.025;0.025;0.030999999;0.026000001;0.027000001;
0.028000001;0.026000001;0.029999999;0.027000001;0.026000001;0.048999999;0.030999999;0.022;0.030999999;0.026000001;
0.024;0.026000001;0.032000002;0.033;0.029999999;0.026000001;0.027000001;0.026000001;0.026000001;0.030999999;
0.025;0.028999999;0.025;0.030999999;0.025;0.025;0.026000001;0.027000001;0.029999999;0.025;
0.028999999;0.057999998;0.025;0.066;0.046;0.061999999;0.324;0.234;0.16;0.059999999;
0.030999999;0.017000001;0.024;0.027000001;0.026000001;0.027000001;0.027000001;0.027000001;0.035;0.046999998;
0.028999999;0.030999999;      };
     };
     float_Data @["Emotio_lay_avg_sse"] {
      user_data_=NULL;
      name="Emotio_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.99506831;1.1016099;0.92645526;0.74394339;0.99920994;0.91323417;1.1241611;0.66431624;1.3010204;0.92583209;
1.240368;0.94155186;1.0531434;0.91782421;0.85795432;1.038076;0.88327956;0.78961271;0.52575254;0.54135805;
0.85310096;0.53966755;0.45632324;0.80107403;0.93921584;0.7569769;0.85951251;1.0494331;0.95599765;0.88014585;
0.80382091;0.84682077;0.66400748;0.81906039;1.3313283;0.93156141;0.3327609;0.72684526;0.42542967;0.87242436;
0.6663239;0.70654964;0.81801373;0.85124111;0.68210286;1.0368415;0.58637279;0.57641917;0.64476556;1.1603022;
1.1099931;0.66666448;0.68213797;1.2052337;0.76063162;0.99994522;1.0540012;0.46224928;0.90963864;1.2320423;
0.8261199;1.141336;1.1269783;1.1585082;1.0830489;1.0936242;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Gender_lay_avg_sse"] {
      user_data_=NULL;
      name="Gender_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identi_lay_avg_sse"] {
      user_data_=NULL;
      name="Identi_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 1.6195124;1.8722587;0.93227547;2.0471632;1.5163618;2.1207068;2.0722344;2.4764898;2.1224909;2.3483999;
2.7171142;2.6028118;2.5257192;2.7010288;2.7859967;2.6605637;2.6367939;2.5716386;2.6078451;2.6392696;
2.7965717;2.6746762;2.8120806;3.1174634;2.6523607;3.1457546;2.6350956;2.5477717;2.6548045;3.1420765;
2.8634446;3.0207663;2.9100668;3.0938063;2.9223664;2.8665683;3.0409253;3.0102818;3.1382825;3.1864116;
2.5177157;3.072716;2.6795216;2.9559371;2.8699596;3.1580708;2.6984298;2.9898548;2.7853158;2.9976017;
2.947031;2.7005508;3.0577927;3.2068536;3.006707;2.1056192;3.2053406;3.3287742;2.4765329;2.5367935;
2.6601281;2.2989371;1.7264023;1.7999872;1.577252;1.5940243;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Emotio_lay_cnt_err"] {
      user_data_=NULL;
      name="Emotio_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 3;3;3;3;3;3;3;2;3;3;
3;3;3;2;3;3;2;2;2;2;
3;2;2;3;3;2;3;3;3;3;
3;2;2;3;3;2;1;2;2;3;
2;3;3;3;3;3;2;2;2;3;
3;2;2;3;2;3;3;1;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;      };
     };
     float_Data @["Gender_lay_cnt_err"] {
      user_data_=NULL;
      name="Gender_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identi_lay_cnt_err"] {
      user_data_=NULL;
      name="Identi_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;      };
     };
     float_Data @["Emotio_lay_pct_cor"] {
      user_data_=NULL;
      name="Emotio_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0.33333331;0;0;
0;0;0;0.33333331;0;0;0.33333331;0.33333331;0.33333331;0.33333331;
0;0.33333331;0.33333331;0;0;0.33333331;0;0;0;0;
0;0.33333331;0.33333331;0;0;0.33333331;0.66666663;0.33333331;0.33333331;0;
0.33333331;0;0;0;0;0;0.33333331;0.33333331;0.33333331;0;
0;0.33333331;0.33333331;0;0.33333331;0;0;0.66666663;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Gender_lay_pct_cor"] {
      user_data_=NULL;
      name="Gender_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Identi_lay_pct_cor"] {
      user_data_=NULL;
      name="Identi_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Emotio_lay_pct_err"] {
      user_data_=NULL;
      name="Emotio_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 1;1;1;1;1;1;1;0.66666669;1;1;
1;1;1;0.66666669;1;1;0.66666669;0.66666669;0.66666669;0.66666669;
1;0.66666669;0.66666669;1;1;0.66666669;1;1;1;1;
1;0.66666669;0.66666669;1;1;0.66666669;0.33333334;0.66666669;0.66666669;1;
0.66666669;1;1;1;1;1;0.66666669;0.66666669;0.66666669;1;
1;0.66666669;0.66666669;1;0.66666669;1;1;0.33333334;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Gender_lay_pct_err"] {
      user_data_=NULL;
      name="Gender_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identi_lay_pct_err"] {
      user_data_=NULL;
      name="Identi_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Emotio_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.5;0.66666669;0.5;0.5;0.5;0.66666669;0.66666669;0.33333334;0.83333331;0.66666669;
0.83333331;0.66666669;0.83333331;0.66666669;0.66666669;0.83333331;0.66666669;0.5;0.33333334;0.5;
0.66666669;0.5;0.33333334;0.5;0.5;0.5;0.66666669;0.66666669;0.83333331;0.66666669;
0.66666669;0.66666669;0.33333334;0.5;1;0.66666669;0.16666667;0.5;0.33333334;0.66666669;
0.33333334;0.5;0.66666669;0.66666669;0.5;0.66666669;0.33333334;0.5;0.33333334;0.83333331;
0.66666669;0.33333334;0.5;0.83333331;0.5;0.5;0.66666669;0.33333334;0.5;0.83333331;
0.5;0.66666669;0.66666669;0.66666669;0.66666669;0.66666669;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;      };
     };
     float_Data @["Gender_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identi_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.66666669;0.83333331;0.5;0.83333331;0.66666669;0.83333331;0.83333331;1;0.83333331;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;0.83333331;1;1;1;0.83333331;
0.83333331;0.83333331;0.66666669;0.66666669;0.66666669;0.66666669;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;      };
     };
     float_Data @["Emotio_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.009222337;0.34811461;0.14872143;0.34407282;0.30198857;0.3254706;2.4869994e-05;0.33589396;1.0967433e-05;0.30685383;
0.0034888703;0.32515246;0.2999461;0.33342573;0.34140798;0.3197296;0.33342311;0.34324417;0.5927794;0.66647142;
0.34821591;0.66441363;0.66194743;0.28739244;0.092229925;0.33380044;0.35247922;0.055244472;0.33559015;0.33206978;
0.56250751;0.33334592;0.33626541;0.34977484;0.0069449935;0.33333352;0.66730088;0.38962433;0.6666947;0.40501669;
0.33378935;0.461063;0.42664862;0.36490628;0.43060175;0.10506331;0.48280227;0.66539663;0.35923472;0.027422095;
0.00010312149;0.33333507;0.54788584;0.00048676031;0.33823323;6.2053849e-05;0.13319124;0.66665882;0.20289363;0.00033521038;
0.30469644;0.00093949802;1.7291384e-05;0.00028909795;0.00067391997;0.0061115734;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Gender_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identi_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 1.293088e-09;0.00014330797;0.2625564;0.2258773;0.3150914;2.9867144e-06;0;0;1.2145159e-08;3.747122e-06;
3.8350856e-05;1.3448375e-05;1.1522753e-05;6.5405271e-07;5.2271804e-07;1.5696482e-06;4.404036e-07;6.7877494e-07;6.7626706e-07;1.4876865e-07;
1.5445746e-09;5.7989728e-12;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["net_avg_cos_diff"] {
      user_data_=NULL;
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.50462043;0.54322928;0.64475483;0.51604551;0.52470118;0.45201638;0.44386837;0.43027082;0.49897957;0.49327204;
0.49130896;0.45057023;0.46442175;0.42196414;0.41055503;0.4220725;0.41505226;0.39886284;0.38803068;0.41380605;
0.42343721;0.38994873;0.3958967;0.37673029;0.39084825;0.36830935;0.38623428;0.37861025;0.40144899;0.37685561;
0.38013843;0.37225783;0.38261545;0.36088502;0.35758814;0.3697859;0.37821111;0.3719891;0.37127289;0.36618885;
0.37712929;0.36378786;0.36112687;0.36191025;0.36508599;0.35745394;0.37014219;0.37056699;0.36909819;0.36448848;
0.36824569;0.36118785;0.34475169;0.35001969;0.35768008;0.39647698;0.36691952;0.35713735;0.37153688;0.38198242;
0.37237319;0.38067508;0.41183579;0.41165173;0.42317584;0.41673502;0.4498575;0.45010993;0.44903877;0.44236875;
0.43744519;0.43755254;0.43797174;0.44048563;0.44172093;0.44208619;0.4427174;0.44166541;0.43985426;0.43832418;
0.43824825;0.44025636;0.4445869;0.4473733;0.44938612;0.45111993;0.45396248;0.45653662;0.45800158;0.45895469;
0.4603622;0.46380296;0.45529139;0.44998446;0.45177278;0.45360681;0.45479557;0.45587257;0.45543465;0.45650554;
0.45481464;0.45470294;      };
     };
     float_Data @["net_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.46655169;0.7992363;0.69824934;0.69934821;0.73221081;0.66440791;0.69236785;0.66177231;0.69370753;0.68534166;
0.6617462;0.70181757;0.8094241;0.66843206;0.77315968;0.72029525;0.77516967;0.6842187;0.8021695;0.67286974;
0.81776303;0.71485382;0.71075004;0.70608002;0.79606342;0.75837988;0.74774486;0.69125795;0.81340599;0.67111564;
0.74187273;0.67229468;0.76941222;0.67844409;0.67903328;0.69011998;0.77235097;0.81383878;0.70971221;0.81147498;
0.77211255;0.80690688;0.79919863;0.79625303;0.80289489;0.69349664;0.73900491;0.67371774;0.70645303;0.73842835;
0.66803503;0.69069725;0.68914336;0.80244589;0.8093316;0.78457385;0.71064645;0.7825613;0.78307432;0.73768729;
0.68692607;0.67771977;0.65887684;0.79689771;0.66383177;0.78342217;0.81394762;0.8161872;0.74428338;0.69399405;
0.68593073;0.79689604;0.77262658;0.73215884;0.66306049;0.73585182;0.70670152;0.70634604;0.81390566;0.76032138;
0.67806262;0.68296385;0.68627959;0.70519131;0.70975447;0.81520462;0.70789081;0.70651501;0.7059769;0.79635412;
0.66622978;0.79061729;0.66096193;0.81015301;0.67159766;0.70975924;0.70114201;0.78047448;0.81391716;0.81357867;
0.77356428;0.70831728;      };
     };
     float_Data @["net_avg_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.0034869993;0.0027726975;0.0032923997;0.0023732397;0.0033540644;0.0010877893;0.0015807328;-0.00023755712;0.00051039405;4.3058495e-05;
-0.001545536;-0.00084830663;-0.00048344399;-0.001692131;-0.0015146658;-0.0011910213;-0.0014931808;-0.0011628143;-0.0010135391;-0.0012708968;
-0.0014787969;-0.001322318;-0.0015831352;-0.0018943049;-0.0012756236;-0.0022322021;-0.0012900966;-0.001178794;-0.0011177087;-0.0022562863;
-0.0016330507;-0.0020597524;-0.0016308405;-0.0019119073;-0.0018343722;-0.0014071553;-0.001843228;-0.0018305397;-0.0017845588;-0.0019802563;
-0.00093982363;-0.0017307037;-0.0011309936;-0.0014903949;-0.0014297728;-0.0018837499;-0.0014973842;-0.0017517906;-0.001285429;-0.0017493936;
-0.0012564773;-0.00083338795;-0.0012503532;-0.0012409723;-0.00068776676;0.0019478338;-0.0015290594;-0.0020324767;-0.00040103935;0.00076800329;
0.00096421916;0.0017031214;0.0038965188;0.003767791;0.0039274595;0.0042589712;0.0062901322;0.0063488856;0.0064891181;0.0064060981;
0.0064652157;0.0064257667;0.0063480735;0.0063061616;0.0062071807;0.006224385;0.006289613;0.0065089152;0.0066729579;0.0067162048;
0.0067561213;0.0067682327;0.0066410168;0.0066810674;0.0067742355;0.006827068;0.0069167935;0.0067769322;0.0069497917;0.0071551441;
0.0072124824;0.0071064141;0.0068471548;0.0067143166;0.006472772;0.006460506;0.0064747632;0.0067116604;0.0069749542;0.0069833254;
0.0071192421;0.0071993503;      };
     };
     float_Data @["Hidden_avg_cos_diff"] {
      user_data_=NULL;
      name="Hidden_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.015816115;0.086458422;0.28950965;0.032091048;0.049402367;-0.095967196;-0.11226329;-0.13945836;-0.0020407985;-0.013455977;
-0.017382072;-0.098859549;-0.071156435;-0.15607177;-0.17888989;-0.155855;-0.16989547;-0.20227437;-0.2239386;-0.1723879;
-0.1531256;-0.22010256;-0.20820658;-0.24653943;-0.21830352;-0.26338133;-0.22753149;-0.24277949;-0.19710195;-0.24628876;
-0.23972313;-0.25548434;-0.23476906;-0.27822998;-0.28482369;-0.26042822;-0.24357784;-0.25602177;-0.25745428;-0.26762235;
-0.24574144;-0.27242431;-0.27774629;-0.2761794;-0.26982805;-0.28509215;-0.25971565;-0.25886604;-0.26180366;-0.27102304;
-0.26350859;-0.27762428;-0.31049666;-0.29996058;-0.28463987;-0.20704602;-0.26616094;-0.28572527;-0.25692615;-0.23603518;
-0.25525358;-0.23864989;-0.17632848;-0.17669654;-0.1536483;-0.16653;-0.10028497;-0.099780142;-0.10192244;-0.11526248;
-0.1251096;-0.12489488;-0.12405653;-0.11902877;-0.11655813;-0.11582766;-0.11456522;-0.1166692;-0.12029149;-0.12335167;
-0.12350357;-0.11948732;-0.11082619;-0.10525336;-0.10122771;-0.097760111;-0.092074998;-0.086926781;-0.08399687;-0.082090594;
-0.079275653;-0.072394036;-0.089417227;-0.10003104;-0.096454419;-0.092786402;-0.090408839;-0.088254832;-0.089130752;-0.086988956;
-0.090370737;-0.090594091;      };
     };
     float_Data @["Emotions_avg_cos_diff"] {
      user_data_=NULL;
      name="Emotions_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] -0.41668376;-0.13384981;-0.35480055;-0.14330791;-0.12058195;-0.015306652;-0.58381486;-0.08861161;-0.50015861;-0.0034162402;
-0.51065171;-0.0089636445;-0.007694006;-0.0041426816;-0.15868506;-0.014015873;-0.00014362733;-0.0029793382;0.3440657;0.49978924;
0.0097595649;0.49069133;0.49381074;-0.16002192;-0.43052924;-0.0046551623;0.011882384;-0.46532321;0.0016396046;-0.0014571348;
0.3297821;-0.0072513521;-0.042007547;0.017805457;-0.49617019;-5.2054722e-05;0.49916908;0.0073726177;0.49963284;0.05857398;
-0.034820914;-0.16604646;0.065419078;0.025392899;0.077319719;-0.40778437;0.063732617;0.49982953;0.0046073892;-0.4830828;
-0.5114302;-0.031177143;0.28362116;-0.52396226;-0.013140708;-0.40354338;-0.54024953;0.49999484;-0.26161709;-0.33372512;
0.0040658116;-0.36469376;-0.16666242;-0.1664563;-0.16623797;-0.16414352;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Gender_avg_cos_diff"] {
      user_data_=NULL;
      name="Gender_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identity_avg_cos_diff"] {
      user_data_=NULL;
      name="Identity_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] -0.14592139;-0.19776709;0.16914316;0.097410977;0.20830113;-0.2170793;-0.15385111;-0.1864385;-0.16847456;-0.18773215;
-0.2000045;-0.17700668;-0.1753664;-0.17976882;-0.19861023;-0.17093098;-0.17153227;-0.17570327;-0.17342377;-0.16908073;
-0.18853258;-0.19946258;-0.18161064;-0.20135307;-0.17572676;-0.20360871;-0.17380579;-0.18276411;-0.17195822;-0.21803635;
-0.18920572;-0.20445974;-0.18867777;-0.20443527;-0.21229608;-0.19258325;-0.20257856;-0.21328633;-0.20422661;-0.2170466;
-0.18693423;-0.20692246;-0.19119246;-0.19288088;-0.19658984;-0.20974018;-0.19661923;-0.20719488;-0.19918786;-0.21630734;
-0.19144368;-0.19133691;-0.21833789;-0.21891429;-0.21988821;-0.2159164;-0.21772878;-0.22092235;-0.21623354;-0.21687311;
-0.21539362;-0.13931416;-0.14758857;-0.14654613;-0.073348887;-0.08136218;-0.070557348;-0.077327408;0;-0.10193563;
-0.10664586;-0.10148088;-0.078345053;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Hidden_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Hidden_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.62975341;0.9774577;0.97216958;0.9731226;0.97138089;0.96788073;0.95612454;0.89402455;0.890028;0.93952745;
0.95890409;0.97093624;0.98290777;0.97051859;0.97625798;0.93754941;0.91080493;0.93211603;0.96332842;0.97665435;
0.9931739;0.99159288;0.98299193;0.97328025;0.94749469;0.94018763;0.91850549;0.94233418;0.98040348;0.97023368;
0.97405607;0.97218704;0.95981389;0.91528529;0.91624784;0.93823791;0.96468765;0.97848481;0.97693998;0.97330779;
0.96341842;0.96378595;0.94818401;0.94212991;0.95524818;0.94365716;0.96544248;0.97305793;0.96928972;0.96399355;
0.96148938;0.93755215;0.93437749;0.95327884;0.96695966;0.98660022;0.9771536;0.98243999;0.98340446;0.96183389;
0.92953396;0.91108185;0.94264388;0.94150275;0.95249724;0.98375797;0.97546631;0.97990423;0.97468203;0.94339079;
0.92724109;0.94118351;0.9619419;0.95030838;0.95075393;0.95765418;0.9686715;0.96794534;0.97502786;0.93718415;
0.91133851;0.92112905;0.92774969;0.96556282;0.97467965;0.97751182;0.97093481;0.96817464;0.96709085;0.93976337;
0.88758248;0.92827052;0.94639605;0.96732473;0.96765828;0.97461313;0.95737368;0.97730422;0.97481781;0.97413474;
0.96346813;0.90233678;      };
     };
     float_Data @["Emotions_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Emotions_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] -0.30146375;-0.00079951686;-0.45656434;-0.45880088;-0.46093675;-0.46297526;-0.46491933;-0.46677223;-0.46853706;-0.47021711;
-0.47181544;-0.47333527;-0.00047056875;-0.47615159;-0.00042421618;-0.47869053;-0.00038175783;-0.48097527;-0.00034303466;-0.48302802;
-0.00030775866;-0.48486963;-0.48571751;-0.48651984;-0.00024674335;-0.00023337205;-0.00022060673;-0.48931703;-0.00019707282;-0.4904964;
-0.49103773;-0.49154893;-0.00015680988;-0.49248758;-0.4929179;-0.49332407;-0.00012446444;-0.00011748075;-0.49441043;-0.00010452668;
-9.8625816e-05;-9.2973314e-05;-8.7718166e-05;-8.2711376e-05;-7.7982746e-05;-0.49631393;-0.49652743;-0.49672863;-0.49691832;-0.49709705;
-0.49726558;-0.49742436;-0.49757397;-4.5786303e-05;-4.3094158e-05;-4.0600698e-05;-0.49809095;-3.606081e-05;-3.3974648e-05;-0.49840534;
-0.49849829;-0.49858579;-0.49866819;-2.5202831e-05;-0.49881896;-2.2341808e-05;-2.1090111e-05;-1.9828478e-05;-0.49907136;-0.49912557;
-0.49917665;-1.5646219e-05;-1.4682611e-05;-0.49931261;-0.49935278;-0.49939057;-0.49942616;-0.49945971;-1.0212262e-05;-9.6162157e-06;
-0.499549;-0.49957535;-0.49960017;-0.49962354;-0.4996455;-6.7353249e-06;-0.49968579;-0.49970415;-0.49972144;-5.3048134e-06;
-0.49975309;-4.6590962e-06;-0.49978113;-4.1524568e-06;-0.49980602;-0.49981728;-0.49982801;-3.2683213e-06;-3.1093757e-06;-2.8610229e-06;
-2.7219455e-06;-0.49987277;      };
     };
     float_Data @["Gender_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Gender_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identity_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Identity_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.66656911;0.99986082;0.99986887;0.9998765;0.99988383;0.99989063;0.999897;0.99990302;0.99990875;0.99991399;
0.99991912;0.99992388;0.9999283;0.99993253;0.9999364;0.9999401;0.99994367;0.99994689;0.99994999;0.99995303;
0.99995571;0.99995834;0.99996072;0.99996305;0.99996519;0.99996728;0.99996918;0.99997109;0.99997276;0.99997425;
0.99997574;0.99997717;0.99997854;0.99997979;0.99998099;0.99998206;0.99998313;0.99998409;0.99998504;0.99998587;
0.99998665;0.99998742;0.99998826;0.99998885;0.99998951;0.99999022;0.9999907;0.99999124;0.99999171;0.99999231;
0.99999267;0.99999309;0.99999362;0.99999398;0.99999428;0.99999458;0.99999493;0.99999523;0.99999547;0.99999577;
0.99999601;0.99999624;0.99999642;0.99999666;0.9999969;0.99999708;0.9999972;0.99999738;0.99999756;0.99999762;
0.99999779;0.99999803;0.99999809;0.99999815;0.99999827;0.99999833;0.99999851;0.99999851;0.99999857;0.99999875;
0.99999881;0.99999881;0.99999887;0.99999899;0.99999905;0.99999911;0.99999911;0.99999923;0.99999923;0.99999928;
0.99999928;0.99999934;0.99999934;0.99999934;0.99999946;0.99999952;0.99999952;0.99999958;0.99999958;0.99999952;
0.99999958;0.9999997;      };
     };
     float_Data @["Hidden_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Hidden_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.0069751362;0.0055453908;0.0065847966;0.0047464762;0.006708126;0.0021755761;0.0031614623;-0.00047511724;0.0010207847;8.6113963e-05;
-0.0030910738;-0.0016966163;-0.00096689252;-0.0033842644;-0.0030293355;-0.0023820461;-0.0029863662;-0.0023256314;-0.002027083;-0.0025417961;
-0.0029575985;-0.0026446388;-0.0031662732;-0.0037886128;-0.0025512513;-0.0044644084;-0.0025801968;-0.0023575907;-0.0022354221;-0.0045125745;
-0.0032661047;-0.0041195066;-0.0032616851;-0.0038238175;-0.0036687476;-0.0028143134;-0.0036864597;-0.0036610838;-0.0035691203;-0.0039605177;
-0.0018796511;-0.0034614122;-0.0022619918;-0.0029807945;-0.0028595498;-0.0037675027;-0.002994772;-0.0035035834;-0.0025708608;-0.003498791;
-0.0025129572;-0.0016667788;-0.0025007094;-0.0024819488;-0.0013755379;0.0038956637;-0.0030581218;-0.0040649576;-0.00080208277;0.0015360033;
0.0019284356;0.0034062397;0.0077930354;0.0075355773;0.0078549162;0.0085179377;0.012580261;0.012697767;0.012978232;0.012812193;
0.01293043;0.01285153;0.012696143;0.01261232;0.012414358;0.012448766;0.012579222;0.013017829;0.013345912;0.013432406;
0.013512239;0.013536463;0.01328203;0.013362132;0.013548468;0.013654131;0.013833583;0.013553862;0.01389958;0.014310283;
0.014424961;0.014212823;0.013694308;0.013428628;0.012945541;0.012921008;0.012949524;0.013423317;0.013949905;0.013966647;
0.01423848;0.014398697;      };
     };
     float_Data @["Emotions_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Emotions_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.02307033;0.019983919;0.022286611;0.019029951;0.02160673;0.015313987;0.017326834;0.014333776;0.014686674;0.015057667;
0.011810501;0.012370055;0.013788961;0.010703915;0.012780786;0.011757891;0.011686259;0.011857382;0.013171454;0.012364354;
0.013051133;0.012538012;0.01206327;0.012795952;0.01378382;0.011487191;0.013169161;0.013134129;0.012974485;0.011809475;
0.013514508;0.010764753;0.012793184;0.014034146;0.010535941;0.0099831633;0.010951621;0.012254192;0.013000653;0.013070536;
0.012620308;0.014269128;0.012895443;0.012639828;0.013707566;0.012616088;0.013704038;0.012019898;0.012800157;0.013238914;
0.012785696;0.01302499;0.01332929;0.013406913;0.013666536;0.018023878;0.013633252;0.011917084;0.015101974;0.016569257;
0.018423673;0.017354054;0.020672254;0.020674869;0.021906743;0.02255661;0.025885759;0.025885759;0.025885748;0.025885748;
0.025885748;0.025885759;0.025885759;0.025885748;0.025885748;0.025885748;0.025885748;0.025885748;0.025885759;0.025885759;
0.025885748;0.025885748;0.025885748;0.025885748;0.025885748;0.025885759;0.025885748;0.025885748;0.025885748;0.025885759;
0.025885748;0.025885759;0.025885748;0.025885759;0.025885748;0.025885748;0.025885748;0.025885759;0.025885759;0.025885759;
0.025885759;0.025885748;      };
     };
     float_Data @["Gender_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Gender_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] -0.0031725348;-0.0054526678;-0.0038045177;-0.0071909106;-0.00486458;-0.010281828;-0.0075169294;-0.011987299;-0.0092242016;-0.010955763;
-0.014539807;-0.011885029;-0.012407553;-0.014619753;-0.014504194;-0.013476703;-0.014365279;-0.01422862;-0.01225634;-0.013499667;
-0.014153503;-0.01376941;-0.014890399;-0.013697945;-0.01357583;-0.013900965;-0.014089447;-0.0130665;-0.012165503;-0.015362409;
-0.013584018;-0.014603301;-0.014032687;-0.014289066;-0.013987507;-0.015156521;-0.014456861;-0.015644412;-0.014007683;-0.014769035;
-0.013717356;-0.014745007;-0.014039446;-0.013270963;-0.013613991;-0.013911606;-0.01315581;-0.014802784;-0.013864505;-0.014691152;
-0.013262612;-0.013139433;-0.014039653;-0.014200926;-0.013428089;-0.0083445702;-0.014051852;-0.013524176;-0.012413525;-0.0094985785;
-0.0089285402;-0.0086449152;-0.005312555;-0.0044907774;-0.0043069213;-0.0033681728;-0.00017466159;-3.3290558e-05;-6.2385114e-19;-0.00029317508;
-0.00019669399;-7.9927362e-05;-2.341987e-09;-1.6523281e-18;-3.0963447e-32;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;
-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;
-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;-4.2038954e-45;
-4.2038954e-45;-4.2038954e-45;      };
     };
     float_Data @["Identity_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Identity_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.0035834431;0.0013378272;0.0032145057;0.00023832335;0.0029791903;-0.00265921;-0.00047511901;-0.0044939164;-0.0017354143;-0.0029401481;
-0.0084739588;-0.0058717728;-0.0048688967;-0.0083721066;-0.0087071201;-0.0064644222;-0.007033261;-0.0068843723;-0.007164713;-0.007222285;
-0.0094485953;-0.0088885883;-0.008793111;-0.010534261;-0.007667013;-0.011523771;-0.0072908034;-0.0076641738;-0.0073521524;-0.012139554;
-0.0093586957;-0.011030384;-0.0094280364;-0.011424534;-0.011523809;-0.0095510771;-0.010816388;-0.011128198;-0.010918815;-0.011561225;
-0.0078042825;-0.010660785;-0.0092077395;-0.0099170292;-0.0099640461;-0.011513102;-0.0096888011;-0.01066725;-0.0092334794;-0.011214348;
-0.0091911033;-0.0083156172;-0.010142758;-0.010631694;-0.0088703502;-0.0024650444;-0.011066832;-0.011830465;-0.0078181727;-0.0055332445;
-0.0051241494;-0.0033565024;0.0015099663;0.0015095314;0.002277744;0.0028064363;0.0075292909;0.0076332786;0.0077657276;0.0074144327;
0.007528998;0.0076067518;0.0077653416;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;
0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;
0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;0.0077657276;
0.0077657276;0.0077657276;      };
     };
     float_Data @["Hidden_avg_net_sd"] {
      user_data_=NULL;
      name="Hidden_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.38289931;0.58495772;0.38391945;0.70218247;0.36290708;0.82328892;0.65412325;0.97248191;0.71229839;0.8995257;
1.0082096;0.97115898;0.96298891;1.0433258;1.0831082;1.0072297;1.0448308;0.99780321;0.9943924;1.0041894;
1.1215268;1.0844299;1.126439;1.3154055;1.10562;1.4164578;1.0660435;1.1219357;1.1053652;1.4741898;
1.2786204;1.4656807;1.3456494;1.4929751;1.5244441;1.3921534;1.4169315;1.505211;1.5876681;1.6779747;
1.2846032;1.5639099;1.4949983;1.6793002;1.5664767;1.9435183;1.6127414;1.6689352;1.6426061;1.8187441;
1.7595152;1.6240205;2.0029194;2.043153;1.8281484;1.0904727;1.9094319;2.3650651;1.4935166;1.6242007;
1.8133949;1.3314682;0.83645678;0.98217845;0.6360482;0.76102382;0.17167056;0.16906755;0.16784413;0.1780165;
0.18253736;0.18083851;0.17817919;0.17522795;0.17230926;0.16998518;0.16865472;0.16828994;0.1685694;0.1691054;
0.16883874;0.16716261;0.16508162;0.16262871;0.16061765;0.15963466;0.15950584;0.16013677;0.16118658;0.16233005;
0.16283433;0.16220227;0.17098789;0.17367645;0.17160766;0.17013459;0.1696319;0.16974981;0.17052607;0.17154367;
0.17217715;0.17197329;      };
     };
     float_Data @["Emotions_avg_net_sd"] {
      user_data_=NULL;
      name="Emotions_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.010273633;0.031555459;0.0070744888;0.021940261;0.01500303;0.048492495;0.046525728;0.056078881;0.064768821;0.042747945;
0.066703312;0.064113744;0.046867475;0.075492583;0.059583604;0.063147567;0.055397864;0.054661553;0.047986399;0.048495632;
0.047610987;0.052391395;0.052272648;0.044630568;0.035806995;0.0496829;0.038216706;0.039550599;0.041783735;0.054022241;
0.03844234;0.065968968;0.04485707;0.024118016;0.06967134;0.073481858;0.065224595;0.045189898;0.042838592;0.043961108;
0.041367162;0.028442184;0.045962512;0.051129919;0.039060183;0.055134207;0.038932472;0.052342791;0.050272282;0.044722471;
0.050980899;0.056073252;0.046110559;0.050837617;0.051363695;0.038862299;0.036757354;0.066063248;0.03216606;0.047847997;
0.021362647;0.038417865;0.027658565;0.037384782;0.017879127;0.023947241;0.0031475883;0.0026487049;0.0015584907;0.0027089056;
0.0022189652;0.0016583652;0.0014999917;0.0013420117;0.0012532589;0.00088449288;0.0009314802;0.00068790861;0.00076873926;0.0009685643;
0.00034679624;0.00034813155;0.00030077845;0.0003067409;0.00029968185;0.00029612667;0.00029468071;0.00015479761;0.00015017255;0.00014816357;
0.0001482323;0.00014390367;0.00042281323;0.00031282191;0.00015456967;0.00015274633;0.00015072375;0.00013936371;0.00013266779;0.00012692652;
0.00012522715;0.00011483704;      };
     };
     float_Data @["Gender_avg_net_sd"] {
      user_data_=NULL;
      name="Gender_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.010705765;0.012110166;0.0045653139;0.033120062;0.028761821;0.046490684;0.015665904;0.056104507;0.024216212;0.044772163;
0.081295013;0.024470419;0.057753097;0.044630691;0.063473664;0.040943582;0.04247516;0.059131917;0.017467143;0.043342233;
0.043658078;0.04854776;0.045457583;0.022372164;0.036659021;0.032294642;0.052866448;0.032558259;0.010723255;0.046653915;
0.032629538;0.043388981;0.049425568;0.045043141;0.021429354;0.066197209;0.053555846;0.067839421;0.030742517;0.044037342;
0.059397399;0.056470115;0.03415652;0.017670011;0.030437021;0.022283195;0.015074074;0.057279784;0.03447878;0.048472304;
0.020169079;0.031342685;0.030576976;0.056035232;0.066091426;0.0059603234;0.05479278;0.01925691;0.047595184;0.028678803;
0.010706375;0.041789215;0.021983048;0.0052568745;0.018476112;0.0066268663;0.0016619148;0.0014793915;0.0018520482;0.0012027165;
0.0014964534;0.001164219;0.0011567189;0.0010359733;0.0013917639;0.00062362925;0.00085531571;0.00088055135;0.0010350511;0.0010252469;
0.00030944138;0.00032616788;0.00032890588;0.0003403255;0.00033946606;0.00034384485;0.00034281763;0.00020449498;0.00020030684;0.00019295294;
0.00019712075;0.00026696405;0.00045738506;0.00046086908;0.0002047016;0.00020067778;0.00019470691;0.00025140317;0.00024158118;0.00022917603;
0.00022803032;0.00020893947;      };
     };
     float_Data @["Identity_avg_net_sd"] {
      user_data_=NULL;
      name="Identity_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.093576103;0.14830406;0.088682942;0.16493367;0.091862291;0.21892123;0.16749255;0.24971171;0.1889181;0.21220787;
0.2655147;0.26944277;0.25229934;0.31448781;0.33596191;0.28917986;0.28704008;0.29124257;0.3104158;0.29097891;
0.35489967;0.36753678;0.40342331;0.46772519;0.37090406;0.49729106;0.33322594;0.38727057;0.36452463;0.51762742;
0.44140163;0.51946324;0.45781565;0.56406695;0.55711466;0.50369668;0.49212345;0.57440877;0.57499242;0.59540886;
0.50163031;0.56708413;0.54895526;0.60176951;0.57995629;0.67391562;0.59908921;0.60930705;0.60743022;0.67125082;
0.61334378;0.5905171;0.69223499;0.71032113;0.65246862;0.39569226;0.68202811;0.7756359;0.57545537;0.52982348;
0.5708707;0.46955022;0.26630369;0.29775554;0.2145528;0.24570465;0.021663951;0.01780319;0.015873583;0.018921526;
0.020895869;0.020529358;0.018338742;0.016731003;0.01498684;0.011127281;0.010048431;0.0081220409;0.0083241742;0.0068899617;
0.0035665703;0.0034552338;0.0023487967;0.0023269884;0.0022575904;0.0022310668;0.0021609787;0.001631023;0.0015422697;0.0014941065;
0.001447671;0.00092217163;0.0020829705;0.002430018;0.0014878563;0.0014285363;0.0014389897;0.00087235327;0.00083906058;0.00079624978;
0.00079281908;0.00072685425;      };
     };
     float_Data @["Hidden_hog_pct"] {
      user_data_=NULL;
      name="Hidden_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.0044444446;0;0;0;0;
0;0;0;0;0;0.0044444446;0.0044444446;0.0044444446;0.022222223;0.035555556;
0.057777777;0.06666667;0.079999998;0.084444441;0.084444441;0.079999998;0.079999998;0.079999998;0.079999998;0.093333334;
0.097777776;0.10222222;0.12;0.13333334;0.14222223;0.12888889;0.12888889;0.13333334;0.13777778;0.13333334;
0.13333334;0.12888889;0.15111111;0.15111111;0.17333333;0.16888888;0.17777778;0.19555555;0.20444444;0.20888889;
0.20888889;0.20888889;0.21777777;0.22222222;0.23555556;0.24444444;0.23999999;0.23999999;0.24444444;0.24444444;
0.23555556;0.22666667;0.24444444;0.24888889;0.23999999;0.23999999;0.23111111;0.22222222;0.22222222;0.21777777;
0.21777777;0.21777777;0.22222222;0.23111111;0.22666667;0.24444444;0.24444444;0.24444444;0.24444444;0.24444444;
0.24444444;0.24444444;      };
     };
     float_Data @["Emotions_hog_pct"] {
      user_data_=NULL;
      name="Emotions_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Gender_hog_pct"] {
      user_data_=NULL;
      name="Gender_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identity_hog_pct"] {
      user_data_=NULL;
      name="Identity_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;      };
     };
     float_Data @["Hidden_dead_pct"] {
      user_data_=NULL;
      name="Hidden_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Emotions_dead_pct"] {
      user_data_=NULL;
      name="Emotions_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Gender_dead_pct"] {
      user_data_=NULL;
      name="Gender_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identity_dead_pct"] {
      user_data_=NULL;
      name="Identity_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Hidden_netmax"] {
      user_data_=NULL;
      name="Hidden_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.40726161;0.42305776;0.43388209;0.4337934;0.42627683;0.41129485;0.38881454;0.38849816;0.39671531;0.39552751;
0.39603344;0.39416432;0.3896226;0.38815901;0.38834396;0.384222;0.37200686;0.37720969;0.37978005;0.37991849;
0.38266161;0.38360763;0.37992248;0.37862429;0.3717452;0.36987197;0.37348703;0.37057397;0.37606409;0.37349749;
0.36680612;0.3628507;0.36221567;0.35623002;0.34426451;0.35154307;0.35467398;0.35349002;0.35869431;0.36293909;
0.36000776;0.34802541;0.33697948;0.33175072;0.34364942;0.34918079;0.35000157;0.34994045;0.34317422;0.33905172;
0.33261305;0.32644892;0.33453253;0.32977894;0.32419327;0.32991844;0.33179155;0.33413294;0.3325198;0.3217437;
0.30971786;0.28930745;0.30082163;0.31537625;0.3161597;0.30906451;0.30563846;0.29949427;0.29944655;0.30192924;
0.29357478;0.27434424;0.27650803;0.29436794;0.30312833;0.30448225;0.29666558;0.29167342;0.27940705;0.28372404;
0.29137203;0.28827217;0.28669265;0.28044465;0.28305599;0.28385767;0.27746508;0.27943292;0.27665034;0.27854624;
0.27453533;0.26816955;0.26382145;0.27751777;0.28725609;0.28834602;0.28265524;0.2741192;0.26470521;0.26731384;
0.26502001;0.27384654;      };
     };
     float_Data @["Emotio_netmax"] {
      user_data_=NULL;
      name="Emotio_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.30992228;0.52873051;0.30284137;0.54802465;0.29235956;0.74863148;0.53497475;0.7764768;0.55899328;0.7311607;
0.82137471;0.78484625;0.73319054;0.82859731;0.79383016;0.74354118;0.74662018;0.713754;0.69655496;0.72177291;
0.73071355;0.7183587;0.7395587;0.76679069;0.69510478;0.77697963;0.68946153;0.65148658;0.65045744;0.75381655;
0.6787045;0.72103769;0.69011021;0.70061225;0.71620649;0.69287992;0.71745467;0.67917901;0.68134546;0.67644948;
0.5872485;0.64306444;0.62015074;0.63190585;0.61424345;0.65399539;0.61024725;0.63709301;0.59080726;0.60857755;
0.58936578;0.563739;0.62397861;0.61505741;0.60052377;0.35551751;0.59951824;0.63309699;0.50241452;0.43239021;
0.41839576;0.39075541;0.22385789;0.23588695;0.19524276;0.2002337;0.024249479;0.020472027;0.021012057;0.021324441;
0.020753043;0.019597318;0.021421269;0.019037608;0.024242923;0.018665945;0.017607801;0.015963612;0.016252017;0.01291605;
0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;
0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;0.01291605;
0.01291605;0.01291605;      };
     };
     float_Data @["Gender_netmax"] {
      user_data_=NULL;
      name="Gender_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.3270987;0.51829278;0.29246309;0.57429129;0.32482901;0.7872569;0.54210788;0.80322045;0.56297535;0.77415603;
0.88557434;0.81421906;0.79807788;0.87826061;0.87798381;0.78702098;0.79480046;0.8042534;0.76397687;0.77850527;
0.81281424;0.82437354;0.86040717;0.90976793;0.80994195;0.93343717;0.80583233;0.77395278;0.74312204;0.9357267;
0.83695966;0.88928413;0.86016017;0.9284206;0.89230871;0.86482;0.88227224;0.91768616;0.8899281;0.91151142;
0.78788;0.89174968;0.83625984;0.86720198;0.84619832;0.9385497;0.85617685;0.90052766;0.85517508;0.91304541;
0.839284;0.83496809;0.93409282;0.96216351;0.91282934;0.53800529;0.92350191;0.98518592;0.77657127;0.68327695;
0.71137476;0.62197399;0.34805906;0.37117514;0.29200613;0.31210032;0.031827237;0.02752276;0.029806387;0.028586576;
0.029471314;0.028021643;0.024862861;0.021926068;0.019655621;0.025897874;0.02442579;0.021048447;0.022611182;0.018733282;
0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;
0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;0.018733282;
0.018733282;0.018733282;      };
     };
     float_Data @["Identi_netmax"] {
      user_data_=NULL;
      name="Identi_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.36749652;0.61286217;0.35866055;0.65506119;0.35465515;0.87043291;0.63607711;0.9251039;0.66256428;0.87209004;
0.98915106;0.94718695;0.90250903;1.0066456;0.98018837;0.91701335;0.92542863;0.91735625;0.90262961;0.89449638;
0.94352436;0.94772547;0.97958142;1.0375451;0.94003421;1.0647196;0.90754622;0.8861928;0.88702774;1.0633565;
0.95547944;1.0187023;0.9698391;1.0378749;1.0165626;0.99095321;1.002615;1.0277706;1.0265565;1.053288;
0.90275288;1.0133402;0.97572041;1.0142797;0.98831266;1.0689162;1.0137831;1.0330352;0.99551678;1.0165931;
0.98342198;0.96953893;1.0630821;1.0732259;1.0258479;0.63840836;1.0483133;1.0977244;0.86973763;0.76757169;
0.80233669;0.68708628;0.389079;0.41644025;0.3137382;0.36094093;0.033484247;0.028228486;0.030263513;0.03003262;
0.030353615;0.029436851;0.026203932;0.023864234;0.021388836;0.028011627;0.026470223;0.023340764;0.024844496;0.020405466;
0.011652659;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;
0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;0.011298151;
0.011298151;0.011298151;      };
     };
     float_Data @["Hidden_avg_act"] {
      user_data_=NULL;
      name="Hidden_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.1009251;0.10193828;0.10299507;0.10405527;0.10509509;0.10601056;0.10662916;0.1069801;0.10719365;0.10744091;
0.10777972;0.10813955;0.1085311;0.10886179;0.10916834;0.10945629;0.10971678;0.11005627;0.11044977;0.11080766;
0.11124167;0.11169413;0.11207124;0.11243645;0.11281253;0.11311918;0.11340509;0.11373023;0.11414047;0.11456449;
0.11497162;0.11532998;0.1157055;0.11610235;0.11653732;0.11697028;0.11733757;0.11771566;0.11818387;0.11864505;
0.1190539;0.1194679;0.11992085;0.12030548;0.12066752;0.12101884;0.12133322;0.12168042;0.12202283;0.1223542;
0.12267809;0.12299383;0.12329426;0.12358195;0.12385571;0.12418137;0.12451196;0.12475352;0.12495201;0.12517621;
0.12538786;0.12556398;0.12574503;0.12585677;0.12589951;0.12603137;0.1262112;0.12638439;0.1264839;0.12642635;
0.12636222;0.12623999;0.12611331;0.12597094;0.12580076;0.12566811;0.12555799;0.12547527;0.12535249;0.12516811;
0.12495857;0.12477294;0.12456609;0.12446258;0.12442932;0.12440629;0.12435152;0.12417655;0.12393651;0.12369879;
0.12344565;0.12316557;0.12289209;0.12262433;0.12234242;0.12209284;0.12187193;0.12169364;0.12152346;0.12125882;
0.12093703;0.12060528;      };
     };
     float_Data @["Emotio_avg_act"] {
      user_data_=NULL;
      name="Emotio_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.10643522;0.1126793;0.11873793;0.12461661;0.1303207;0.13585536;0.14122564;0.14643641;0.15149242;0.15639827;
0.1611584;0.16577715;0.17025872;0.17460717;0.17882648;0.18292047;0.18689287;0.19074729;0.19448721;0.19811606;
0.20163713;0.20505363;0.20836864;0.21158521;0.21470624;0.21773456;0.22067294;0.22352403;0.22629046;0.22897473;
0.23157927;0.23410645;0.23655857;0.23893787;0.24124649;0.24348654;0.24566005;0.24776901;0.24981533;0.25180086;
0.25372744;0.25559682;0.25741068;0.25917062;0.26087832;0.26253527;0.26414302;0.26570302;0.26721671;0.26868543;
0.27011052;0.27149329;0.27283499;0.27413681;0.27540001;0.27662566;0.27781492;0.27896884;0.28008851;0.28117493;
0.28222907;0.28325188;0.28424433;0.2852073;0.28614166;0.28704828;0.28792799;0.28878155;0.28960976;0.29041338;
0.29119313;0.29194972;0.29268387;0.29339617;0.29408732;0.29475796;0.29540867;0.29604006;0.29665267;0.29724711;
0.29782388;0.29838353;0.29892656;0.29945347;0.29996473;0.30046079;0.30094212;0.30140916;0.30186233;0.30230206;
0.30272871;0.3031427;0.3035444;0.30393413;0.30431229;0.30467921;0.30503523;0.3053807;0.30571592;0.30604115;
0.30635673;0.30666295;      };
     };
     float_Data @["Gender_avg_act"] {
      user_data_=NULL;
      name="Gender_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.097029895;0.09414801;0.091351718;0.088638484;0.086005829;0.083451368;0.080972776;0.078567803;0.076234266;0.073970027;
0.071773045;0.069641314;0.067572899;0.065565914;0.063618541;0.06172901;0.059895594;0.058116637;0.056390513;0.054715659;
0.053090554;0.051513709;0.049983703;0.048499137;0.047058664;0.045660976;0.044304799;0.042988904;0.041712094;0.040473204;
0.039271113;0.03810472;0.03697297;0.035874832;0.034809314;0.033775441;0.032772277;0.031798907;0.030854445;0.029938037;
0.029048847;0.028186068;0.027348913;0.026536625;0.025748461;0.024983706;0.024241665;0.023521664;0.022823047;0.02214518;
0.021487447;0.020849248;0.020230005;0.019629152;0.019046148;0.018480459;0.017931571;0.017398985;0.016882218;0.0163808;
0.015894273;0.015422197;0.014964142;0.014519692;0.014088443;0.013670001;0.013263987;0.012870033;0.01248778;0.01211688;
0.011756997;0.011407802;0.011068979;0.01074022;0.010421225;0.010111704;0.0098113762;0.0095199691;0.0092372159;0.0089628613;
0.0086966548;0.0084383553;0.008187728;0.0079445438;0.0077085826;0.0074796299;0.0072574774;0.0070419228;0.0068327705;0.0066298302;
0.0064329174;0.0062418533;0.0060564643;0.0058765812;0.0057020406;0.0055326843;0.0053683585;0.0052089128;0.0050542024;0.0049040876;
0.0047584316;0.004617101;      };
     };
     float_Data @["Identi_avg_act"] {
      user_data_=NULL;
      name="Identi_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [102] 0.099851497;0.099707402;0.099567592;0.099431925;0.099300295;0.09917257;0.099048644;0.098928392;0.098811708;0.098698497;
0.098588653;0.098482065;0.098378636;0.098278292;0.098180927;0.098086454;0.097994782;0.09790583;0.097819522;0.097735785;
0.097654529;0.097575687;0.097499192;0.097424962;0.097352937;0.097283058;0.09721525;0.097149454;0.09708561;0.097023666;
0.096963562;0.096905246;0.096848659;0.096793756;0.096740477;0.096688777;0.096638612;0.096589945;0.096542716;0.096496895;
0.096452437;0.096409298;0.096367434;0.096326821;0.096287414;0.096249171;0.096212067;0.096176066;0.096141137;0.096107244;
0.096074358;0.096042447;0.09601149;0.095981441;0.095952295;0.095924012;0.095896564;0.095869943;0.095844105;0.095819034;
0.095794715;0.095771112;0.095748208;0.095725991;0.095704429;0.095683508;0.095663212;0.09564352;0.095624402;0.095605858;
0.095587865;0.095570408;0.095553465;0.095537029;0.095521078;0.09550561;0.09549059;0.095476024;0.095461883;0.095448159;
0.095434844;0.095421925;0.095409393;0.095397234;0.095385432;0.095373988;0.095362879;0.095352106;0.095341645;0.095331497;
0.095321655;0.095312104;0.095302828;0.095293842;0.095285118;0.095276646;0.095268428;0.095260456;0.095252715;0.095245212;
0.095237926;0.095230862;      };
     };
     float_Data @["Hidden_netrel"] {
      user_data_=NULL;
      name="Hidden_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 15;15;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [15 15 102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @["Emotio_netrel"] {
      user_data_=NULL;
      name="Emotio_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
     float_Data @["Gender_netrel"] {
      user_data_=NULL;
      name="Gender_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;      };
     };
     float_Data @["Identi_netrel"] {
      user_data_=NULL;
      name="Identi_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 102] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [102] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestTrialOutputData"] {
    user_data_=NULL;
    name="TestTrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["group"] {
      user_data_=NULL;
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      user_data_=NULL;
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["tick"] {
      user_data_=NULL;
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["time"] {
      user_data_=NULL;
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      user_data_=NULL;
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      user_data_=NULL;
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["output_name"] {
      user_data_=NULL;
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["rt_cycles"] {
      user_data_=NULL;
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["sse"] {
      user_data_=NULL;
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["norm_err"] {
      user_data_=NULL;
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cos_err"] {
      user_data_=NULL;
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      user_data_=NULL;
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_sse"] {
      user_data_=NULL;
      name="Emotio_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_sse"] {
      user_data_=NULL;
      name="Gender_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_sse"] {
      user_data_=NULL;
      name="Identi_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_bin_err"] {
      user_data_=NULL;
      name="Emotio_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_bin_err"] {
      user_data_=NULL;
      name="Gender_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_bin_err"] {
      user_data_=NULL;
      name="Identi_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Hidden_lay_net_sd"] {
      user_data_=NULL;
      name="Hidden_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_net_sd"] {
      user_data_=NULL;
      name="Emotio_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_net_sd"] {
      user_data_=NULL;
      name="Gender_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_net_sd"] {
      user_data_=NULL;
      name="Identi_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestEpochOutputData"] {
    user_data_=NULL;
    name="TestEpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_sse"] {
      user_data_=NULL;
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cnt_err"] {
      user_data_=NULL;
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_cor"] {
      user_data_=NULL;
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_err"] {
      user_data_=NULL;
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_norm_err"] {
      user_data_=NULL;
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cos_err"] {
      user_data_=NULL;
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_ext_rew"] {
      user_data_=NULL;
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cycles"] {
      user_data_=NULL;
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_tot"] {
      user_data_=NULL;
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_usr"] {
      user_data_=NULL;
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_avg_sse"] {
      user_data_=NULL;
      name="Emotio_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_avg_sse"] {
      user_data_=NULL;
      name="Gender_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_avg_sse"] {
      user_data_=NULL;
      name="Identi_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_cnt_err"] {
      user_data_=NULL;
      name="Emotio_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_cnt_err"] {
      user_data_=NULL;
      name="Gender_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_cnt_err"] {
      user_data_=NULL;
      name="Identi_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_pct_cor"] {
      user_data_=NULL;
      name="Emotio_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_pct_cor"] {
      user_data_=NULL;
      name="Gender_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_pct_cor"] {
      user_data_=NULL;
      name="Identi_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_pct_err"] {
      user_data_=NULL;
      name="Emotio_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_pct_err"] {
      user_data_=NULL;
      name="Gender_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_pct_err"] {
      user_data_=NULL;
      name="Identi_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Hidden_avg_net_sd"] {
      user_data_=NULL;
      name="Hidden_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotions_avg_net_sd"] {
      user_data_=NULL;
      name="Emotions_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_avg_net_sd"] {
      user_data_=NULL;
      name="Gender_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identity_avg_net_sd"] {
      user_data_=NULL;
      name="Identity_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   user_data_=NULL;
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  user_data_=NULL;
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["LeabraStartup"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @["DocLink"] {
     user_data_=NULL;
     name="DocLink";
     doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].doc$$;
    };
   };
   name="LeabraStartup";
   short_nm="Startup";
   tags="Leabra, Startup";
   desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batch_start=xxx] [n_batches=xx} [tag=xxx] and other opts -- see code";
   version {
    user_data_=NULL;
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=STARTUP_RUN;
   stop_step_cond {
    user_data_=NULL;
    expr=;
   };
   objs {
    user_data_=NULL;
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    user_data_=NULL;
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    user_data_=NULL;
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["network"] {
     user_data_=NULL;
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @["input_data"] {
     user_data_=NULL;
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    user_data_=NULL;
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["train_prog"] {
     user_data_=NULL;
     name="train_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="set this to point to your train process";
     init_from=NULL;
    };
    ProgVar @["batch_prog"] {
     user_data_=NULL;
     name="batch_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @["param_set"] {
     user_data_=NULL;
     name="param_set";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of saved parameter set to apply at startup";
     init_from=NULL;
    };
    ProgVar @["tag"] {
     user_data_=NULL;
     name="tag";
     var_type=T_String;
     string_val="_gui";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["batch_str"] {
     user_data_=NULL;
     name="batch_str";
     var_type=T_String;
     string_val="00";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @["log_dir"] {
     user_data_=NULL;
     name="log_dir";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @["log_file_nm"] {
     user_data_=NULL;
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @["batch_start"] {
     user_data_=NULL;
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @["EpochOutputData"] {
     user_data_=NULL;
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["TrialOutputData"] {
     user_data_=NULL;
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["MyClusterRun"] {
     user_data_=NULL;
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].ctrl_panels["ClusterRun"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["param_sets"] {
     user_data_=NULL;
     name="param_sets";
     var_type=T_Object;
     object_type=ParamSet_Group;
     object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].param_sets$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    user_data_=NULL;
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    user_data_=NULL;
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    user_data_=NULL;
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    RegisterArgs @[0] {
     user_data_=NULL;
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    PrintExpr @[1] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      user_data_=NULL;
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[2] {
     user_data_=NULL;
     desc="= Std variables in startup program itself =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Std variables in startup program itself =";
    };
    ProgVarFmArg @[3] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:tag in Program:LeabraStartup from Arg:tag";
     prog=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[4] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_dir in Program:LeabraStartup from Arg:log_dir";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    ProgVarFmArg @[5] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:param_set in Program:LeabraStartup from Arg:param_set";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$;
     var_name="param_set";
     arg_name="param_set";
    };
    ProgVarFmArg @[6] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[7] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:rnd_init in Program:LeabraTrain from Arg:rnd_init";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="rnd_init";
     arg_name="rnd_init";
    };
    ProgVarFmArg @[8] {
     user_data_=NULL;
     desc="starting batch -- replaces b_start";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:batch_start in Program:LeabraBatch from Arg:batch_start";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="batch_start";
     arg_name="batch_start";
    };
    ProgVarFmArg @[9] {
     user_data_=NULL;
     desc="number of batches to run";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:n_batches in Program:LeabraBatch from Arg:n_batches";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="n_batches";
     arg_name="n_batches";
    };
    ProgVarFmArg @[10] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_wts_interval in Program:LeabraTrain from Arg:save_wts_interval";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_wts_interval";
     arg_name="save_wts_interval";
    };
    ProgVarFmArg @[11] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_final_wts in Program:LeabraTrain from Arg:save_final_wts";
     prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_final_wts";
     arg_name="save_final_wts";
    };
    ControlPanelsFmArgs @[12] {
     user_data_=NULL;
     desc="sets any arg listed in the control panel";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["MyClusterRun"]$$;
    };
    If @[13] {
     user_data_=NULL;
     desc="set variables to values stored in a param set";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (param_set.nonempty())";
     cond {
      user_data_=NULL;
      expr="param_set.nonempty()";
     };
     true_code {
      user_data_=NULL;
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="param_sets->LoadParamSet(param_set)";
       result_var=NULL;
       obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["param_sets"]$$;
       method=ParamSet_Group::LoadParamSet;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="set_name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="param_set";
	 };
	};
       };
       meth_sig="bool LoadParamSet(taString& set_name)";
       meth_desc=;
      };
     };
    };
    Comment @[14] {
     user_data_=NULL;
     desc="= Add your own variables here =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Add your own variables here =";
    };
    Comment @[15] {
     user_data_=NULL;
     desc="= Below saves log files of standard data tables =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Below saves log files of standard data tables =";
    };
    If @[16] {
     user_data_=NULL;
     desc="set tag for starting batch (new code in v 8.0)";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="if (taMisc::CheckArgByName(\"batch_start\"))";
     cond {
      user_data_=NULL;
      expr="taMisc::CheckArgByName(\"batch_start\")";
     };
     true_code {
      user_data_=NULL;
      name=;
      el_typ=ProgCode;
      el_def=0;
      ProgVarFmArg @[0] {
       user_data_=NULL;
       desc="read in the arg to us too, so we can set file names based on it";
       flags=CAN_REVERT_TO_CODE;
       code_string="Set Var:batch_start in Program:LeabraStartup from Arg:batch_start";
       prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$;
       var_name="batch_start";
       arg_name="batch_start";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc="string version with leading zeros";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch_str = taMisc::LeadingZeros(batch_start, 2)";
       result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["batch_str"]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[2] {
       user_data_=NULL;
       desc="add to tag for setting log file names";
       flags=CAN_REVERT_TO_CODE;
       code_string="tag += \".\" + batch_str";
       var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["tag"]$$;
       expr {
	user_data_=NULL;
	expr="\".\" + batch_str";
       };
      };
      If @[3] {
       user_data_=NULL;
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=CAN_REVERT_TO_CODE;
       code_string="if (batch_start == 0)";
       cond {
	user_data_=NULL;
	expr="batch_start == 0";
       };
       true_code {
	user_data_=NULL;
	name=;
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag.before(\".00\",-1), log_dir, false)";
	 result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$$;
	 obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taMisc::FullArgStringToFile(log_file_nm)";
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[17] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      user_data_=NULL;
      expr=;
     };
     true_code {
      user_data_=NULL;
      name=;
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc="save args to file: last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
       result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
       obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::FullArgStringToFile(log_file_nm)";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    MiscCall @[18] {
     user_data_=NULL;
     desc="report any args that didn't get used!";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="taMisc::ReportUnusedArgs(true)";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::ReportUnusedArgs;
     meth_args {
      user_data_=NULL;
      name="ProgArg_List_0";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="err";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
    };
    Comment @[19] {
     user_data_=NULL;
     desc="== Save epoch log -- on by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save epoch log -- on by default ==";
    };
    MethodCall @[20] {
     user_data_=NULL;
     desc="last arg is to include dmem proc number";
     flags=CAN_REVERT_TO_CODE;
     code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
     result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="tag";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[21] {
     user_data_=NULL;
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=CAN_REVERT_TO_CODE;
     code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
     result_var=NULL;
     obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[22] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving epoch log data to:\" log_file_nm";
     message="Saving epoch log data to:";
     print_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    Comment @[23] {
     user_data_=NULL;
     desc="== Save trial log -- OFF by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save trial log -- OFF by default ==";
    };
    MethodCall @[24] {
     user_data_=NULL;
     desc="last arg is to include dmem proc number";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["TrialOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="tag";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[25] {
     user_data_=NULL;
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
     result_var=NULL;
     obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["TrialOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[26] {
     user_data_=NULL;
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving trial log data to:\" log_file_nm";
     message="Saving trial log data to:";
     print_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    OtherProgramVar @[27] {
     user_data_=NULL;
     desc="propagate the tag";
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$$;
     set_other=1;
     var_1=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["tag"]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch_prog.name";
     expr {
      user_data_=NULL;
      expr="\"Running: \" << batch_prog.name";
     };
     debug=0;
    };
    ProgramCall @[29] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraBatch(network, input_data)";
     prog_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="network";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="input_data";
       };
      };
     };
     target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    user_data_=NULL;
    name="doc";
    desc=;
    web_doc=1;
    wiki="emergent";
    url="Startup_program";
    full_url="https://grey.colorado.edu/emergent/index.php/Startup_program";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp["LeabraAll_Std"] {
   user_data_=NULL;
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @["LeabraBatch"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].doc$$;
     };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      user_data_=NULL;
      name="batch";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["batch_start"] {
      user_data_=NULL;
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @["n_batches"] {
      user_data_=NULL;
      name="n_batches";
      var_type=T_Int;
      int_val=10;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
      local_ctr_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["i"] {
	user_data_=NULL;
	name="i";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
      expr {
       user_data_=NULL;
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      user_data_=NULL;
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
      path="batch";
      expr {
       user_data_=NULL;
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      user_data_=NULL;
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  user_data_=NULL;
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="true";
	  };
	 };
	};
	target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       user_data_=NULL;
       expr="i=0";
      };
      test {
       user_data_=NULL;
       expr="i<n_batches";
      };
      iter {
       user_data_=NULL;
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrain"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].doc$$;
     };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      seeds {
       user_data_=NULL;
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @["RndSeed_1"] {
	user_data_=NULL;
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @["RndSeed_2"] {
	user_data_=NULL;
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @["RndSeed_3"] {
	user_data_=NULL;
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @["RndSeed_4"] {
	user_data_=NULL;
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @["RndSeed_5"] {
	user_data_=NULL;
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @["RndSeed_6"] {
	user_data_=NULL;
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @["RndSeed_7"] {
	user_data_=NULL;
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @["RndSeed_8"] {
	user_data_=NULL;
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @["RndSeed_9"] {
	user_data_=NULL;
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @["RndSeed_10"] {
	user_data_=NULL;
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @["RndSeed_11"] {
	user_data_=NULL;
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @["RndSeed_12"] {
	user_data_=NULL;
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @["RndSeed_13"] {
	user_data_=NULL;
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @["RndSeed_14"] {
	user_data_=NULL;
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @["RndSeed_15"] {
	user_data_=NULL;
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @["RndSeed_16"] {
	user_data_=NULL;
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @["RndSeed_17"] {
	user_data_=NULL;
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @["RndSeed_18"] {
	user_data_=NULL;
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @["RndSeed_19"] {
	user_data_=NULL;
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @["RndSeed_20"] {
	user_data_=NULL;
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @["RndSeed_21"] {
	user_data_=NULL;
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @["RndSeed_22"] {
	user_data_=NULL;
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @["RndSeed_23"] {
	user_data_=NULL;
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @["RndSeed_24"] {
	user_data_=NULL;
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @["RndSeed_25"] {
	user_data_=NULL;
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      user_data_=NULL;
      name="RndInitType";
      desc=;
      enums {
       user_data_=NULL;
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	user_data_=NULL;
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	user_data_=NULL;
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @["BATCH_SEEDS"] {
	user_data_=NULL;
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      user_data_=NULL;
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      user_data_=NULL;
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      user_data_=NULL;
      name="epoch";
      var_type=T_Int;
      int_val=102;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      user_data_=NULL;
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit"] {
      user_data_=NULL;
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @["n_under_thr"] {
      user_data_=NULL;
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @["save_final_wts"] {
      user_data_=NULL;
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @["save_wts_interval"] {
      user_data_=NULL;
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @["n_under_cnt"] {
      user_data_=NULL;
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seeds"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      user_data_=NULL;
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["GetRandomSeed"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      name="GetRandomSeed";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_init"]$$;
	cases {
	 user_data_=NULL;
	 name=;
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seeds"]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
      expr {
       user_data_=NULL;
       expr="false";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      user_data_=NULL;
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Build;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     MemberAssign @[3] {
      user_data_=NULL;
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       user_data_=NULL;
       expr="no_prompts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	local_ctr_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 user_data_=NULL;
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  user_data_=NULL;
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   user_data_=NULL;
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 user_data_=NULL;
	 expr=;
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 user_data_=NULL;
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   user_data_=NULL;
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network";
	      };
	     };
	    };
	    target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       user_data_=NULL;
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       user_data_=NULL;
       expr="save_final_wts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @["LeabraTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].doc$;
     };
    };
    name="LeabraTest";
    short_nm="Test";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      seeds {
       user_data_=NULL;
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @["RndSeed_1"] {
	user_data_=NULL;
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @["RndSeed_2"] {
	user_data_=NULL;
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @["RndSeed_3"] {
	user_data_=NULL;
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @["RndSeed_4"] {
	user_data_=NULL;
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @["RndSeed_5"] {
	user_data_=NULL;
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @["RndSeed_6"] {
	user_data_=NULL;
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @["RndSeed_7"] {
	user_data_=NULL;
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @["RndSeed_8"] {
	user_data_=NULL;
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @["RndSeed_9"] {
	user_data_=NULL;
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @["RndSeed_10"] {
	user_data_=NULL;
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @["RndSeed_11"] {
	user_data_=NULL;
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @["RndSeed_12"] {
	user_data_=NULL;
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @["RndSeed_13"] {
	user_data_=NULL;
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @["RndSeed_14"] {
	user_data_=NULL;
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @["RndSeed_15"] {
	user_data_=NULL;
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @["RndSeed_16"] {
	user_data_=NULL;
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @["RndSeed_17"] {
	user_data_=NULL;
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @["RndSeed_18"] {
	user_data_=NULL;
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @["RndSeed_19"] {
	user_data_=NULL;
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @["RndSeed_20"] {
	user_data_=NULL;
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @["RndSeed_21"] {
	user_data_=NULL;
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @["RndSeed_22"] {
	user_data_=NULL;
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @["RndSeed_23"] {
	user_data_=NULL;
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @["RndSeed_24"] {
	user_data_=NULL;
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @["RndSeed_25"] {
	user_data_=NULL;
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      user_data_=NULL;
      name="RndInitType";
      desc=;
      enums {
       user_data_=NULL;
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	user_data_=NULL;
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	user_data_=NULL;
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @["BATCH_SEEDS"] {
	user_data_=NULL;
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      user_data_=NULL;
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      user_data_=NULL;
      name="max_epoch";
      var_type=T_Int;
      int_val=1000;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      user_data_=NULL;
      name="epoch";
      var_type=T_Int;
      int_val=344;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      user_data_=NULL;
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].types["RndInitType"]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit"] {
      user_data_=NULL;
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @["n_under_thr"] {
      user_data_=NULL;
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @["save_final_wts"] {
      user_data_=NULL;
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @["save_wts_interval"] {
      user_data_=NULL;
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @["n_under_cnt"] {
      user_data_=NULL;
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].objs["rnd_seeds"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      user_data_=NULL;
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].train_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["GetRandomSeed"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      name="GetRandomSeed";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["rnd_init"]$$;
	cases {
	 user_data_=NULL;
	 name=;
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["rnd_seed"]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["rnd_seed"]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["rnd_seeds"]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].args["no_prompts"]$$;
      expr {
       user_data_=NULL;
       expr="false";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].args["network"]$$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["train_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["n_under_cnt"]$$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].functions["GetRandomSeed"]$$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      user_data_=NULL;
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].args["network"]$;
	method=Network::Build;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["epoch"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["train_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["n_under_cnt"]$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     MemberAssign @[3] {
      user_data_=NULL;
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].functions["GetRandomSeed"]$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       user_data_=NULL;
       expr="no_prompts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["epoch"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].args["network"]$;
	local_ctr_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 user_data_=NULL;
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  user_data_=NULL;
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   user_data_=NULL;
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 user_data_=NULL;
	 expr=;
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 user_data_=NULL;
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   user_data_=NULL;
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network";
	      };
	     };
	    };
	    target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       user_data_=NULL;
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       user_data_=NULL;
       expr="save_final_wts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTest"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @["LeabraEpoch"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].doc$$;
     };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      user_data_=NULL;
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      user_data_=NULL;
      name="trial";
      var_type=T_Int;
      int_val=1;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["step_on_err"] {
      user_data_=NULL;
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      user_data_=NULL;
      name="data_loop_index";
      var_type=T_Int;
      int_val=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
      local_ctr_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      local_ctr_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=Network::Init_Epoch;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      user_data_=NULL;
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 user_data_=NULL;
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 user_data_=NULL;
	 name="ProgEl_List_100";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   user_data_=NULL;
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
      index_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
      order_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      user_data_=NULL;
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       user_data_=NULL;
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      user_data_=NULL;
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrial"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].doc$$;
     };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 4";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      user_data_=NULL;
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      update_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarter"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].doc$$;
     };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      user_data_=NULL;
      name="cycle";
      var_type=T_Int;
      int_val=25;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$$;
      local_ctr_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	user_data_=NULL;
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	user_data_=NULL;
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$;
	expr {
	 user_data_=NULL;
	 expr="network.cycle";
	};
       };
      };
      init {
       user_data_=NULL;
       expr="cyc=0";
      };
      test {
       user_data_=NULL;
       expr="cyc<cycle_max";
      };
      iter {
       user_data_=NULL;
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      update_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycle"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].doc$$;
     };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
      update_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputs"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].doc$$;
     };
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      layer_data {
       user_data_=NULL;
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	user_data_=NULL;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	user_data_=NULL;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {user_data_=NULL: name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	user_data_=NULL;
	col_name="Gender";
	net_target=LAYER;
	layer_name="Gender";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	user_data_=NULL;
	col_name="Identity";
	net_target=LAYER;
	layer_name="Identity";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	user_data_=NULL;
	col_name="Emotions";
	net_target=LAYER;
	layer_name="Emotions";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["layer_writer_0"] {
      user_data_=NULL;
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitor"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].doc$$;
     };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	user_data_=NULL;
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	user_data_=NULL;
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	user_data_=NULL;
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	user_data_=NULL;
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	user_data_=NULL;
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	user_data_=NULL;
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	user_data_=NULL;
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	user_data_=NULL;
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	user_data_=NULL;
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	user_data_=NULL;
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	user_data_=NULL;
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	user_data_=NULL;
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	user_data_=NULL;
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	user_data_=NULL;
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_bin_err"] {
	user_data_=NULL;
	name="lay_bin_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.bin_err";
	var_label="lay_bin_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	user_data_=NULL;
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	user_data_=NULL;
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	user_data_=NULL;
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_cos_diff"] {
	user_data_=NULL;
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_trial_cos_diff"] {
	user_data_=NULL;
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_act_diff"] {
	user_data_=NULL;
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_diff"] {
	user_data_=NULL;
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_cos_diff"] {
	user_data_=NULL;
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act_diff"] {
	user_data_=NULL;
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitor"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].doc$$;
     };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	user_data_=NULL;
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	user_data_=NULL;
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	user_data_=NULL;
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	user_data_=NULL;
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	user_data_=NULL;
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	user_data_=NULL;
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	user_data_=NULL;
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	user_data_=NULL;
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	user_data_=NULL;
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	user_data_=NULL;
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	user_data_=NULL;
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	user_data_=NULL;
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	user_data_=NULL;
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	user_data_=NULL;
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	user_data_=NULL;
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	user_data_=NULL;
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_cos_diff"] {
	user_data_=NULL;
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_trial_cos_diff"] {
	user_data_=NULL;
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_avg_act_diff"] {
	user_data_=NULL;
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_diff"] {
	user_data_=NULL;
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_trial_cos_diff"] {
	user_data_=NULL;
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_avg_act_diff"] {
	user_data_=NULL;
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	user_data_=NULL;
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["hog_pct"] {
	user_data_=NULL;
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["dead_pct"] {
	user_data_=NULL;
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netmax"] {
	user_data_=NULL;
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act"] {
	user_data_=NULL;
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netrel"] {
	user_data_=NULL;
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      user_data_=NULL;
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      user_data_=NULL;
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SaveWeights"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].doc$$;
     };
    };
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      user_data_=NULL;
      name="tag";
      var_type=T_String;
      string_val="_gui";
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      user_data_=NULL;
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      user_data_=NULL;
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      user_data_=NULL;
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      user_data_=NULL;
      name="batch_str";
      var_type=T_String;
      string_val="00";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      user_data_=NULL;
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      user_data_=NULL;
      desc=;
      flags=0;
      code_string=;
      cond {
       user_data_=NULL;
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	user_data_=NULL;
	desc=;
	flags=0;
	code_string=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      user_data_=NULL;
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      user_data_=NULL;
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       user_data_=NULL;
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="fname";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] {
   user_data_=NULL;
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @["LeabraEpochTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].doc$$;
     };
    };
    name="LeabraEpochTest";
    short_nm="EpcTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["data_loop_order"] {
      user_data_=NULL;
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      user_data_=NULL;
      name="trial";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      user_data_=NULL;
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
      local_ctr_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      user_data_=NULL;
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      user_data_=NULL;
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$$;
      index_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
      order_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      user_data_=NULL;
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       user_data_=NULL;
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      user_data_=NULL;
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitorTest(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      user_data_=NULL;
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].doc$$;
     };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsTest(network, input_data)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarterTest(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 4";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      user_data_=NULL;
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitorTest(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      update_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarterTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].doc$$;
     };
    };
    name="LeabraQuarterTest";
    short_nm="QrtTst";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      user_data_=NULL;
      name="cycle";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$$;
      local_ctr_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	user_data_=NULL;
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	user_data_=NULL;
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="program_name()";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="grab_camera_img";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$;
	expr {
	 user_data_=NULL;
	 expr="network.cycle";
	};
       };
      };
      init {
       user_data_=NULL;
       expr="cyc=0";
      };
      test {
       user_data_=NULL;
       expr="cyc<cycle_max";
      };
      iter {
       user_data_=NULL;
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      update_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycleTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].doc$$;
     };
    };
    name="LeabraCycleTest";
    short_nm="CycTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
      update_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputsTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].doc$$;
     };
    };
    name="ApplyInputsTest";
    short_nm="InTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      layer_data {
       user_data_=NULL;
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	user_data_=NULL;
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	user_data_=NULL;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	user_data_=NULL;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].doc$$;
     };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	user_data_=NULL;
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	user_data_=NULL;
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	user_data_=NULL;
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	user_data_=NULL;
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	user_data_=NULL;
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	user_data_=NULL;
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	user_data_=NULL;
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	user_data_=NULL;
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	user_data_=NULL;
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	user_data_=NULL;
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	user_data_=NULL;
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	user_data_=NULL;
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	user_data_=NULL;
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	user_data_=NULL;
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_bin_err"] {
	user_data_=NULL;
	name="lay_bin_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.bin_err";
	var_label="lay_bin_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	user_data_=NULL;
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	user_data_=NULL;
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	user_data_=NULL;
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].doc$$;
     };
    };
    name="LeabraEpochMonitorTest";
    short_nm="EpcMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	user_data_=NULL;
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	user_data_=NULL;
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	user_data_=NULL;
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	user_data_=NULL;
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	user_data_=NULL;
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	user_data_=NULL;
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	user_data_=NULL;
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	user_data_=NULL;
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	user_data_=NULL;
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	user_data_=NULL;
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	user_data_=NULL;
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	user_data_=NULL;
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	user_data_=NULL;
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	user_data_=NULL;
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	user_data_=NULL;
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	user_data_=NULL;
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	user_data_=NULL;
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestEpochOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      user_data_=NULL;
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestEpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  user_data_=NULL;
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_114";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     user_data_=NULL;
     name="view_win_lft";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     user_data_=NULL;
     name="view_win_top";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     user_data_=NULL;
     name="view_win_wd";
     value 8 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     user_data_=NULL;
     name="view_win_ht";
     value 8 0=0.7994506;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     user_data_=NULL;
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     user_data_=NULL;
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABAAAAAewAAAKIAf////8BAAAAAQA=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"]$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"projects_1_with_graphy_thing_and_EpochOutputDataTable\"] - projects_1_with_graphy_thing_and_EpochOutputDataTable.proj [*]";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    user_data_=NULL;
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_115";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       user_data_=NULL;
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0.03021978;
     o=Horizontal;
    };
   };
   frames {
    user_data_=NULL;
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     user_data_=NULL;
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"]$;
    };
    PanelViewer @["Editor"] {
     user_data_=NULL;
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_116";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       user_data_=NULL;
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      user_data_=NULL;
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["Network_0"] {
       user_data_=NULL;
       name="Network_0";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["Network_0_View"] {
	  user_data_=NULL;
	  name="Network_0_View";
	  m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7: z=0.7: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0: y=1: z=-1: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;	  };
	  unit_src_path=".layers[0].units[36]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=16: y=16: z=4.2: };
	  max_size2d {x=16: y=34: z=1: };
	  eff_max_size {x=16: y=16: z=4.2: };
	  font_sizes {
	   user_data_=NULL;
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   user_data_=NULL;
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.4;
	   unit_trans=0.4;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   user_data_=NULL;
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   user_data_=NULL;
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    user_data_=NULL;
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    user_data_=NULL;
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    user_data_=NULL;
	    var_name="bias.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    user_data_=NULL;
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    user_data_=NULL;
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    user_data_=NULL;
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[6] {
	    user_data_=NULL;
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    user_data_=NULL;
	    var_name="act_q0";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    user_data_=NULL;
	    var_name="act_q1";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    user_data_=NULL;
	    var_name="act_q2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    user_data_=NULL;
	    var_name="act_q3";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    user_data_=NULL;
	    var_name="act_q4";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    user_data_=NULL;
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;Hidden=-1;Emotions=-1;Gender=-1;Identity=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.9127705: z=2.325769: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.524852;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       user_data_=NULL;
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["EpochOutputData_Graph"] {
	  user_data_=NULL;
	  name="EpochOutputData_Graph";
	  m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=1: max=100: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_sse"] {
	    user_data_=NULL;
	    name="avg_sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=4.41209: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["cnt_err"] {
	    user_data_=NULL;
	    name="cnt_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=3: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_cor"] {
	    user_data_=NULL;
	    name="pct_cor";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_cor"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_err"] {
	    user_data_=NULL;
	    name="pct_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_norm_err"] {
	    user_data_=NULL;
	    name="avg_norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cos_err"] {
	    user_data_=NULL;
	    name="avg_cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_ext_rew"] {
	    user_data_=NULL;
	    name="avg_ext_rew";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cycles"] {
	    user_data_=NULL;
	    name="avg_cycles";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=32: fix_max=0: max=75: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_tot"] {
	    user_data_=NULL;
	    name="epoch_time_tot";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_usr"] {
	    user_data_=NULL;
	    name="epoch_time_usr";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_cnt_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_cnt_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Gender_lay_cnt_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_cnt_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Identi_lay_cnt_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_cnt_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_cor";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_cor"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_cor";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_cor"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_cor";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_cor"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_pct_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_pct_err"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_pct_err"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_trial_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="net_avg_avg_act_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_trial_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_trial_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_trial_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_trial_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_trial_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_trial_cos_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_trial_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_avg_act_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_avg_act_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_avg_act_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_avg_act_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_avg_act_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_avg_act_diff";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_avg_act_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_net_sd"] {
	    user_data_=NULL;
	    name="Hidden_avg_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.325586: fix_max=0: max=0.462465: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_net_sd"] {
	    user_data_=NULL;
	    name="Emotions_avg_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_net_sd"] {
	    user_data_=NULL;
	    name="Gender_avg_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_net_sd"] {
	    user_data_=NULL;
	    name="Identity_avg_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_hog_pct"] {
	    user_data_=NULL;
	    name="Hidden_hog_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_hog_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_hog_pct"] {
	    user_data_=NULL;
	    name="Emotions_hog_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_hog_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_hog_pct"] {
	    user_data_=NULL;
	    name="Gender_hog_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_hog_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_hog_pct"] {
	    user_data_=NULL;
	    name="Identity_hog_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_hog_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_dead_pct"] {
	    user_data_=NULL;
	    name="Hidden_dead_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_dead_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_dead_pct"] {
	    user_data_=NULL;
	    name="Emotions_dead_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_dead_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_dead_pct"] {
	    user_data_=NULL;
	    name="Gender_dead_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_dead_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_dead_pct"] {
	    user_data_=NULL;
	    name="Identity_dead_pct";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_dead_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_netmax"] {
	    user_data_=NULL;
	    name="Hidden_netmax";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_netmax"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_netmax"] {
	    user_data_=NULL;
	    name="Emotio_netmax";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netmax"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_netmax"] {
	    user_data_=NULL;
	    name="Gender_netmax";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netmax"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_netmax"] {
	    user_data_=NULL;
	    name="Identi_netmax";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netmax"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_avg_act"] {
	    user_data_=NULL;
	    name="Hidden_avg_act";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_avg_act"] {
	    user_data_=NULL;
	    name="Emotio_avg_act";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_avg_act"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_act"] {
	    user_data_=NULL;
	    name="Gender_avg_act";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_act"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_avg_act"] {
	    user_data_=NULL;
	    name="Identi_avg_act";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_avg_act"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Hidden_netrel"] {
	    user_data_=NULL;
	    name="Hidden_netrel";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_netrel"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_netrel"] {
	    user_data_=NULL;
	    name="Emotio_netrel";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netrel"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_netrel"] {
	    user_data_=NULL;
	    name="Gender_netrel";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netrel"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_netrel"] {
	    user_data_=NULL;
	    name="Identi_netrel";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netrel"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=101: };
	  page_rows=412;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   user_data_=NULL;
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=1: max=100: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  z_axis {
	   user_data_=NULL;
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  tot_plots=16;
	  plots {
	   user_data_=NULL;
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_plot_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=4.412087: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=3: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_cycles";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=32: fix_max=0: max=75: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.325586: fix_max=0: max=0.462465: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  errbars {
	   user_data_=NULL;
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_err_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   user_data_=NULL;
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   user_data_=NULL;
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.465: y=0.5129999: z=1.637373: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.147373;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["TestTrialOutputData"] {
       user_data_=NULL;
       name="TestTrialOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["TestTrialOutputData_Grid"] {
	  user_data_=NULL;
	  name="TestTrialOutputData_Grid";
	  m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["train_mode"] {
	    user_data_=NULL;
	    name="train_mode";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["train_mode"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["group"] {
	    user_data_=NULL;
	    name="group";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["group"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["trial"] {
	    user_data_=NULL;
	    name="trial";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["trial"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["tick"] {
	    user_data_=NULL;
	    name="tick";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["tick"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["time"] {
	    user_data_=NULL;
	    name="time";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["time"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["trial_name"] {
	    user_data_=NULL;
	    name="trial_name";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["trial_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["group_name"] {
	    user_data_=NULL;
	    name="group_name";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["group_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["output_name"] {
	    user_data_=NULL;
	    name="output_name";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["output_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["rt_cycles"] {
	    user_data_=NULL;
	    name="rt_cycles";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["rt_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["sse"] {
	    user_data_=NULL;
	    name="sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["norm_err"] {
	    user_data_=NULL;
	    name="norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["cos_err"] {
	    user_data_=NULL;
	    name="cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["ext_rew"] {
	    user_data_=NULL;
	    name="ext_rew";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_sse"] {
	    user_data_=NULL;
	    name="Emotio_lay_sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_sse"] {
	    user_data_=NULL;
	    name="Gender_lay_sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_sse"] {
	    user_data_=NULL;
	    name="Identi_lay_sse";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_bin_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_bin_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_bin_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_bin_err"] {
	    user_data_=NULL;
	    name="Gender_lay_bin_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_bin_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_bin_err"] {
	    user_data_=NULL;
	    name="Identi_lay_bin_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_bin_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_norm_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_norm_err"] {
	    user_data_=NULL;
	    name="Gender_lay_norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_norm_err"] {
	    user_data_=NULL;
	    name="Identi_lay_norm_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_cos_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_cos_err"] {
	    user_data_=NULL;
	    name="Gender_lay_cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_cos_err"] {
	    user_data_=NULL;
	    name="Identi_lay_cos_err";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_lay_net_sd"] {
	    user_data_=NULL;
	    name="Hidden_lay_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Hidden_lay_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_net_sd"] {
	    user_data_=NULL;
	    name="Emotio_lay_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_net_sd"] {
	    user_data_=NULL;
	    name="Gender_lay_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_net_sd"] {
	    user_data_=NULL;
	    name="Identi_lay_net_sd";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5: y=0.44875: z=1.270144: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.276394;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Osumnis_oof_phaicz"] {
       user_data_=NULL;
       name="Osumnis_oof_phaicz";
       m_data=NULL;
       cur_font_size=10;
       visible=1;
       root_view {
	user_data_=NULL;
	name="T3DataViewRoot_1";
	m_data=NULL;
	cur_font_size=10;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="T3DataView_List_1";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["Osumnis_oof_phaicz_Grid"] {
	  user_data_=NULL;
	  name="Osumnis_oof_phaicz_Grid";
	  m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$;
	  cur_font_size=10;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Name"] {
	    user_data_=NULL;
	    name="Name";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Name"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Input"] {
	    user_data_=NULL;
	    name="Input";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Input"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions"] {
	    user_data_=NULL;
	    name="Emotions";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Emotions"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender"] {
	    user_data_=NULL;
	    name="Gender";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Gender"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity"] {
	    user_data_=NULL;
	    name="Identity";
	    m_data=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Identity"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="T3Annotation_List_11";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=9: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="ColorScale_1";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="T3SavedView_List_8";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.52625: y=0.4486249: z=1.308439: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.305939;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Panel7"] {
       user_data_=NULL;
       name="Panel7";
       m_data=NULL;
       cur_font_size=10;
       visible=1;
       root_view {
	user_data_=NULL;
	name="T3DataViewRoot_1";
	m_data=NULL;
	cur_font_size=10;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="T3DataView_List_1";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["EpochOutputData_Grid"] {
	  user_data_=NULL;
	  name="EpochOutputData_Grid";
	  m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
	  cur_font_size=10;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_sse"] {
	    user_data_=NULL;
	    name="avg_sse";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["cnt_err"] {
	    user_data_=NULL;
	    name="cnt_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["pct_cor"] {
	    user_data_=NULL;
	    name="pct_cor";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["pct_err"] {
	    user_data_=NULL;
	    name="pct_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_norm_err"] {
	    user_data_=NULL;
	    name="avg_norm_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_cos_err"] {
	    user_data_=NULL;
	    name="avg_cos_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_ext_rew"] {
	    user_data_=NULL;
	    name="avg_ext_rew";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_cycles"] {
	    user_data_=NULL;
	    name="avg_cycles";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch_time_tot"] {
	    user_data_=NULL;
	    name="epoch_time_tot";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch_time_usr"] {
	    user_data_=NULL;
	    name="epoch_time_usr";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_sse";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_sse";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_sse";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_cnt_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Gender_lay_cnt_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Identi_lay_cnt_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_cor";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_cor";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_cor";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_pct_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_pct_err"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_pct_err"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_norm_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_norm_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_norm_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_cos_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_cos_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_cos_err";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["net_avg_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["net_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["net_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="net_avg_avg_act_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Hidden_avg_avg_act_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_avg_act_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_avg_act_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_avg_act_diff";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_avg_net_sd"] {
	    user_data_=NULL;
	    name="Hidden_avg_net_sd";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_net_sd"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_net_sd"] {
	    user_data_=NULL;
	    name="Emotions_avg_net_sd";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_net_sd"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_net_sd"] {
	    user_data_=NULL;
	    name="Gender_avg_net_sd";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_net_sd"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_net_sd"] {
	    user_data_=NULL;
	    name="Identity_avg_net_sd";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_net_sd"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_hog_pct"] {
	    user_data_=NULL;
	    name="Hidden_hog_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_hog_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_hog_pct"] {
	    user_data_=NULL;
	    name="Emotions_hog_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_hog_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_hog_pct"] {
	    user_data_=NULL;
	    name="Gender_hog_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_hog_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_hog_pct"] {
	    user_data_=NULL;
	    name="Identity_hog_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_hog_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_dead_pct"] {
	    user_data_=NULL;
	    name="Hidden_dead_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_dead_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_dead_pct"] {
	    user_data_=NULL;
	    name="Emotions_dead_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_dead_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_dead_pct"] {
	    user_data_=NULL;
	    name="Gender_dead_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_dead_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_dead_pct"] {
	    user_data_=NULL;
	    name="Identity_dead_pct";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_dead_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_netmax"] {
	    user_data_=NULL;
	    name="Hidden_netmax";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_netmax"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_netmax"] {
	    user_data_=NULL;
	    name="Emotio_netmax";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netmax"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_netmax"] {
	    user_data_=NULL;
	    name="Gender_netmax";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netmax"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_netmax"] {
	    user_data_=NULL;
	    name="Identi_netmax";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netmax"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_avg_act"] {
	    user_data_=NULL;
	    name="Hidden_avg_act";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_avg_act"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_avg_act"] {
	    user_data_=NULL;
	    name="Emotio_avg_act";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_avg_act"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_act"] {
	    user_data_=NULL;
	    name="Gender_avg_act";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_act"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_avg_act"] {
	    user_data_=NULL;
	    name="Identi_avg_act";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_avg_act"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Hidden_netrel"] {
	    user_data_=NULL;
	    name="Hidden_netrel";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Hidden_netrel"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=15;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_netrel"] {
	    user_data_=NULL;
	    name="Emotio_netrel";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netrel"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_netrel"] {
	    user_data_=NULL;
	    name="Gender_netrel";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netrel"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_netrel"] {
	    user_data_=NULL;
	    name="Identi_netrel";
	    m_data=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netrel"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="T3Annotation_List_12";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=9: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="ColorScale_1";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="T3SavedView_List_12";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.52625: y=0.449525: z=1.301227: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.307477;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    user_data_=NULL;
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_117";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       user_data_=NULL;
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       user_data_=NULL;
       name="view_win_top";
       value 8 0=0.0989011;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       user_data_=NULL;
       name="view_win_wd";
       value 8 0=0.06149341;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       user_data_=NULL;
       name="view_win_ht";
       value 8 0=0.6195055;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       user_data_=NULL;
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       user_data_=NULL;
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 tree_state{ .;.docs;.wizards;.wizards[0];.ctrl_panels;.data;.data.gp[0];.data.gp[0][0];.data.gp[0][1];.data.gp[0][2];.data.gp[1];.data.gp[2];.programs;.programs.gp[0];.viewers[0];.viewers[0].frames[2];.networks;.networks[0];.networks[0].layers;.networks[0].layers[0];.networks[0].layers[2]; };
 networks {
  user_data_=NULL;
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["Network_0"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_7";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     user_data_=NULL;
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     user_data_=NULL;
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     user_data_=NULL;
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     user_data_=NULL;
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     user_data_=NULL;
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     user_data_=NULL;
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     user_data_=NULL;
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     user_data_=NULL;
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     user_data_=NULL;
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     user_data_=NULL;
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     user_data_=NULL;
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     user_data_=NULL;
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     user_data_=NULL;
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     user_data_=NULL;
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     user_data_=NULL;
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     user_data_=NULL;
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     user_data_=NULL;
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     user_data_=NULL;
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     user_data_=NULL;
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     user_data_=NULL;
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     user_data_=NULL;
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     user_data_=NULL;
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     user_data_=NULL;
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     user_data_=NULL;
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     user_data_=NULL;
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     user_data_=NULL;
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     user_data_=NULL;
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="Network_0";
   desc=;
   specs {
    user_data_=NULL;
    name="specs";
    el_typ=LeabraLayerSpec;
    el_def=0;
    LeabraLayerSpec @["HiddenLayer"] {
     user_data_=NULL;
     name="HiddenLayer";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       user_data_=NULL;
       name="Input_Output";
       is_used=1;
       desc=;
       unique{ lay_inhib;kwta;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {user_data_=NULL: on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {user_data_=NULL: targ_init=0.1: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {user_data_=NULL: trial=1: };
       del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
       lay_lrate=1;
       cos_diff {
	user_data_=NULL;
	avg_tau=100;
	lrate_mod=0;
	lrmod_fm_trc=0;
	lrmod_z_thr=-1.5;
	set_net_unlrn=0;
	avg_dt=0.01;
	avg_dt_c=0.99;
       };
       lstats {
	user_data_=NULL;
	hog_thr=0.3;
	dead_thr=0.01;
       };
      };
     };
     lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {user_data_=NULL: targ_init=0.1: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
     decay {user_data_=NULL: trial=1: };
     del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      user_data_=NULL;
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      user_data_=NULL;
      hog_thr=0.3;
      dead_thr=0.01;
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     user_data_=NULL;
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
     bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"].children["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
     act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      user_data_=NULL;
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
     init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
     dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
     e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
     adapt {
      user_data_=NULL;
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {
      user_data_=NULL;
      on=0;
      delay=4;
     };
     deep_raw_qtr=Q4;
     deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
     da_mod {user_data_=NULL: on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      user_data_=NULL;
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     user_data_=NULL;
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_0"] {
       user_data_=NULL;
       name="LeabraBiasSpec_0";
       is_used=1;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;learn;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {user_data_=NULL: type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.08;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
      LeabraConSpec @["TopDownCons"] {
       user_data_=NULL;
       name="TopDownCons";
       is_used=1;
       desc="top-down connections from output layers down to hidden etc typically need to be weaker than bottom-up";
       unique{ wt_scale;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=0.2: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
      };
     };
     rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     use_lrate_sched=1;
     cur_lrate=0.04;
     lrs_mult=1;
     lrate_sched {
      user_data_=NULL;
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     use_unlearnable=1;
     xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
     dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
     wt_bal {
      user_data_=NULL;
      on=1;
      hi_thr=0.4;
      hi_gain=4;
      lo_thr=0.2;
      lo_gain=4;
     };
     adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] {
     user_data_=NULL;
     name="FullPrjnSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
    };
   };
   param_seqs {
    user_data_=NULL;
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    user_data_=NULL;
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=16: y=16: z=5: };
    max_disp_size2d {x=16: y=34: };
    LeabraLayer @["Input"] {
     user_data_=NULL;
     name="Input";
     desc=;
     flags=ABS_POS;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=16: y=16: n_not_xy=0: n=256: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=16: y=16: n_not_xy=0: n=256: };
     disp_geom {x=16: y=16: n_not_xy=0: n=256: };
     scaled_disp_geom {x=16: y=16: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"].projections["Fm_Input"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      user_data_=NULL;
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.03998405;
     acts_p_avg=0.03998405;
     acts_p_avg_eff=0.03998405;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["Hidden"] {
     user_data_=NULL;
     name="Hidden";
     desc=;
     flags=ABS_POS;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=13: };
     pos2d_abs {x=0: y=13: };
     disp_scale=1;
     un_geom {x=15: y=15: n_not_xy=0: n=225: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=15: y=15: n_not_xy=0: n=225: };
     disp_geom {x=15: y=15: n_not_xy=0: n=225: };
     scaled_disp_geom {x=15: y=15: n_not_xy=0: n=1: };
     n_recv_prjns=5;
     n_send_prjns=3;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Input"] {
       user_data_=NULL;
       name="Fm_Input";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Input"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Emotions"] {
       user_data_=NULL;
       name="Fm_Emotions";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Emotions"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"].children["TopDownCons"]$$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Identity"] {
       user_data_=NULL;
       name="Fm_Identity";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Identity"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Gender"] {
       user_data_=NULL;
       name="Fm_Gender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Gender"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=3;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Identity_4"] {
       user_data_=NULL;
       name="Fm_Identity_4";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Identity"]$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=4;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Emotions"].projections["Fm_Hidden"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Gender"].projections["Fm_Hidden"];
      Projection_Group @. = [2] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Identity"].projections["Fm_Hidden"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=1;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.05758;
     acts_p_avg=0.1205163;
     acts_p_avg_eff=0.1205163;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["Emotions"] {
     user_data_=NULL;
     name="Emotions";
     desc=;
     flags=ABS_POS;
     layer_type=TARGET;
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=0: y=6: };
     pos2d_abs {x=0: y=6: };
     disp_scale=1;
     un_geom {x=3: y=1: n_not_xy=0: n=3: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=3: y=1: n_not_xy=0: n=3: };
     disp_geom {x=3: y=1: n_not_xy=0: n=3: };
     scaled_disp_geom {x=3: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Hidden"] {
       user_data_=NULL;
       name="Fm_Hidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"].projections["Fm_Emotions"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.04710312;
     acts_p_avg=0.306763;
     acts_p_avg_eff=0.306763;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["Gender"] {
     user_data_=NULL;
     name="Gender";
     desc=;
     flags=ABS_POS;
     layer_type=TARGET;
     pos {x=0: y=0: z=3: };
     pos_abs {x=0: y=0: z=3: };
     pos2d {x=0: y=30: };
     pos2d_abs {x=0: y=30: };
     disp_scale=1;
     un_geom {x=2: y=1: n_not_xy=0: n=2: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=2: y=1: n_not_xy=0: n=2: };
     disp_geom {x=2: y=1: n_not_xy=0: n=2: };
     scaled_disp_geom {x=2: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Hidden"] {
       user_data_=NULL;
       name="Fm_Hidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"]$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"].projections["Fm_Gender"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.04878719;
     acts_p_avg=0.00457093;
     acts_p_avg_eff=0.00457093;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["Identity"] {
     user_data_=NULL;
     name="Identity";
     desc=;
     flags=ABS_POS;
     layer_type=TARGET;
     pos {x=0: y=0: z=4: };
     pos_abs {x=0: y=0: z=4: };
     pos2d {x=0: y=33: };
     pos2d_abs {x=0: y=33: };
     disp_scale=1;
     un_geom {x=10: y=1: n_not_xy=0: n=10: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=10: y=1: n_not_xy=0: n=10: };
     disp_geom {x=10: y=1: n_not_xy=0: n=10: };
     scaled_disp_geom {x=10: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=2;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Hidden"] {
       user_data_=NULL;
       name="Fm_Hidden";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"]$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"].projections["Fm_Identity"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Hidden"].projections["Fm_Identity_4"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=2;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.06092151;
     acts_p_avg=0.09522855;
     acts_p_avg_eff=0.09522855;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["projects_1_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
   };
   weights {
    user_data_=NULL;
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=MANUAL_POS|ABS_POS|BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    user_data_=NULL;
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    user_data_=NULL;
    run_time {user_data_=NULL: name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    sync_time {user_data_=NULL: name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    total_time {user_data_=NULL: name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
   };
   cuda {
    user_data_=NULL;
    sync_units=0;
    sync_cons=0;
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
    n_threads=32;
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=497;
   n_cons=66600;
   max_prjns=5;
   max_disp_size {x=16: y=16: z=5: };
   max_disp_size2d {x=16: y=34: };
   times {
    user_data_=NULL;
    quarter=25;
    gate_cyc=18;
    deep_cyc=5;
    time_inc=0.001;
    wt_bal_int=10;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    user_data_=NULL;
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    agg_unlearnable=0;
    wt_bal=0;
   };
   net_misc {
    user_data_=NULL;
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=1;
    diff_scale_p=0;
    diff_scale_q1=0;
    wt_bal=1;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   deep {
    user_data_=NULL;
    on=0;
    ctxt=0;
    raw_net=0;
    mod_net=0;
    raw_qtr=0;
   };
   rel_netin {
    user_data_=NULL;
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};
