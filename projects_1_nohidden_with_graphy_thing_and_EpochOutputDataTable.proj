// ta_Dump File v3.0 -- code v8.0.4.0 rev10446
LeabraProject .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [3] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
    EditMbrItem @[2] { };
   };

   EditMthItem_Group @.mths = [4] {
    EditMthItem @[0] { };
    EditMthItem @[1] { };
    EditMthItem @[2] { };
    EditMthItem @[3] { };
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_running.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_done.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_done.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_deleted.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_deleted.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_deleted.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_archive.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_archive.control_panel_cells = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.file_list.control_panel_cells = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.cluster_info.control_panel_cells = [0] {
   };

   DataTableCols @.clusterscript_timestamp.data = [2] {
    String_Data @["timestamp"] { };
    int_Data @["version"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
   };

   DataOpList @.clusterscript_timestamp.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.clusterscript_timestamp.control_panel_cells = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [3] { 
   DataTable @["StdInputData"] { 
    DataTableCols @.data = [5] {
     String_Data @["Name"] { };
     float_Data @["Emotions"] { };
     float_Data @["Input"] { };
     int_Data @["Gender"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["Identity"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["StdInputData_copy"] { 
    DataTableCols @.data = [5] {
     String_Data @["Name"] { };
     float_Data @["Emotions"] { };
     float_Data @["Input"] { };
     int_Data @["Gender"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["Identity"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["Osumnis_oof_phaicz"] { 
    DataTableCols @.data = [5] {
     String_Data @["Name"] { };
     float_Data @["Input"] { };
     float_Data @["Emotions"] { };
     float_Data @["Gender"] { };
     float_Data @["Identity"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["OutputData"] = [4] { 
   DataTable @["TrialOutputData"] { 
    DataTableCols @.data = [42] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     String_Data @["train_mode"] { };
     int_Data @["group"] { };
     int_Data @["trial"] { };
     int_Data @["tick"] { };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["Emotio_lay_sse"] { };
     float_Data @["Gender_lay_sse"] { };
     float_Data @["Identi_lay_sse"] { };
     float_Data @["Emotio_lay_bin_err"] { };
     float_Data @["Gender_lay_bin_err"] { };
     float_Data @["Identi_lay_bin_err"] { };
     float_Data @["Emotio_lay_norm_err"] { };
     float_Data @["Gender_lay_norm_err"] { };
     float_Data @["Identi_lay_norm_err"] { };
     float_Data @["Emotio_lay_cos_err"] { };
     float_Data @["Gender_lay_cos_err"] { };
     float_Data @["Identi_lay_cos_err"] { };
     float_Data @["Emotio_lay_net_sd"] { };
     float_Data @["Gender_lay_net_sd"] { };
     float_Data @["Identi_lay_net_sd"] { };
     float_Data @["net_cos_diff"] { };
     float_Data @["net_trial_cos_diff"] { };
     float_Data @["net_avg_act_diff"] { };
     float_Data @["Emotions_cos_diff"] { };
     float_Data @["Gender_cos_diff"] { };
     float_Data @["Identity_cos_diff"] { };
     float_Data @["Emotions_trial_cos_diff"] { };
     float_Data @["Gender_trial_cos_diff"] { };
     float_Data @["Identity_trial_cos_diff"] { };
     float_Data @["Emotions_avg_act_diff"] { };
     float_Data @["Gender_avg_act_diff"] { };
     float_Data @["Identity_avg_act_diff"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["EpochOutputData"] { 
    DataTableCols @.data = [60] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["Emotio_lay_avg_sse"] { };
     float_Data @["Gender_lay_avg_sse"] { };
     float_Data @["Identi_lay_avg_sse"] { };
     float_Data @["Emotio_lay_cnt_err"] { };
     float_Data @["Gender_lay_cnt_err"] { };
     float_Data @["Identi_lay_cnt_err"] { };
     float_Data @["Emotio_lay_pct_cor"] { };
     float_Data @["Gender_lay_pct_cor"] { };
     float_Data @["Identi_lay_pct_cor"] { };
     float_Data @["Emotio_lay_pct_err"] { };
     float_Data @["Gender_lay_pct_err"] { };
     float_Data @["Identi_lay_pct_err"] { };
     float_Data @["Emotio_lay_avg_norm_err"] { };
     float_Data @["Gender_lay_avg_norm_err"] { };
     float_Data @["Identi_lay_avg_norm_err"] { };
     float_Data @["Emotio_lay_avg_cos_err"] { };
     float_Data @["Gender_lay_avg_cos_err"] { };
     float_Data @["Identi_lay_avg_cos_err"] { };
     float_Data @["net_avg_cos_diff"] { };
     float_Data @["net_avg_trial_cos_diff"] { };
     float_Data @["net_avg_avg_act_diff"] { };
     float_Data @["Emotions_avg_cos_diff"] { };
     float_Data @["Gender_avg_cos_diff"] { };
     float_Data @["Identity_avg_cos_diff"] { };
     float_Data @["Emotions_avg_trial_cos_diff"] { };
     float_Data @["Gender_avg_trial_cos_diff"] { };
     float_Data @["Identity_avg_trial_cos_diff"] { };
     float_Data @["Emotions_avg_avg_act_diff"] { };
     float_Data @["Gender_avg_avg_act_diff"] { };
     float_Data @["Identity_avg_avg_act_diff"] { };
     float_Data @["Emotions_avg_net_sd"] { };
     float_Data @["Gender_avg_net_sd"] { };
     float_Data @["Identity_avg_net_sd"] { };
     float_Data @["Emotions_hog_pct"] { };
     float_Data @["Gender_hog_pct"] { };
     float_Data @["Identity_hog_pct"] { };
     float_Data @["Emotions_dead_pct"] { };
     float_Data @["Gender_dead_pct"] { };
     float_Data @["Identity_dead_pct"] { };
     float_Data @["Emotio_netmax"] { };
     float_Data @["Gender_netmax"] { };
     float_Data @["Identi_netmax"] { };
     float_Data @["Emotio_avg_act"] { };
     float_Data @["Gender_avg_act"] { };
     float_Data @["Identi_avg_act"] { };
     float_Data @["Emotio_netrel"] { };
     float_Data @["Gender_netrel"] { };
     float_Data @["Identi_netrel"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestTrialOutputData"] { 
    DataTableCols @.data = [30] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     String_Data @["train_mode"] { };
     int_Data @["group"] { };
     int_Data @["trial"] { };
     int_Data @["tick"] { };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["Emotio_lay_sse"] { };
     float_Data @["Gender_lay_sse"] { };
     float_Data @["Identi_lay_sse"] { };
     float_Data @["Emotio_lay_bin_err"] { };
     float_Data @["Gender_lay_bin_err"] { };
     float_Data @["Identi_lay_bin_err"] { };
     float_Data @["Emotio_lay_norm_err"] { };
     float_Data @["Gender_lay_norm_err"] { };
     float_Data @["Identi_lay_norm_err"] { };
     float_Data @["Emotio_lay_cos_err"] { };
     float_Data @["Gender_lay_cos_err"] { };
     float_Data @["Identi_lay_cos_err"] { };
     float_Data @["Emotio_lay_net_sd"] { };
     float_Data @["Gender_lay_net_sd"] { };
     float_Data @["Identi_lay_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestEpochOutputData"] { 
    DataTableCols @.data = [33] {
     int_Data @["batch"] { };
     int_Data @["epoch"] { };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["Emotio_lay_avg_sse"] { };
     float_Data @["Gender_lay_avg_sse"] { };
     float_Data @["Identi_lay_avg_sse"] { };
     float_Data @["Emotio_lay_cnt_err"] { };
     float_Data @["Gender_lay_cnt_err"] { };
     float_Data @["Identi_lay_cnt_err"] { };
     float_Data @["Emotio_lay_pct_cor"] { };
     float_Data @["Gender_lay_pct_cor"] { };
     float_Data @["Identi_lay_pct_cor"] { };
     float_Data @["Emotio_lay_pct_err"] { };
     float_Data @["Gender_lay_pct_err"] { };
     float_Data @["Identi_lay_pct_err"] { };
     float_Data @["Emotio_lay_avg_norm_err"] { };
     float_Data @["Gender_lay_avg_norm_err"] { };
     float_Data @["Identi_lay_avg_norm_err"] { };
     float_Data @["Emotio_lay_avg_cos_err"] { };
     float_Data @["Gender_lay_avg_cos_err"] { };
     float_Data @["Identi_lay_avg_cos_err"] { };
     float_Data @["Emotions_avg_net_sd"] { };
     float_Data @["Gender_avg_net_sd"] { };
     float_Data @["Identity_avg_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["LeabraStartup"] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @["network"] { };
    ProgVar @["input_data"] { };
   };

   ProgVar_List @.vars = [12] {
    ProgVar @["train_prog"] { };
    ProgVar @["batch_prog"] { };
    ProgVar @["param_set"] { };
    ProgVar @["tag"] { };
    ProgVar @["batch_str"] { };
    ProgVar @["log_dir"] { };
    ProgVar @["log_file_nm"] { };
    ProgVar @["batch_start"] { };
    ProgVar @["EpochOutputData"] { };
    ProgVar @["TrialOutputData"] { };
    ProgVar @["MyClusterRun"] { };
    ProgVar @["param_sets"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [30] {
    RegisterArgs @[0] { };
    PrintExpr @[1] { };
    Comment @[2] { };
    ProgVarFmArg @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    ControlPanelsFmArgs @[12] { };
    If @[13] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Comment @[14] { };
    Comment @[15] { };
    If @[16] { 
     ProgEl_List @.true_code = [4] {
      ProgVarFmArg @[0] { };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[2] { };
      If @[3] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[17] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MiscCall @[18] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[19] { };
    MethodCall @[20] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[21] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[22] { };
    Comment @[23] { };
    MethodCall @[24] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[25] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[26] { };
    OtherProgramVar @[27] { };
    PrintExpr @[28] { };
    ProgramCall @[29] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Std"] = [10] { 
   Program @["LeabraBatch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["batch"] { };
     ProgVar @["batch_start"] { };
     ProgVar @["n_batches"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["i"] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @["LeabraTrain"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @["rnd_seeds"] { 
      taList @.seeds = [25] {
       RndSeed @["RndSeed_1"] { };
       RndSeed @["RndSeed_2"] { };
       RndSeed @["RndSeed_3"] { };
       RndSeed @["RndSeed_4"] { };
       RndSeed @["RndSeed_5"] { };
       RndSeed @["RndSeed_6"] { };
       RndSeed @["RndSeed_7"] { };
       RndSeed @["RndSeed_8"] { };
       RndSeed @["RndSeed_9"] { };
       RndSeed @["RndSeed_10"] { };
       RndSeed @["RndSeed_11"] { };
       RndSeed @["RndSeed_12"] { };
       RndSeed @["RndSeed_13"] { };
       RndSeed @["RndSeed_14"] { };
       RndSeed @["RndSeed_15"] { };
       RndSeed @["RndSeed_16"] { };
       RndSeed @["RndSeed_17"] { };
       RndSeed @["RndSeed_18"] { };
       RndSeed @["RndSeed_19"] { };
       RndSeed @["RndSeed_20"] { };
       RndSeed @["RndSeed_21"] { };
       RndSeed @["RndSeed_22"] { };
       RndSeed @["RndSeed_23"] { };
       RndSeed @["RndSeed_24"] { };
       RndSeed @["RndSeed_25"] { };
      };
     };
     RndSeed @["rnd_seed"] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @["RndInitType"] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @["OLD_SEED"] { };
       DynEnumItem @["NEW_SEED"] { };
       DynEnumItem @["BATCH_SEEDS"] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["no_prompts"] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @["max_epoch"] { };
     ProgVar @["epoch"] { };
     ProgVar @["train_mode"] { };
     ProgVar @["rnd_init"] { };
     ProgVar @["err_stopcrit"] { };
     ProgVar @["n_under_thr"] { };
     ProgVar @["save_final_wts"] { };
     ProgVar @["save_wts_interval"] { };
     ProgVar @["n_under_cnt"] { };
     ProgVar @["rnd_seeds"] { };
     ProgVar @["train_timer"] { };
     ProgVar @["rnd_seed"] { };
    };

    Function_List @.functions = [1] {
     Function @["GetRandomSeed"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraEpoch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["step_on_err"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["LeabraTrial"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarter"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycle"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputs"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [5] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
       LayerWriterEl @[3] { };
       LayerWriterEl @[4] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["layer_writer_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitor"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [26] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_bin_err"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
       NetMonItem @["net_cos_diff"] { };
       NetMonItem @["net_trial_cos_diff"] { };
       NetMonItem @["net_avg_act_diff"] { };
       NetMonItem @["cos_diff"] { };
       NetMonItem @["trial_cos_diff"] { };
       NetMonItem @["avg_act_diff"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitor"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [30] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["net_avg_cos_diff"] { };
       NetMonItem @["net_avg_trial_cos_diff"] { };
       NetMonItem @["net_avg_avg_act_diff"] { };
       NetMonItem @["avg_cos_diff"] { };
       NetMonItem @["avg_trial_cos_diff"] { };
       NetMonItem @["avg_avg_act_diff"] { };
       NetMonItem @["avg_net_sd"] { };
       NetMonItem @["hog_pct"] { };
       NetMonItem @["dead_pct"] { };
       NetMonItem @["netmax"] { };
       NetMonItem @["avg_act"] { };
       NetMonItem @["netrel"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @["SaveWeights"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["tag"] { };
     ProgVar @["wts_subdir"] { };
     ProgVar @["fname"] { };
     ProgVar @["epoch_str"] { };
     ProgVar @["batch_str"] { };
     ProgVar @["final_tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] = [7] { 
   Program @["LeabraEpochTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["input_data"] { };
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[10] { };
    };
   };
   Program @["LeabraTrialTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarterTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycleTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputsTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [20] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_bin_err"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["avg_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [5] {
      T3Panel @["Network_0"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["Network_0_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [13] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["EpochOutputData_Graph"] { 
	 T3DataView_List @.children = [60] {
	  GraphColView @["batch"] { };
	  GraphColView @["epoch"] { };
	  GraphColView @["avg_sse"] { };
	  GraphColView @["cnt_err"] { };
	  GraphColView @["pct_cor"] { };
	  GraphColView @["pct_err"] { };
	  GraphColView @["avg_norm_err"] { };
	  GraphColView @["avg_cos_err"] { };
	  GraphColView @["avg_ext_rew"] { };
	  GraphColView @["avg_cycles"] { };
	  GraphColView @["epoch_time_tot"] { };
	  GraphColView @["epoch_time_usr"] { };
	  GraphColView @["Emotio_lay_avg_sse"] { };
	  GraphColView @["Gender_lay_avg_sse"] { };
	  GraphColView @["Identi_lay_avg_sse"] { };
	  GraphColView @["Emotio_lay_cnt_err"] { };
	  GraphColView @["Gender_lay_cnt_err"] { };
	  GraphColView @["Identi_lay_cnt_err"] { };
	  GraphColView @["Emotio_lay_pct_cor"] { };
	  GraphColView @["Gender_lay_pct_cor"] { };
	  GraphColView @["Identi_lay_pct_cor"] { };
	  GraphColView @["Emotio_lay_pct_err"] { };
	  GraphColView @["Gender_lay_pct_err"] { };
	  GraphColView @["Identi_lay_pct_err"] { };
	  GraphColView @["Emotio_lay_avg_norm_err"] { };
	  GraphColView @["Gender_lay_avg_norm_err"] { };
	  GraphColView @["Identi_lay_avg_norm_err"] { };
	  GraphColView @["Emotio_lay_avg_cos_err"] { };
	  GraphColView @["Gender_lay_avg_cos_err"] { };
	  GraphColView @["Identi_lay_avg_cos_err"] { };
	  GraphColView @["net_avg_cos_diff"] { };
	  GraphColView @["net_avg_trial_cos_diff"] { };
	  GraphColView @["net_avg_avg_act_diff"] { };
	  GraphColView @["Emotions_avg_cos_diff"] { };
	  GraphColView @["Gender_avg_cos_diff"] { };
	  GraphColView @["Identity_avg_cos_diff"] { };
	  GraphColView @["Emotions_avg_trial_cos_diff"] { };
	  GraphColView @["Gender_avg_trial_cos_diff"] { };
	  GraphColView @["Identity_avg_trial_cos_diff"] { };
	  GraphColView @["Emotions_avg_avg_act_diff"] { };
	  GraphColView @["Gender_avg_avg_act_diff"] { };
	  GraphColView @["Identity_avg_avg_act_diff"] { };
	  GraphColView @["Emotions_avg_net_sd"] { };
	  GraphColView @["Gender_avg_net_sd"] { };
	  GraphColView @["Identity_avg_net_sd"] { };
	  GraphColView @["Emotions_hog_pct"] { };
	  GraphColView @["Gender_hog_pct"] { };
	  GraphColView @["Identity_hog_pct"] { };
	  GraphColView @["Emotions_dead_pct"] { };
	  GraphColView @["Gender_dead_pct"] { };
	  GraphColView @["Identity_dead_pct"] { };
	  GraphColView @["Emotio_netmax"] { };
	  GraphColView @["Gender_netmax"] { };
	  GraphColView @["Identi_netmax"] { };
	  GraphColView @["Emotio_avg_act"] { };
	  GraphColView @["Gender_avg_act"] { };
	  GraphColView @["Identi_avg_act"] { };
	  GraphColView @["Emotio_netrel"] { };
	  GraphColView @["Gender_netrel"] { };
	  GraphColView @["Identi_netrel"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @["EpochOutputData_Graph_plot_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_16"] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @["EpochOutputData_Graph_err_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_16"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["EpochOutputData_Grid"] { 
	 T3DataView_List @.children = [60] {
	  GridColView @["batch"] { };
	  GridColView @["epoch"] { };
	  GridColView @["avg_sse"] { };
	  GridColView @["cnt_err"] { };
	  GridColView @["pct_cor"] { };
	  GridColView @["pct_err"] { };
	  GridColView @["avg_norm_err"] { };
	  GridColView @["avg_cos_err"] { };
	  GridColView @["avg_ext_rew"] { };
	  GridColView @["avg_cycles"] { };
	  GridColView @["epoch_time_tot"] { };
	  GridColView @["epoch_time_usr"] { };
	  GridColView @["Emotio_lay_avg_sse"] { };
	  GridColView @["Gender_lay_avg_sse"] { };
	  GridColView @["Identi_lay_avg_sse"] { };
	  GridColView @["Emotio_lay_cnt_err"] { };
	  GridColView @["Gender_lay_cnt_err"] { };
	  GridColView @["Identi_lay_cnt_err"] { };
	  GridColView @["Emotio_lay_pct_cor"] { };
	  GridColView @["Gender_lay_pct_cor"] { };
	  GridColView @["Identi_lay_pct_cor"] { };
	  GridColView @["Emotio_lay_pct_err"] { };
	  GridColView @["Gender_lay_pct_err"] { };
	  GridColView @["Identi_lay_pct_err"] { };
	  GridColView @["Emotio_lay_avg_norm_err"] { };
	  GridColView @["Gender_lay_avg_norm_err"] { };
	  GridColView @["Identi_lay_avg_norm_err"] { };
	  GridColView @["Emotio_lay_avg_cos_err"] { };
	  GridColView @["Gender_lay_avg_cos_err"] { };
	  GridColView @["Identi_lay_avg_cos_err"] { };
	  GridColView @["net_avg_cos_diff"] { };
	  GridColView @["net_avg_trial_cos_diff"] { };
	  GridColView @["net_avg_avg_act_diff"] { };
	  GridColView @["Emotions_avg_cos_diff"] { };
	  GridColView @["Gender_avg_cos_diff"] { };
	  GridColView @["Identity_avg_cos_diff"] { };
	  GridColView @["Emotions_avg_trial_cos_diff"] { };
	  GridColView @["Gender_avg_trial_cos_diff"] { };
	  GridColView @["Identity_avg_trial_cos_diff"] { };
	  GridColView @["Emotions_avg_avg_act_diff"] { };
	  GridColView @["Gender_avg_avg_act_diff"] { };
	  GridColView @["Identity_avg_avg_act_diff"] { };
	  GridColView @["Emotions_avg_net_sd"] { };
	  GridColView @["Gender_avg_net_sd"] { };
	  GridColView @["Identity_avg_net_sd"] { };
	  GridColView @["Emotions_hog_pct"] { };
	  GridColView @["Gender_hog_pct"] { };
	  GridColView @["Identity_hog_pct"] { };
	  GridColView @["Emotions_dead_pct"] { };
	  GridColView @["Gender_dead_pct"] { };
	  GridColView @["Identity_dead_pct"] { };
	  GridColView @["Emotio_netmax"] { };
	  GridColView @["Gender_netmax"] { };
	  GridColView @["Identi_netmax"] { };
	  GridColView @["Emotio_avg_act"] { };
	  GridColView @["Gender_avg_act"] { };
	  GridColView @["Identi_avg_act"] { };
	  GridColView @["Emotio_netrel"] { };
	  GridColView @["Gender_netrel"] { };
	  GridColView @["Identi_netrel"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["TestTrialOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["TestTrialOutputData_Grid"] { 
	 T3DataView_List @.children = [30] {
	  GridColView @["batch"] { };
	  GridColView @["epoch"] { };
	  GridColView @["train_mode"] { };
	  GridColView @["group"] { };
	  GridColView @["trial"] { };
	  GridColView @["tick"] { };
	  GridColView @["time"] { };
	  GridColView @["trial_name"] { };
	  GridColView @["group_name"] { };
	  GridColView @["output_name"] { };
	  GridColView @["rt_cycles"] { };
	  GridColView @["sse"] { };
	  GridColView @["norm_err"] { };
	  GridColView @["cos_err"] { };
	  GridColView @["ext_rew"] { };
	  GridColView @["Emotio_lay_sse"] { };
	  GridColView @["Gender_lay_sse"] { };
	  GridColView @["Identi_lay_sse"] { };
	  GridColView @["Emotio_lay_bin_err"] { };
	  GridColView @["Gender_lay_bin_err"] { };
	  GridColView @["Identi_lay_bin_err"] { };
	  GridColView @["Emotio_lay_norm_err"] { };
	  GridColView @["Gender_lay_norm_err"] { };
	  GridColView @["Identi_lay_norm_err"] { };
	  GridColView @["Emotio_lay_cos_err"] { };
	  GridColView @["Gender_lay_cos_err"] { };
	  GridColView @["Identi_lay_cos_err"] { };
	  GridColView @["Emotio_lay_net_sd"] { };
	  GridColView @["Gender_lay_net_sd"] { };
	  GridColView @["Identi_lay_net_sd"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["Osumnis_oof_phaicz"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["Osumnis_oof_phaicz_Grid"] { 
	 T3DataView_List @.children = [5] {
	  GridColView @["Name"] { };
	  GridColView @["Input"] { };
	  GridColView @["Emotions"] { };
	  GridColView @["Gender"] { };
	  GridColView @["Identity"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @["Network_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [4] {
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [2] {
      LeabraBiasSpec @["LeabraBiasSpec_0"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @["TopDownCons"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [3] {
      LeabraPrjn @["Fm_Identity"] { };
      LeabraPrjn @["Fm_Gender"] { };
      LeabraPrjn @["Fm_Emotions"] { };
     };

     Unit_Group @.units = [256] {
     };
    };
    LeabraLayer @["Emotions"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Input"] { };
     };

     Unit_Group @.units = [3] {
     };
    };
    LeabraLayer @["Gender"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Input"] { };
     };

     Unit_Group @.units = [2] {
     };
    };
    LeabraLayer @["Identity"] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @["Fm_Input"] { };
     };

     Unit_Group @.units = [10] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"] {
 user_data_=NULL;
 name="projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable";
 desc=;
 tags=;
 version {
  user_data_=NULL;
  major=8;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  user_data_=NULL;
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {
  user_data_=NULL;
  wiki=;
  page_name=;
 };
 docs {
  user_data_=NULL;
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  user_data_=NULL;
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     user_data_=NULL;
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=0;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  user_data_=NULL;
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     user_data_=NULL;
     label="leabra_con_spec_0_lrate";
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
    EditMbrItem @[1] {
     user_data_=NULL;
     label="leabra_cycle_update_net_view";
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=1;
     base=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
    EditMbrItem @[2] {
     user_data_=NULL;
     label="cycle_qtr";
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].times$$;
     mbr=LeabraTimes::cycle_qtr;
     is_numeric=0;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     user_data_=NULL;
     label="Train_Init";
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     user_data_=NULL;
     label="Train_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     user_data_=NULL;
     label="Train_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     user_data_=NULL;
     label="Train_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    user_data_=NULL;
    name="jobs_running";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_done {
    user_data_=NULL;
    name="jobs_done";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_deleted {
    user_data_=NULL;
    name="jobs_deleted";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_archive {
    user_data_=NULL;
    name="jobs_archive";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   file_list {
    user_data_=NULL;
    name="file_list";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_name"] {
      user_data_=NULL;
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["size"] {
      user_data_=NULL;
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["kind"] {
      user_data_=NULL;
      name="kind";
      desc="type of file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_modified"] {
      user_data_=NULL;
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_created"] {
      user_data_=NULL;
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["svn_file_path"] {
      user_data_=NULL;
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["proj_file_path"] {
      user_data_=NULL;
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_path"] {
      user_data_=NULL;
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   cluster_info {
    user_data_=NULL;
    name="cluster_info";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["state"] {
      user_data_=NULL;
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["procs"] {
      user_data_=NULL;
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   clusterscript_timestamp {
    user_data_=NULL;
    name="clusterscript_timestamp";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["timestamp"] {
      user_data_=NULL;
      name="timestamp";
      desc="Timestamp of last interaction from the cluster run script";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["version"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="version";
      desc="Version number of cluster run script ";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   search_algos {
    user_data_=NULL;
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 param_sets {
  user_data_=NULL;
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  user_data_=NULL;
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   user_data_=NULL;
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["StdInputData"] {
    user_data_=NULL;
    name="StdInputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      user_data_=NULL;
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3] "Generic_Happy";"Generic_Sad";"Generic_RBF";      };
     };
     float_Data @["Emotions"] {
      user_data_=NULL;
      name="Emotions";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 3] 1;0;0;0;1;0;0;0;1;      };
     };
     float_Data @["Input"] {
      user_data_=NULL;
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [16 16 3] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;1;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;0;0;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
     int_Data @["Gender"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_118";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 3] 0;0;0;0;0;0;      };
     };
     String_Data @["Identity"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_119";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Identity";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=4;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 3] "0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [3] 0;1;2;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["StdInputData_copy"] {
    user_data_=NULL;
    name="StdInputData_copy";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      user_data_=NULL;
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3] "Generic_Happy";"Generic_Sad";"Generic_RBF";      };
     };
     float_Data @["Emotions"] {
      user_data_=NULL;
      name="Emotions";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 3] 1;0;0;0;1;0;0;0;1;      };
     };
     float_Data @["Input"] {
      user_data_=NULL;
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [16 16 3] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;1;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;0;0;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;      };
     };
     int_Data @["Gender"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_118";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 3] 0;0;0;0;0;0;      };
     };
     String_Data @["Identity"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_119";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Identity";
      col_flags=SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=4;
      matrix_col_width=2;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 3] "0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
"0";"0";"0";"0";"0";"0";"0";"0";"0";"1";
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [3] 0;1;2;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["Osumnis_oof_phaicz"] {
    user_data_=NULL;
    name="Osumnis_oof_phaicz";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      user_data_=NULL;
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [18] "Alberto_happy";"Alberto_sad";"Alberto_RB";"Betty_happy";"Betty_sad";"Betty_RB";"Lisa_happy";"Lisa_sad";"Lisa_RB";"Mark_happy";
"Mark_sad";"Mark_RB";"Wendy_happy";"Wendy_sad";"Wendy_RB";"Zane_happy";"Zane_sad";"Zane_RB";      };
     };
     float_Data @["Input"] {
      user_data_=NULL;
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=1;
      ar {
       user_data_=NULL;
       name="ar";
      [16 16 18] 0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;1;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;1;0;1;0;0;1;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;1;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;1;1;1;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
1;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;1;1;1;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;0;1;1;1;1;0;0;
0;1;0;1;0;1;0;1;0;1;
0;0;0;0;1;0;1;0;1;0;
0;0;1;0;1;0;0;1;1;0;
0;1;0;1;0;0;0;1;0;1;
0;0;1;0;0;1;0;1;0;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
1;0;1;0;1;0;1;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;1;1;1;0;0;0;1;0;1;
0;1;0;1;0;1;0;0;0;0;
1;0;1;0;1;0;0;0;1;0;
1;0;1;0;0;1;0;1;0;1;
0;0;0;1;0;1;0;0;0;1;
1;0;0;1;0;0;1;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;1;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;1;0;0;0;1;1;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;1;0;0;0;1;1;1;1;
0;0;0;1;0;1;0;1;0;1;
0;1;0;0;0;0;1;0;1;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;1;
0;1;0;0;1;1;1;1;0;1;
0;0;1;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;1;1;0;1;1;1;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;1;1;1;1;0;0;0;1;
0;1;0;1;0;1;0;1;0;0;
0;0;1;0;1;0;1;0;0;0;
1;0;1;0;0;1;1;0;0;1;
0;1;0;0;0;1;0;1;0;0;
1;0;0;1;0;1;0;0;1;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;1;1;0;0;0;1;
0;0;0;0;1;1;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;1;1;0;
1;0;1;0;1;0;1;1;0;0;
0;0;0;1;0;1;0;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;0;0;0;0;
0;0;1;0;1;0;0;0;1;1;
1;1;0;0;0;1;0;1;0;1;
0;1;0;1;0;0;0;0;1;0;
1;0;1;0;0;0;1;0;1;0;
1;0;0;1;0;1;0;1;0;0;
0;1;0;1;0;0;0;1;1;0;
0;1;0;0;1;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;0;1;
1;1;0;0;0;1;1;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;0;0;0;0;0;0;1;0;
1;0;0;0;1;1;1;1;0;0;
0;1;0;1;0;1;0;1;0;1;
0;0;0;0;1;0;1;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;0;1;0;0;0;1;0;1;
0;0;1;1;1;1;0;1;0;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
1;1;1;0;1;1;1;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;1;0;1;0;
0;1;0;1;0;1;1;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;1;0;0;1;0;0;
0;1;1;0;0;0;1;0;1;1;
0;0;0;0;1;1;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
1;1;1;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;0;0;
0;0;0;0;0;0;0;1;1;0;
0;0;1;0;1;1;1;0;0;1;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;1;1;1;0;0;1;1;
1;1;0;0;1;1;1;0;0;0;
0;1;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;1;1;0;0;1;0;1;0;0;
0;0;0;1;0;0;1;0;0;1;
0;1;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;1;0;0;0;0;
1;1;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;1;1;0;1;0;1;0;
1;0;1;1;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;0;0;1;1;1;1;0;0;
1;1;1;0;0;0;0;1;0;1;
0;0;0;0;1;1;1;0;0;0;
0;0;1;0;1;0;1;0;0;1;
0;1;0;1;0;0;0;0;0;1;
0;0;0;1;1;0;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;1;
0;0;1;0;1;0;0;0;1;1;
0;0;0;0;0;1;1;1;0;0;
0;1;1;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;1;0;0;
1;1;1;1;0;0;1;1;1;0;
0;0;0;1;0;1;0;0;0;0;
1;1;1;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;1;
0;0;0;0;0;1;0;0;1;1;
1;1;0;1;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;1;1;1;0;1;1;1;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;1;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;1;0;1;0;0;1;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;1;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;1;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;1;1;1;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
1;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
1;1;1;0;0;1;1;1;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;1;1;1;
1;1;1;1;0;0;0;0;      };
     };
     float_Data @["Emotions"] {
      user_data_=NULL;
      name="Emotions";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 18] 1;0;0;0;1;0;0;0;1;1;
0;0;0;1;0;0;0;1;1;0;
0;0;1;0;0;0;1;1;0;0;
0;1;0;0;0;1;1;0;0;0;
1;0;0;0;1;1;0;0;0;1;
0;0;0;1;      };
     };
     float_Data @["Gender"] {
      user_data_=NULL;
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 18] 0;1;0;1;0;1;1;0;1;0;
1;0;1;0;1;0;1;0;0;1;
0;1;0;1;1;0;1;0;1;0;
0;1;0;1;0;1;      };
     };
     float_Data @["Identity"] {
      user_data_=NULL;
      name="Identity";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 18] 1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [18] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   user_data_=NULL;
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["TrialOutputData"] {
    user_data_=NULL;
    name="TrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["group"] {
      user_data_=NULL;
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      user_data_=NULL;
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["tick"] {
      user_data_=NULL;
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["time"] {
      user_data_=NULL;
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      user_data_=NULL;
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      user_data_=NULL;
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["output_name"] {
      user_data_=NULL;
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["rt_cycles"] {
      user_data_=NULL;
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["sse"] {
      user_data_=NULL;
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["norm_err"] {
      user_data_=NULL;
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cos_err"] {
      user_data_=NULL;
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      user_data_=NULL;
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_sse"] {
      user_data_=NULL;
      name="Emotio_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_sse"] {
      user_data_=NULL;
      name="Gender_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_sse"] {
      user_data_=NULL;
      name="Identi_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_bin_err"] {
      user_data_=NULL;
      name="Emotio_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_bin_err"] {
      user_data_=NULL;
      name="Gender_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_bin_err"] {
      user_data_=NULL;
      name="Identi_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_net_sd"] {
      user_data_=NULL;
      name="Emotio_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_net_sd"] {
      user_data_=NULL;
      name="Gender_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_net_sd"] {
      user_data_=NULL;
      name="Identi_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_cos_diff"] {
      user_data_=NULL;
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_trial_cos_diff"] {
      user_data_=NULL;
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotions_cos_diff"] {
      user_data_=NULL;
      name="Emotions_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_cos_diff"] {
      user_data_=NULL;
      name="Gender_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identity_cos_diff"] {
      user_data_=NULL;
      name="Identity_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotions_trial_cos_diff"] {
      user_data_=NULL;
      name="Emotions_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_trial_cos_diff"] {
      user_data_=NULL;
      name="Gender_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identity_trial_cos_diff"] {
      user_data_=NULL;
      name="Identity_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotions_avg_act_diff"] {
      user_data_=NULL;
      name="Emotions_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_avg_act_diff"] {
      user_data_=NULL;
      name="Gender_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identity_avg_act_diff"] {
      user_data_=NULL;
      name="Identity_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["EpochOutputData"] {
    user_data_=NULL;
    name="EpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;      };
     };
     float_Data @["avg_sse"] {
      user_data_=NULL;
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 2.9051676;2.7292171;2.6271474;2.6389322;2.5912759;2.4991119;2.5238156;2.4807367;2.4858778;2.5260072;
2.4882133;2.4813311;2.4622047;2.4602416;2.4632039;2.4630318;2.4621046;2.4741144;2.4741144;2.4741144;
2.4741144;2.4673402;2.4581764;2.4581764;2.4581764;2.4581759;2.4581757;2.4581759;2.4581759;2.4581759;
2.4581761;2.4581759;2.4581764;2.4581757;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581759;
2.4581759;2.4581761;2.4581759;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;
2.4581761;2.4581759;2.4581759;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;
2.4581764;2.4581761;2.4581759;2.4581761;2.4581761;2.4581757;2.4581759;2.4581761;2.4581757;2.4581761;
2.4581761;2.4581764;2.4581759;2.4581759;2.4581764;2.4581759;2.4581761;2.4581759;2.4581759;2.4581761;
2.4581766;2.4581761;2.4581759;2.4581761;2.4581759;2.4581761;2.4581757;2.4581761;2.4581761;2.4581761;
2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581759;2.4581761;2.4581759;2.4581764;
2.4581759;2.4581761;2.4581761;2.4581759;2.4581761;2.4581757;2.4581759;2.4581761;2.4581764;2.4581761;
2.4581759;2.4581759;2.4581761;2.4581759;2.4581766;2.4581764;2.4581761;2.4581761;2.4581757;2.4581759;
2.4581761;2.4581761;2.4581757;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;
2.4581766;2.4581759;2.4581761;2.4581759;2.4581759;2.4581757;2.4581759;2.4581761;2.4581761;2.4581764;
2.4581761;2.4581759;2.4581761;2.4581761;2.4581761;2.4581764;2.4581759;2.4581761;2.4581764;2.4581761;
2.4581761;2.4581757;2.4581761;2.4581757;2.4581764;2.4581761;2.4581761;2.4581759;2.4581761;2.4581761;
2.4581759;2.4581759;2.4581764;2.4581764;2.4581761;2.4581759;2.4581761;2.4581761;2.4581759;2.4581761;
2.4581757;2.4581759;2.4581759;2.4581759;2.4581764;2.4581759;2.4581759;2.4581759;2.4581764;2.4581759;
2.4581757;2.4581761;2.4581757;2.4581759;2.4581764;2.4581761;2.4581761;2.4581761;2.4581761;2.4581764;
2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581757;2.4581759;2.4581759;
2.4581761;2.4581759;2.4581761;2.4581757;2.4581764;2.4581757;2.4581757;2.4581759;2.4581761;2.4581761;
2.4581757;2.4581759;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581759;
2.4581759;2.4581761;2.4581759;2.4581764;2.4581761;2.4581761;2.4581757;2.4581761;2.4581761;2.4581757;
2.4581759;2.4581759;2.4581761;2.4581764;2.4581759;2.4581761;2.4581761;2.4581759;2.4581764;2.4581761;
2.4581759;2.4581761;2.4581764;2.4581759;2.4581764;2.4581761;2.4581764;2.4581757;2.4581759;2.4581764;
2.4581757;2.4581761;2.4581761;2.4581757;2.4581759;2.4581761;2.4581761;2.4581761;2.4581757;2.4581761;
2.4581761;2.4581761;2.4581764;2.4581761;2.4581761;2.4581759;2.4581759;2.4581764;2.4581759;2.4581761;
2.4581759;2.4581761;2.4581759;2.4581761;2.4581761;2.4581759;2.4581761;2.4581759;2.4581761;2.4581764;
2.4581759;2.4581761;2.4581764;2.4581761;2.4581759;2.4581759;2.4581761;2.4581759;2.4581759;2.4581759;
2.4581766;2.4581764;2.4581761;2.4581759;2.4581759;2.4581761;2.4581764;2.4581759;2.4581761;2.4581761;
2.4581761;2.4581761;2.4581761;2.4581761;2.4581761;2.4581764;2.4581764;2.4581761;2.4581761;2.4581761;
2.4581761;2.4581761;2.4581761;2.4581764;2.4581761;2.4581761;2.4581761;2.4581761;2.4581764;2.4581759;
2.4581761;2.4581761;2.4581761;2.4581761;2.4581757;2.4581759;2.4581761;2.4581759;2.4581761;2.4581761;
2.4581759;2.4581764;2.4581761;2.4581761;2.4581759;2.4581761;2.4581759;2.4581766;2.4581761;2.4581761;
2.4581761;2.4581761;2.4581761;2.4581764;2.4581759;2.4581761;2.4581761;2.4581764;2.4581761;2.4581761;
2.4581759;2.4581761;      };
     };
     float_Data @["cnt_err"] {
      user_data_=NULL;
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;      };
     };
     float_Data @["pct_cor"] {
      user_data_=NULL;
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["pct_err"] {
      user_data_=NULL;
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["avg_norm_err"] {
      user_data_=NULL;
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.6388889;0.62037033;0.6111111;0.5925926;0.58333331;0.57407409;0.57407409;0.56481481;0.56481481;0.57407403;
0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481487;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481475;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;
0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481487;0.56481475;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481487;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481475;0.56481481;0.56481481;0.56481481;0.56481487;
0.56481475;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481487;0.56481481;0.56481487;0.56481481;0.56481481;
0.56481487;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;
0.56481487;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481487;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;0.56481481;0.56481481;0.56481475;0.56481481;0.56481481;0.56481481;0.56481481;0.56481481;
0.56481481;0.56481481;      };
     };
     float_Data @["avg_cos_err"] {
      user_data_=NULL;
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.46048579;0.48128101;0.48418581;0.46988302;0.48680708;0.50555253;0.49440712;0.49129689;0.48778942;0.46221384;
0.47037888;0.46975523;0.47681215;0.47681481;0.46899542;0.46904293;0.47441101;0.46447161;0.46447167;0.46447161;
0.46447161;0.47471926;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;
0.47981343;0.47981346;0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;
0.47981346;0.47981346;0.47981343;0.47981346;0.47981343;0.47981352;0.47981343;0.47981346;0.47981343;0.47981346;
0.47981343;0.47981343;0.47981343;0.47981343;0.47981343;0.47981346;0.47981346;0.47981343;0.47981346;0.47981343;
0.47981346;0.47981343;0.47981343;0.47981343;0.47981346;0.47981343;0.47981346;0.47981352;0.47981346;0.47981343;
0.47981343;0.47981352;0.47981352;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981346;0.47981343;
0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;
0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981352;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981343;0.47981352;0.47981346;0.47981343;0.47981346;
0.47981343;0.47981343;0.47981343;0.47981352;0.47981343;0.47981346;0.47981343;0.47981346;0.47981343;0.47981343;
0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981343;0.47981346;0.47981343;0.47981343;0.47981337;
0.47981343;0.47981343;0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;
0.47981343;0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;0.47981352;0.47981346;0.47981346;0.47981343;
0.47981343;0.47981343;0.47981346;0.47981343;0.47981343;0.47981343;0.47981346;0.47981346;0.47981343;0.47981352;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981346;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981343;
0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;
0.47981343;0.47981343;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981343;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981343;0.47981346;0.47981352;0.47981346;0.47981343;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;
0.47981346;0.47981346;0.47981346;0.47981343;0.47981352;0.47981343;0.47981343;0.47981346;0.47981352;0.47981346;
0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;
0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981352;0.47981346;0.47981343;0.47981343;0.47981346;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981343;
0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;
0.47981346;0.47981343;0.47981352;0.47981352;0.47981346;0.47981343;0.47981346;0.47981346;0.47981343;0.47981346;
0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981352;0.47981343;0.47981346;0.47981346;0.47981352;
0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;
0.47981343;0.47981346;0.47981343;0.47981346;0.47981346;0.47981343;0.47981343;0.47981343;0.47981346;0.47981343;
0.47981343;0.47981343;0.47981346;0.47981343;0.47981346;0.47981346;0.47981346;0.47981343;0.47981346;0.47981346;
0.47981346;0.47981352;0.47981343;0.47981343;0.47981346;0.47981346;0.47981343;0.47981343;0.47981346;0.47981346;
0.47981346;0.47981343;0.47981346;0.47981343;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;0.47981346;
0.47981346;0.47981343;      };
     };
     float_Data @["avg_ext_rew"] {
      user_data_=NULL;
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["avg_cycles"] {
      user_data_=NULL;
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 8.166667;16.055555;17.833334;18.666666;18.666666;19.666666;23;26.222221;25.944445;22.666666;
22.888889;23;22.777779;23.111111;23.444445;23.444445;23.666666;23.944445;23.944445;23.944445;
23.944445;24;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;24.5;
24.5;24.5;      };
     };
     float_Data @["epoch_time_tot"] {
      user_data_=NULL;
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.116;0.064000003;0.061999999;0.059;0.064999998;0.059;0.064999998;0.064000003;0.063000001;0.163;
0.156;0.123;0.106;0.072999999;0.063000001;0.061000001;0.061999999;0.057999998;0.057999998;0.064000003;
0.061999999;0.067000002;0.059;0.061000001;0.061000001;0.068999998;0.061999999;0.063000001;0.059999999;0.061000001;
0.061999999;0.061000001;0.061000001;0.059999999;0.064000003;0.059999999;0.061000001;0.066;0.059999999;0.064999998;
0.061999999;0.063000001;0.061999999;0.066;0.061000001;0.059999999;0.061000001;0.071999997;0.061000001;0.061000001;
0.063000001;0.057999998;0.064999998;0.061999999;0.067000002;0.072999999;0.072999999;0.059;0.061000001;0.059999999;
0.059999999;0.068999998;0.057999998;0.059999999;0.061000001;0.07;0.075999998;0.057999998;0.063000001;0.061000001;
0.057999998;0.059999999;0.061999999;0.059;0.059;0.061000001;0.063000001;0.059999999;0.061000001;0.068999998;
0.089000002;0.063000001;0.171;0.14399999;0.066;0.075000003;0.082999997;0.081;0.059;0.059;
0.059999999;0.061999999;0.059;0.059;0.066;0.17900001;0.071999997;0.057999998;0.061000001;0.088;
0.074000001;0.057999998;0.061000001;0.066;0.059999999;0.47400001;0.057;0.055;0.21699999;0.067000002;
0.061999999;0.059999999;0.059999999;0.061000001;0.059;0.064999998;0.11;1.334;0.34999999;0.07;
0.064999998;0.059;0.059999999;0.26699999;0.067000002;0.050999999;0.057999998;0.064000003;0.052000001;0.11;
0.064999998;0.059999999;0.059999999;0.059;0.063000001;0.057;0.059999999;0.059;0.061999999;0.059;
0.066;0.059;0.059999999;0.059;0.36000001;0.18099999;0.057999998;0.059999999;0.092;0.089000002;
0.29499999;0.097999997;0.085000001;0.059999999;0.059;0.071000002;0.061000001;0.059;0.057;0.433;
0.27200001;0.075000003;0.057999998;0.059999999;0.071999997;0.052000001;0.102;0.149;0.094999999;0.12;
0.133;0.068999998;0.064999998;0.149;0.19599999;0.147;0.104;0.071000002;0.061000001;0.075000003;
0.075999998;0.057999998;0.059999999;0.068000004;0.059;0.059;0.061000001;0.088;0.07;0.059;
0.061999999;0.056000002;0.059;0.059;0.059;0.061999999;0.059999999;0.059;0.059999999;0.061999999;
0.059;0.061000001;0.059999999;0.059999999;0.057999998;0.061000001;0.071999997;1.783;0.071999997;0.057999998;
0.059;0.21699999;0.125;0.107;0.145;0.12899999;0.066;0.059999999;0.061000001;0.059999999;
0.059;0.059999999;0.059999999;0.057999998;0.059999999;0.063000001;0.086999997;0.064000003;0.061999999;0.061999999;
0.071000002;0.057;0.059999999;0.061000001;0.18000001;0.050999999;0.050999999;0.055;0.098999999;0.055;
0.074000001;0.064999998;0.052999999;0.052999999;0.050999999;0.050000001;0.048999999;0.050000001;0.052000001;0.19;
0.068999998;0.066;0.067000002;0.059999999;0.059;0.081;0.086000003;0.079000004;0.079000004;0.28200001;
0.213;0.111;0.119;0.063000001;0.057;0.057999998;0.059;0.061999999;0.057;0.059;
3.8859999;0.064000003;0.059999999;0.07;0.056000002;0.07;0.059;0.057999998;0.059999999;0.057999998;
0.061000001;0.059;0.061999999;0.057999998;0.066;0.059;0.085000001;0.068000004;0.07;0.066;
0.07;0.075000003;0.061000001;0.057;0.067000002;0.052000001;0.071000002;0.059999999;0.050999999;0.074000001;
0.059999999;0.050999999;0.061999999;0.064000003;0.052000001;0.057;0.059;0.066;0.057999998;0.059;
0.057;0.059999999;0.059999999;0.056000002;0.059999999;0.057999998;0.061000001;0.057;0.057999998;0.057999998;
0.061999999;0.057999998;0.064999998;0.057;0.059;0.059;0.059999999;0.059999999;0.061000001;0.059999999;
0.061999999;0.059;0.057999998;0.059999999;0.050000001;0.066;0.059;0.052000001;0.057;0.068999998;
0.057999998;0.059999999;0.063000001;0.057999998;0.057999998;0.059999999;0.052000001;0.057;0.061999999;0.050999999;
0.090999998;0.074000001;      };
     };
     float_Data @["epoch_time_usr"] {
      user_data_=NULL;
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.116;0.064000003;0.061999999;0.059;0.064999998;0.059;0.064999998;0.064000003;0.063000001;0.163;
0.156;0.123;0.106;0.072999999;0.063000001;0.061000001;0.061999999;0.057999998;0.057999998;0.064000003;
0.061999999;0.067000002;0.059;0.061000001;0.061000001;0.068999998;0.061999999;0.063000001;0.059999999;0.061000001;
0.061999999;0.061000001;0.061000001;0.059999999;0.064000003;0.059999999;0.061000001;0.066;0.059999999;0.064999998;
0.061999999;0.063000001;0.061999999;0.066;0.061000001;0.059999999;0.061000001;0.071999997;0.061000001;0.061000001;
0.063000001;0.057999998;0.064999998;0.061999999;0.067000002;0.072999999;0.072999999;0.059;0.061000001;0.059999999;
0.059999999;0.068999998;0.057999998;0.059999999;0.061000001;0.07;0.075999998;0.057999998;0.063000001;0.061000001;
0.057999998;0.059999999;0.061999999;0.059;0.059;0.061000001;0.063000001;0.059999999;0.061000001;0.068999998;
0.089000002;0.063000001;0.171;0.14399999;0.066;0.075000003;0.082999997;0.081;0.059;0.059;
0.059999999;0.061999999;0.059;0.059;0.066;0.17900001;0.071999997;0.057999998;0.061000001;0.088;
0.074000001;0.057999998;0.061000001;0.066;0.059999999;0.47400001;0.057;0.055;0.21699999;0.067000002;
0.061999999;0.059999999;0.059999999;0.061000001;0.059;0.064999998;0.11;1.334;0.34999999;0.07;
0.064999998;0.059;0.059999999;0.26699999;0.067000002;0.050999999;0.057999998;0.064000003;0.052000001;0.11;
0.064999998;0.059999999;0.059999999;0.059;0.063000001;0.057;0.059999999;0.059;0.061999999;0.059;
0.066;0.059;0.059999999;0.059;0.36000001;0.18099999;0.057999998;0.059999999;0.092;0.089000002;
0.29499999;0.097999997;0.085000001;0.059999999;0.059;0.071000002;0.061000001;0.059;0.057;0.433;
0.27200001;0.075000003;0.057999998;0.059999999;0.071999997;0.052000001;0.102;0.149;0.094999999;0.12;
0.133;0.068999998;0.064999998;0.149;0.19599999;0.147;0.104;0.071000002;0.061000001;0.075000003;
0.075999998;0.057999998;0.059999999;0.068000004;0.059;0.059;0.061000001;0.088;0.07;0.059;
0.061999999;0.056000002;0.059;0.059;0.059;0.061999999;0.059999999;0.059;0.059999999;0.061999999;
0.059;0.061000001;0.059999999;0.059999999;0.057999998;0.061000001;0.071999997;1.783;0.071999997;0.057999998;
0.059;0.21699999;0.125;0.107;0.145;0.12899999;0.066;0.059999999;0.061000001;0.059999999;
0.059;0.059999999;0.059999999;0.057999998;0.059999999;0.063000001;0.086999997;0.064000003;0.061999999;0.061999999;
0.071000002;0.057;0.059999999;0.061000001;0.18000001;0.050999999;0.050999999;0.055;0.098999999;0.055;
0.074000001;0.064999998;0.052999999;0.052999999;0.050999999;0.050000001;0.048999999;0.050000001;0.052000001;0.19;
0.068999998;0.066;0.067000002;0.059999999;0.059;0.081;0.086000003;0.079000004;0.079000004;0.28200001;
0.213;0.111;0.119;0.063000001;0.057;0.057999998;0.059;0.061999999;0.057;0.059;
3.8859999;0.064000003;0.059999999;0.07;0.056000002;0.07;0.059;0.057999998;0.059999999;0.057999998;
0.061000001;0.059;0.061999999;0.057999998;0.066;0.059;0.085000001;0.068000004;0.07;0.066;
0.07;0.075000003;0.061000001;0.057;0.067000002;0.052000001;0.071000002;0.059999999;0.050999999;0.074000001;
0.059999999;0.050999999;0.061999999;0.064000003;0.052000001;0.057;0.059;0.066;0.057999998;0.059;
0.057;0.059999999;0.059999999;0.056000002;0.059999999;0.057999998;0.061000001;0.057;0.057999998;0.057999998;
0.061999999;0.057999998;0.064999998;0.057;0.059;0.059;0.059999999;0.059999999;0.061000001;0.059999999;
0.061999999;0.059;0.057999998;0.059999999;0.050000001;0.066;0.059;0.052000001;0.057;0.068999998;
0.057999998;0.059999999;0.063000001;0.057999998;0.057999998;0.059999999;0.052000001;0.057;0.061999999;0.050999999;
0.090999998;0.074000001;      };
     };
     float_Data @["Emotio_lay_avg_sse"] {
      user_data_=NULL;
      name="Emotio_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.6564303;0.66528821;0.66859639;0.67145216;0.67714667;0.67624259;0.68140286;0.68265623;0.68366361;0.68653965;
0.68542552;0.68703884;0.67640358;0.67649394;0.68748319;0.6874392;0.68726528;0.68760681;0.68760675;0.68760669;
0.68760675;0.68771172;0.68818116;0.6881811;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.6881811;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818122;0.68818122;0.68818116;
0.68818116;0.68818116;0.68818122;0.68818116;0.6881811;0.68818116;0.68818116;0.6881811;0.6881811;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;0.68818116;0.68818128;0.6881811;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;0.6881811;0.68818116;0.6881811;
0.68818122;0.6881811;0.68818116;0.68818122;0.68818122;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;0.6881811;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.6881811;0.68818116;0.68818116;0.68818104;0.68818116;0.6881811;0.68818116;0.68818116;
0.68818116;0.6881811;0.68818116;0.68818116;0.6881811;0.68818104;0.68818116;0.68818116;0.68818122;0.68818116;
0.68818116;0.6881811;0.68818116;0.68818122;0.68818116;0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;
0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.6881811;0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.6881811;0.68818122;0.6881811;0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;0.68818116;
0.6881811;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.6881811;
0.68818116;0.68818122;0.6881811;0.68818116;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;
0.68818116;0.68818122;0.68818116;0.68818116;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;0.68818116;
0.68818122;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818104;0.6881811;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.6881811;0.68818104;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818104;0.68818116;0.68818116;0.6881811;0.68818116;0.6881811;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;0.68818122;0.68818116;0.68818116;
0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.6881811;0.68818116;0.68818116;
0.68818116;0.68818122;0.6881811;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;0.68818116;
0.68818116;0.68818116;      };
     };
     float_Data @["Gender_lay_avg_sse"] {
      user_data_=NULL;
      name="Gender_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.63503224;0.59551096;0.61698532;0.69495708;0.67015815;0.62248522;0.65311694;0.63281047;0.64315879;0.67626405;
0.65893543;0.66077048;0.65555346;0.65601671;0.6457873;0.64594764;0.64664423;0.66153073;0.66153079;0.66153085;
0.66153079;0.65656811;0.65545505;0.65545499;0.65545505;0.65545499;0.65545499;0.65545499;0.65545493;0.65545499;
0.65545505;0.65545499;0.65545505;0.65545493;0.65545505;0.65545499;0.65545505;0.65545505;0.65545499;0.65545505;
0.65545499;0.65545505;0.65545505;0.65545505;0.65545499;0.65545511;0.65545505;0.65545499;0.65545505;0.65545505;
0.65545505;0.65545505;0.65545493;0.65545493;0.65545505;0.65545511;0.65545499;0.65545505;0.65545511;0.65545505;
0.65545493;0.65545505;0.65545493;0.65545499;0.65545505;0.65545505;0.65545499;0.65545505;0.65545499;0.65545499;
0.65545505;0.65545505;0.65545505;0.65545499;0.65545505;0.65545499;0.65545499;0.65545499;0.65545505;0.65545493;
0.65545499;0.65545499;0.65545505;0.65545505;0.65545493;0.65545505;0.65545499;0.65545505;0.65545493;0.65545493;
0.65545499;0.65545499;0.65545493;0.65545505;0.65545505;0.65545499;0.65545499;0.65545499;0.65545493;0.65545499;
0.65545499;0.65545499;0.65545505;0.65545499;0.65545499;0.65545499;0.65545505;0.65545499;0.65545505;0.65545499;
0.65545499;0.65545499;0.65545505;0.65545493;0.65545505;0.65545505;0.65545505;0.65545499;0.65545493;0.65545505;
0.65545505;0.65545505;0.65545493;0.65545505;0.65545505;0.65545499;0.65545505;0.65545499;0.65545499;0.65545493;
0.65545505;0.65545499;0.65545493;0.65545505;0.65545493;0.65545499;0.65545505;0.65545499;0.65545499;0.65545493;
0.65545499;0.65545511;0.65545505;0.65545505;0.65545505;0.65545505;0.65545499;0.65545499;0.65545499;0.65545505;
0.65545511;0.65545505;0.65545499;0.65545505;0.65545505;0.65545511;0.65545505;0.65545505;0.65545505;0.65545499;
0.65545505;0.65545505;0.65545505;0.65545511;0.65545505;0.65545505;0.65545499;0.65545505;0.65545505;0.65545505;
0.65545499;0.65545499;0.65545505;0.65545499;0.65545499;0.65545505;0.65545505;0.65545499;0.65545505;0.65545505;
0.65545493;0.65545505;0.65545505;0.65545505;0.65545493;0.65545505;0.65545499;0.65545499;0.65545499;0.65545505;
0.65545505;0.65545505;0.65545499;0.65545511;0.65545499;0.65545505;0.65545499;0.65545499;0.65545505;0.65545505;
0.65545499;0.65545499;0.65545505;0.65545499;0.65545499;0.65545499;0.65545499;0.65545499;0.65545493;0.65545505;
0.65545499;0.65545493;0.65545505;0.65545499;0.65545505;0.65545487;0.65545505;0.65545505;0.65545499;0.65545505;
0.65545505;0.65545493;0.65545499;0.65545505;0.65545505;0.65545499;0.65545493;0.65545499;0.65545505;0.65545511;
0.65545505;0.65545493;0.65545499;0.65545505;0.65545499;0.65545499;0.65545499;0.65545499;0.65545511;0.65545505;
0.65545499;0.65545499;0.65545505;0.65545505;0.65545505;0.65545499;0.65545505;0.65545499;0.65545505;0.65545511;
0.65545499;0.65545505;0.65545505;0.65545499;0.65545511;0.65545511;0.65545499;0.65545505;0.65545505;0.65545499;
0.65545505;0.65545499;0.65545505;0.65545499;0.65545505;0.65545505;0.65545505;0.65545499;0.65545499;0.65545505;
0.65545505;0.65545499;0.65545505;0.65545505;0.65545505;0.65545499;0.65545499;0.65545499;0.65545505;0.65545505;
0.65545493;0.65545505;0.65545505;0.65545505;0.65545493;0.65545493;0.65545505;0.65545493;0.65545505;0.65545499;
0.65545505;0.65545505;0.65545505;0.65545499;0.65545499;0.65545499;0.65545505;0.65545499;0.65545511;0.65545499;
0.65545505;0.65545499;0.65545493;0.65545505;0.65545493;0.65545505;0.65545499;0.65545499;0.65545499;0.65545493;
0.65545505;0.65545493;0.65545505;0.65545505;0.65545505;0.65545505;0.65545493;0.65545505;0.65545505;0.65545499;
0.65545505;0.65545505;0.65545505;0.65545511;0.65545493;0.65545505;0.65545499;0.65545505;0.65545499;0.65545499;
0.65545505;0.65545505;0.65545499;0.65545505;0.65545505;0.65545499;0.65545505;0.65545511;0.65545499;0.65545499;
0.65545505;0.65545505;0.65545505;0.65545493;0.65545505;0.65545505;0.65545499;0.65545499;0.65545499;0.65545499;
0.65545499;0.65545505;      };
     };
     float_Data @["Identi_lay_avg_sse"] {
      user_data_=NULL;
      name="Identi_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1.6137049;1.4684178;1.3415657;1.2725229;1.2439711;1.2003839;1.1892961;1.1652699;1.1590552;1.1632036;
1.143852;1.1335219;1.1302475;1.1277308;1.1299331;1.1296449;1.128195;1.1249766;1.1249766;1.1249766;
1.1249765;1.1230605;1.1145397;1.11454;1.11454;1.1145399;1.1145399;1.1145399;1.11454;1.11454;
1.1145399;1.11454;1.1145399;1.1145397;1.1145399;1.1145397;1.1145399;1.1145399;1.1145399;1.1145399;
1.1145399;1.1145399;1.1145399;1.1145397;1.1145396;1.11454;1.1145397;1.1145399;1.1145399;1.1145399;
1.11454;1.11454;1.1145399;1.11454;1.11454;1.11454;1.1145399;1.1145399;1.11454;1.1145399;
1.1145399;1.1145399;1.1145397;1.1145399;1.11454;1.1145397;1.1145399;1.1145399;1.1145399;1.11454;
1.1145399;1.1145399;1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.11454;1.1145399;1.11454;
1.1145399;1.1145399;1.1145399;1.1145399;1.11454;1.1145399;1.1145397;1.1145399;1.1145397;1.1145399;
1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145397;1.1145399;1.1145399;
1.11454;1.1145399;1.1145399;1.1145397;1.1145399;1.1145399;1.11454;1.1145399;1.1145397;1.1145399;
1.1145397;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145397;1.1145399;1.1145399;
1.1145397;1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.1145399;
1.1145399;1.11454;1.1145397;1.1145399;1.1145397;1.1145399;1.1145399;1.1145399;1.11454;1.11454;
1.1145399;1.1145399;1.1145397;1.11454;1.1145399;1.11454;1.1145399;1.11454;1.1145399;1.11454;
1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.11454;1.1145399;1.1145399;
1.1145399;1.1145399;1.1145399;1.11454;1.1145399;1.11454;1.1145399;1.1145399;1.1145397;1.1145399;
1.1145397;1.1145399;1.11454;1.1145399;1.1145399;1.1145397;1.1145399;1.1145399;1.11454;1.11454;
1.1145399;1.11454;1.1145399;1.1145401;1.1145397;1.11454;1.1145399;1.1145399;1.1145399;1.1145397;
1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;
1.11454;1.11454;1.1145397;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145397;1.1145399;
1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.11454;1.1145399;1.1145397;1.1145399;1.1145399;
1.1145399;1.1145399;1.1145397;1.1145397;1.1145397;1.11454;1.1145397;1.1145397;1.1145399;1.11454;
1.1145397;1.1145397;1.11454;1.1145399;1.1145399;1.1145399;1.1145397;1.1145397;1.11454;1.1145397;
1.1145399;1.1145397;1.1145399;1.1145397;1.1145401;1.11454;1.1145399;1.11454;1.1145399;1.1145399;
1.1145399;1.11454;1.1145399;1.1145397;1.11454;1.11454;1.1145397;1.1145399;1.1145397;1.1145397;
1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.1145399;1.1145399;1.11454;1.1145399;1.1145399;
1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.1145399;1.1145399;
1.1145399;1.11454;1.11454;1.1145399;1.1145397;1.11454;1.1145399;1.1145399;1.1145401;1.1145399;
1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.1145399;1.11454;1.1145399;1.11454;1.1145399;
1.1145399;1.11454;1.1145399;1.1145401;1.1145399;1.11454;1.1145399;1.1145399;1.1145399;1.1145399;
1.1145399;1.1145399;1.11454;1.11454;1.11454;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;
1.1145399;1.1145399;1.1145399;1.1145397;1.11454;1.1145399;1.1145399;1.11454;1.1145399;1.11454;
1.11454;1.11454;1.1145399;1.1145399;1.11454;1.1145399;1.1145399;1.1145399;1.1145399;1.11454;
1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.1145399;1.11454;1.11454;
1.1145399;1.1145399;      };
     };
     float_Data @["Emotio_lay_cnt_err"] {
      user_data_=NULL;
      name="Emotio_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;      };
     };
     float_Data @["Gender_lay_cnt_err"] {
      user_data_=NULL;
      name="Gender_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;18;18;18;18;18;18;18;18;
18;18;      };
     };
     float_Data @["Identi_lay_cnt_err"] {
      user_data_=NULL;
      name="Identi_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 18;18;17;16;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;15;15;15;15;15;15;15;15;
15;15;      };
     };
     float_Data @["Emotio_lay_pct_cor"] {
      user_data_=NULL;
      name="Emotio_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Gender_lay_pct_cor"] {
      user_data_=NULL;
      name="Gender_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identi_lay_pct_cor"] {
      user_data_=NULL;
      name="Identi_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0.055555582;0.1111111;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;0.16666669;
0.16666669;0.16666669;      };
     };
     float_Data @["Emotio_lay_pct_err"] {
      user_data_=NULL;
      name="Emotio_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Gender_lay_pct_err"] {
      user_data_=NULL;
      name="Gender_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Identi_lay_pct_err"] {
      user_data_=NULL;
      name="Identi_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1;1;0.94444442;0.8888889;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;0.83333331;
0.83333331;0.83333331;      };
     };
     float_Data @["Emotio_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;      };
     };
     float_Data @["Gender_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;      };
     };
     float_Data @["Identi_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.91666669;0.8611111;0.83333331;0.77777779;0.75;0.72222221;0.72222221;0.69444442;0.69444442;0.72222221;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;0.69444442;
0.69444442;0.69444442;      };
     };
     float_Data @["Emotio_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.57200575;0.57603377;0.57958126;0.58384585;0.58486789;0.58554333;0.5858466;0.58647251;0.58695352;0.58775371;
0.58761239;0.57526833;0.59357119;0.59368819;0.57649219;0.57661271;0.5858019;0.58598477;0.58598477;0.58598471;
0.58598477;0.58622432;0.58639407;0.58639401;0.58639395;0.58639395;0.58639395;0.58639401;0.58639401;0.58639389;
0.58639395;0.58639395;0.58639395;0.58639389;0.58639395;0.58639395;0.58639389;0.58639383;0.58639395;0.58639401;
0.58639389;0.58639395;0.58639389;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639389;0.58639395;
0.58639395;0.58639395;0.58639395;0.58639389;0.58639395;0.58639395;0.58639395;0.58639395;0.58639401;0.58639395;
0.58639389;0.58639395;0.58639395;0.58639389;0.58639395;0.58639395;0.58639395;0.58639401;0.58639389;0.58639401;
0.58639401;0.58639395;0.58639401;0.58639389;0.58639401;0.58639389;0.58639395;0.58639395;0.58639389;0.58639395;
0.58639389;0.58639395;0.58639395;0.58639389;0.58639395;0.58639395;0.58639389;0.58639395;0.58639395;0.58639395;
0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639389;0.58639395;0.58639395;0.58639401;
0.58639401;0.58639389;0.58639395;0.58639389;0.58639401;0.58639389;0.58639395;0.58639401;0.58639395;0.58639395;
0.58639389;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639389;0.58639395;0.58639389;0.58639401;
0.58639401;0.58639395;0.58639395;0.58639389;0.58639401;0.58639395;0.58639401;0.58639395;0.58639395;0.58639389;
0.58639389;0.58639395;0.58639401;0.58639401;0.58639389;0.58639389;0.58639395;0.58639389;0.58639389;0.58639395;
0.58639401;0.58639389;0.58639395;0.58639395;0.58639395;0.58639401;0.58639395;0.58639395;0.58639395;0.58639395;
0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639389;
0.58639401;0.58639389;0.58639401;0.58639395;0.58639395;0.58639395;0.58639389;0.58639389;0.58639395;0.58639401;
0.58639389;0.58639395;0.58639401;0.58639401;0.58639389;0.58639401;0.58639389;0.58639389;0.58639395;0.58639395;
0.58639389;0.58639395;0.58639389;0.58639389;0.58639395;0.58639389;0.58639389;0.58639395;0.58639395;0.58639401;
0.58639395;0.58639395;0.58639395;0.58639395;0.58639401;0.58639389;0.58639389;0.58639395;0.58639389;0.58639395;
0.58639401;0.58639383;0.58639383;0.58639395;0.58639389;0.58639389;0.58639389;0.58639401;0.58639395;0.58639395;
0.58639389;0.58639389;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639389;0.58639395;0.58639389;
0.58639395;0.58639389;0.58639389;0.58639401;0.58639401;0.58639389;0.58639395;0.58639395;0.58639401;0.58639401;
0.58639389;0.58639389;0.58639395;0.58639401;0.58639395;0.58639389;0.58639395;0.58639389;0.58639395;0.58639395;
0.58639395;0.58639389;0.58639395;0.58639389;0.58639389;0.58639389;0.58639395;0.58639395;0.58639395;0.58639395;
0.58639395;0.58639389;0.58639395;0.58639389;0.58639395;0.58639395;0.58639395;0.58639389;0.58639395;0.58639395;
0.58639389;0.58639395;0.58639395;0.58639401;0.58639401;0.58639389;0.58639395;0.58639395;0.58639395;0.58639395;
0.58639401;0.58639389;0.58639401;0.58639389;0.58639401;0.58639389;0.58639389;0.58639395;0.58639395;0.58639395;
0.58639395;0.58639395;0.58639389;0.58639389;0.58639389;0.58639395;0.58639383;0.58639389;0.58639395;0.58639395;
0.58639401;0.58639401;0.58639389;0.58639395;0.58639383;0.58639401;0.58639389;0.58639401;0.58639395;0.58639401;
0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639383;0.58639401;0.58639389;0.58639401;0.58639401;
0.58639401;0.58639389;0.58639389;0.58639401;0.58639389;0.58639389;0.58639401;0.58639395;0.58639395;0.58639395;
0.58639401;0.58639401;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639395;0.58639401;0.58639395;
0.58639395;0.58639395;0.58639395;0.58639401;0.58639389;0.58639395;0.58639395;0.58639389;0.58639401;0.58639395;
0.58639401;0.58639389;0.58639395;0.58639401;0.58639389;0.58639389;0.58639395;0.58639401;0.58639395;0.58639395;
0.58639401;0.58639389;      };
     };
     float_Data @["Gender_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.63808835;0.69705164;0.69958013;0.64976996;0.71159148;0.7654959;0.73164731;0.7203092;0.70830393;0.6298629;
0.65404415;0.65361524;0.65620488;0.65611756;0.66081613;0.66081703;0.66747195;0.63732064;0.63732064;0.6373207;
0.6373207;0.66761059;0.67113757;0.67113757;0.67113751;0.67113757;0.67113751;0.67113751;0.67113757;0.67113751;
0.67113751;0.67113745;0.67113757;0.67113751;0.67113751;0.67113751;0.67113751;0.67113751;0.67113757;0.67113751;
0.67113757;0.67113745;0.67113751;0.67113757;0.67113751;0.67113751;0.67113757;0.67113757;0.67113757;0.67113763;
0.67113751;0.67113751;0.67113751;0.67113751;0.67113751;0.67113745;0.67113751;0.67113757;0.67113751;0.67113739;
0.67113751;0.67113751;0.67113751;0.67113751;0.67113745;0.67113751;0.67113751;0.67113757;0.67113745;0.67113751;
0.67113745;0.67113751;0.67113751;0.67113757;0.67113757;0.67113757;0.67113757;0.67113751;0.67113745;0.67113751;
0.67113757;0.67113745;0.67113757;0.67113751;0.67113751;0.67113757;0.67113745;0.67113751;0.67113745;0.67113751;
0.67113757;0.67113757;0.67113745;0.67113757;0.67113751;0.67113751;0.67113739;0.67113751;0.67113751;0.67113751;
0.67113757;0.67113751;0.67113745;0.67113757;0.67113751;0.67113751;0.67113757;0.67113757;0.67113757;0.67113751;
0.67113757;0.67113745;0.67113757;0.67113745;0.67113757;0.67113757;0.67113757;0.67113757;0.67113751;0.67113751;
0.67113751;0.67113751;0.67113745;0.67113757;0.67113757;0.67113751;0.67113757;0.67113751;0.67113757;0.67113757;
0.67113757;0.67113745;0.67113751;0.67113751;0.67113745;0.67113739;0.67113751;0.67113751;0.67113751;0.67113751;
0.67113757;0.67113757;0.67113757;0.67113739;0.67113751;0.67113757;0.67113751;0.67113751;0.67113745;0.67113751;
0.67113757;0.67113745;0.67113763;0.67113745;0.67113751;0.67113757;0.67113757;0.67113745;0.67113757;0.67113751;
0.67113745;0.67113757;0.67113751;0.67113751;0.67113757;0.67113757;0.67113751;0.67113757;0.67113751;0.67113757;
0.67113751;0.67113745;0.67113751;0.67113745;0.67113751;0.67113757;0.67113745;0.67113751;0.67113751;0.67113745;
0.67113757;0.67113757;0.67113745;0.67113745;0.67113751;0.67113751;0.67113757;0.67113757;0.67113751;0.67113751;
0.67113751;0.67113751;0.67113751;0.67113751;0.67113757;0.67113751;0.67113757;0.67113751;0.67113757;0.67113751;
0.67113757;0.67113757;0.67113757;0.67113751;0.67113757;0.67113745;0.67113745;0.67113751;0.67113757;0.67113751;
0.67113757;0.67113745;0.67113757;0.67113757;0.67113751;0.67113751;0.67113751;0.67113757;0.67113757;0.67113757;
0.67113751;0.67113751;0.67113757;0.67113751;0.67113757;0.67113757;0.67113745;0.67113745;0.67113751;0.67113739;
0.67113751;0.67113751;0.67113757;0.67113751;0.67113751;0.67113757;0.67113751;0.67113757;0.67113757;0.67113757;
0.67113751;0.67113751;0.67113751;0.67113751;0.67113757;0.67113757;0.67113751;0.67113745;0.67113745;0.67113757;
0.67113751;0.67113757;0.67113751;0.67113745;0.67113751;0.67113751;0.67113751;0.67113757;0.67113745;0.67113751;
0.67113757;0.67113751;0.67113757;0.67113757;0.67113751;0.67113751;0.67113751;0.67113751;0.67113745;0.67113757;
0.67113751;0.67113751;0.67113757;0.67113751;0.67113757;0.67113751;0.67113757;0.67113757;0.67113751;0.67113751;
0.67113757;0.67113751;0.67113745;0.67113751;0.67113745;0.67113751;0.67113757;0.67113751;0.67113745;0.67113751;
0.67113757;0.67113757;0.67113757;0.67113745;0.67113751;0.67113757;0.67113751;0.67113757;0.67113757;0.67113751;
0.67113757;0.67113745;0.67113751;0.67113745;0.67113763;0.67113757;0.67113751;0.67113745;0.67113757;0.67113751;
0.67113757;0.67113751;0.67113757;0.67113757;0.67113751;0.67113757;0.67113757;0.67113751;0.67113757;0.67113745;
0.67113745;0.67113751;0.67113757;0.67113745;0.67113745;0.67113745;0.67113751;0.67113751;0.67113751;0.67113751;
0.67113757;0.67113751;0.67113751;0.67113751;0.67113751;0.67113751;0.67113751;0.67113757;0.67113751;0.67113751;
0.67113757;0.67113757;0.67113751;0.67113751;0.67113751;0.67113757;0.67113757;0.67113745;0.67113751;0.67113751;
0.67113751;0.67113757;      };
     };
     float_Data @["Identi_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.17136328;0.17075746;0.17339595;0.17603329;0.16396162;0.16561848;0.16572756;0.16710876;0.16811082;0.16902484;
0.16948007;0.18038192;0.18066055;0.18063858;0.16967788;0.16969907;0.16995929;0.1701095;0.17010951;0.17010951;
0.17010948;0.17032304;0.18190898;0.18190897;0.18190899;0.18190898;0.18190898;0.18190898;0.18190898;0.18190898;
0.18190898;0.18190898;0.18190898;0.18190898;0.18190898;0.18190897;0.18190898;0.18190898;0.18190898;0.18190898;
0.18190899;0.18190897;0.18190895;0.18190898;0.18190899;0.18190898;0.18190898;0.18190897;0.18190897;0.18190897;
0.18190899;0.18190898;0.18190899;0.18190899;0.18190898;0.18190899;0.18190898;0.18190899;0.18190898;0.18190897;
0.18190899;0.18190895;0.18190898;0.18190899;0.18190897;0.18190897;0.18190899;0.18190899;0.18190897;0.18190897;
0.18190899;0.18190898;0.18190898;0.18190898;0.18190897;0.18190898;0.18190898;0.18190898;0.18190898;0.18190897;
0.18190898;0.18190898;0.18190898;0.18190899;0.18190898;0.18190898;0.18190898;0.18190898;0.18190897;0.18190898;
0.18190898;0.18190898;0.18190898;0.18190898;0.18190897;0.18190897;0.18190897;0.18190898;0.18190899;0.18190898;
0.18190898;0.18190897;0.18190897;0.18190899;0.18190898;0.18190897;0.18190897;0.18190899;0.18190899;0.18190898;
0.18190898;0.18190898;0.18190898;0.18190899;0.18190898;0.18190898;0.18190898;0.18190898;0.18190899;0.18190897;
0.18190897;0.18190898;0.18190895;0.18190899;0.18190897;0.18190898;0.18190895;0.18190899;0.18190898;0.18190898;
0.18190898;0.18190898;0.18190898;0.18190897;0.18190897;0.18190897;0.18190898;0.18190899;0.18190899;0.18190898;
0.18190897;0.18190898;0.18190899;0.18190898;0.18190898;0.18190899;0.18190898;0.18190895;0.18190898;0.18190899;
0.18190898;0.18190898;0.18190898;0.18190898;0.18190898;0.18190898;0.18190897;0.18190897;0.18190898;0.18190898;
0.18190897;0.18190898;0.18190897;0.18190897;0.18190899;0.18190898;0.18190898;0.18190898;0.18190897;0.18190897;
0.18190897;0.18190897;0.18190898;0.18190898;0.18190898;0.18190897;0.18190898;0.18190899;0.18190897;0.18190898;
0.18190898;0.18190898;0.18190899;0.18190895;0.18190898;0.18190899;0.18190899;0.18190898;0.18190898;0.18190897;
0.18190899;0.18190897;0.18190897;0.18190898;0.18190898;0.18190901;0.18190899;0.18190899;0.18190898;0.18190899;
0.18190898;0.18190898;0.18190898;0.18190895;0.18190899;0.18190897;0.18190897;0.18190898;0.18190898;0.18190898;
0.18190899;0.18190898;0.18190898;0.18190898;0.18190897;0.18190898;0.18190897;0.18190899;0.18190898;0.18190899;
0.18190898;0.18190899;0.18190899;0.18190897;0.18190897;0.18190897;0.18190897;0.18190899;0.18190898;0.18190897;
0.18190897;0.18190898;0.18190897;0.18190898;0.18190897;0.18190899;0.18190897;0.18190899;0.18190898;0.18190898;
0.18190899;0.18190898;0.18190899;0.18190897;0.18190898;0.18190897;0.18190899;0.18190898;0.18190898;0.18190899;
0.18190898;0.18190898;0.18190897;0.18190899;0.18190897;0.18190898;0.18190899;0.18190898;0.18190897;0.18190897;
0.18190898;0.18190898;0.18190897;0.18190898;0.18190898;0.18190898;0.18190898;0.18190898;0.18190899;0.18190899;
0.18190898;0.18190898;0.18190901;0.18190898;0.18190898;0.18190897;0.18190898;0.18190898;0.18190897;0.18190898;
0.18190898;0.18190897;0.18190899;0.18190898;0.18190899;0.18190899;0.18190898;0.18190898;0.18190898;0.18190898;
0.18190898;0.18190899;0.18190898;0.18190897;0.18190898;0.18190898;0.18190898;0.18190898;0.18190899;0.18190898;
0.18190899;0.18190898;0.18190897;0.18190897;0.18190899;0.18190899;0.18190898;0.18190898;0.18190899;0.18190898;
0.18190898;0.18190897;0.18190899;0.18190898;0.18190898;0.18190899;0.18190898;0.18190897;0.18190897;0.18190897;
0.18190897;0.18190897;0.18190898;0.18190898;0.18190898;0.18190898;0.18190898;0.18190897;0.18190897;0.18190898;
0.18190898;0.18190897;0.18190898;0.18190898;0.18190898;0.18190897;0.18190897;0.18190898;0.18190898;0.18190898;
0.18190897;0.18190898;0.18190899;0.18190899;0.18190898;0.18190899;0.18190899;0.18190897;0.18190897;0.18190898;
0.18190897;0.18190898;      };
     };
     float_Data @["net_avg_cos_diff"] {
      user_data_=NULL;
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.99197131;0.9993369;0.99907517;0.99907863;0.99905968;0.99930298;0.99910533;0.99883938;0.99914402;0.99934316;
0.99918747;0.99908066;0.99917549;0.99892235;0.99940997;0.99939537;0.99922156;0.99925423;0.99957967;0.99932075;
0.99924046;0.99921352;0.99914813;0.99903417;0.99905598;0.99929494;0.99904782;0.99942374;0.99912179;0.99909759;
0.99924076;0.99935222;0.99949372;0.9990747;0.99943805;0.9994117;0.99895883;0.99912959;0.99897861;0.9990676;
0.99935693;0.99930221;0.99936938;0.99936402;0.99928689;0.9991706;0.99901527;0.99929798;0.99912769;0.99928695;
0.99918926;0.9990353;0.99882454;0.99907029;0.99918419;0.99887806;0.99937886;0.99938351;0.99930602;0.99960095;
0.99932754;0.99906361;0.99912304;0.99916214;0.99903381;0.99935317;0.99923927;0.99933219;0.99924672;0.99909711;
0.99907279;0.99912441;0.99890065;0.99928451;0.99914575;0.99929988;0.99905747;0.99909621;0.99929196;0.99937004;
0.99923187;0.99938649;0.9990207;0.99879837;0.99935085;0.99878049;0.99920148;0.99936938;0.99940789;0.99935597;
0.99905598;0.99939334;0.99921936;0.99924493;0.9992398;0.99935681;0.99911565;0.99926215;0.99946392;0.99944168;
0.99908382;0.99897641;0.99910039;0.99892014;0.9991774;0.99928313;0.99918395;0.99943829;0.99931103;0.99938416;
0.99892163;0.99941707;0.99902767;0.99928421;0.99916035;0.99902374;0.99915379;0.99930394;0.99915874;0.99883884;
0.99961555;0.99919105;0.99912834;0.99930394;0.99938053;0.99958432;0.99930859;0.99919891;0.99955928;0.99892086;
0.99919617;0.99914658;0.99928653;0.99910092;0.99933505;0.99940109;0.99915051;0.99903935;0.99888927;0.99916446;
0.99936348;0.99911118;0.99906868;0.9991917;0.99913776;0.99944699;0.99908203;0.99929166;0.9996053;0.99971294;
0.9991492;0.99925637;0.99922192;0.99927402;0.9990977;0.99913144;0.99945712;0.99903703;0.99946904;0.99918324;
0.99941945;0.9991616;0.99909675;0.99930739;0.99924225;0.99939018;0.99933094;0.99899292;0.9994421;0.99885231;
0.99907631;0.99908745;0.99891728;0.99914575;0.9995327;0.9992702;0.99923676;0.99946815;0.99907506;0.9992044;
0.99920601;0.99929935;0.99925929;0.99921679;0.99931484;0.99917465;0.99919957;0.99917388;0.99941009;0.99912465;
0.99920028;0.99885505;0.9990046;0.99901748;0.99940234;0.99918866;0.99902523;0.99898529;0.99939036;0.9987042;
0.99908584;0.99883705;0.99919862;0.99918652;0.99918789;0.99910408;0.99891144;0.99908149;0.99927741;0.99922824;
0.99920166;0.9992125;0.99884713;0.99927098;0.99925995;0.99898815;0.99887806;0.99892956;0.99959648;0.99914986;
0.9991383;0.99910343;0.99921662;0.99896502;0.99914962;0.99911243;0.99926144;0.99911952;0.99946046;0.99925041;
0.99926472;0.99916798;0.99928164;0.99944919;0.99942029;0.99897754;0.99888855;0.99879193;0.99926674;0.9991082;
0.99933982;0.99884933;0.99910057;0.99930966;0.99934125;0.99942374;0.99885821;0.99896741;0.99934864;0.99912274;
0.99934548;0.999035;0.99938488;0.99951375;0.99928349;0.99947006;0.99922097;0.99913692;0.99914604;0.99932033;
0.99937004;0.99919879;0.99921483;0.99907851;0.99911541;0.99903899;0.99927986;0.9993515;0.99927068;0.99946141;
0.99942261;0.999017;0.99900943;0.99934292;0.99925083;0.99880081;0.99923396;0.99932247;0.99925941;0.99905765;
0.99911094;0.99917018;0.99928498;0.99911243;0.99909049;0.99875069;0.99906594;0.99920493;0.99908119;0.99889511;
0.99929184;0.99921364;0.99942809;0.99904388;0.99894357;0.99974239;0.9991098;0.99925816;0.9992469;0.9991985;
0.99934894;0.99901825;0.99926442;0.99924248;0.99932808;0.99889553;0.99885488;0.99945462;0.99928582;0.99939686;
0.99937123;0.99931836;0.99903679;0.99921143;0.99894673;0.99924362;0.9993549;0.9994421;0.99936771;0.99932128;
0.99934959;0.99915534;0.99911678;0.99925792;0.99910712;0.99914277;0.99940044;0.99947524;0.99909198;0.99910939;
0.99943912;0.99904656;0.9991706;0.99925637;0.9987815;0.99946976;0.99931443;0.99917287;0.99944234;0.99913692;
0.99910516;0.99883246;0.99924552;0.99902111;0.99929535;0.9993301;0.99912;0.99924213;0.998891;0.99908733;
0.99956584;0.99943894;      };
     };
     float_Data @["net_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.30797976;0.33120435;0.44437772;0.37423122;0.46845648;0.38608131;0.38577947;0.32076132;0.29727182;0.52284044;
0.42871806;0.41629004;0.39546472;0.28979254;0.50518638;0.6041435;0.55453819;0.43738148;0.41254675;0.50896394;
0.25591937;0.41159707;0.28468591;0.35838801;0.4072043;0.44347423;0.35969639;0.43345606;0.3445147;0.34190324;
0.44242281;0.33065075;0.47102568;0.36822337;0.57617068;0.51738816;0.27142233;0.49226537;0.61871529;0.31156144;
0.41934654;0.503016;0.47908387;0.58241326;0.41067898;0.38122949;0.49089846;0.26314723;0.36070243;0.52933776;
0.37980771;0.30517974;0.33192888;0.38796127;0.44812837;0.2512891;0.47754034;0.38616526;0.45975506;0.56987351;
0.48161778;0.3478207;0.2366212;0.23332888;0.28988728;0.48688734;0.48764509;0.44676256;0.46530735;0.4169625;
0.49757916;0.58065867;0.24868399;0.48851335;0.34042183;0.45120472;0.30576262;0.42186511;0.47006088;0.46306834;
0.45087263;0.50502133;0.40691039;0.19686653;0.55050659;0.25995442;0.40815505;0.30833229;0.38381299;0.49786112;
0.4299131;0.42785028;0.34938884;0.45892996;0.3587707;0.35880905;0.53602344;0.45799574;0.44728205;0.47921404;
0.42464855;0.41751489;0.34522915;0.37479636;0.37175557;0.34461117;0.37303007;0.47110218;0.57253468;0.37527788;
0.37253648;0.49265707;0.42485771;0.40068406;0.48655048;0.44326866;0.41605169;0.37834522;0.38977516;0.39865857;
0.48726571;0.32186773;0.28954157;0.48813269;0.42787206;0.49520889;0.34104216;0.39083016;0.48363754;0.4627772;
0.46374607;0.36801657;0.44070318;0.286856;0.46365792;0.35812292;0.27288786;0.47669104;0.45501459;0.28048971;
0.41807416;0.36029169;0.32535875;0.31651846;0.40333128;0.49797493;0.34341422;0.42248932;0.44019639;0.40972245;
0.37203214;0.3767994;0.374183;0.43847027;0.29141447;0.33380786;0.54617453;0.46390164;0.56418967;0.47355282;
0.43662903;0.5358007;0.43794802;0.34838283;0.43787259;0.48671812;0.43423814;0.38273847;0.46357039;0.28511465;
0.30932993;0.31696436;0.43770558;0.36987656;0.51511407;0.3586129;0.49575344;0.37407699;0.35135296;0.3541795;
0.44219458;0.43919599;0.42235014;0.41450405;0.56155694;0.40765345;0.42692816;0.36172444;0.54168457;0.37751091;
0.42456266;0.37800756;0.31238678;0.38886037;0.47845685;0.43114355;0.3011896;0.34533799;0.36999875;0.36044255;
0.37280992;0.32792366;0.49330372;0.3998569;0.36942375;0.44168502;0.18829498;0.4104996;0.47221673;0.40050679;
0.401095;0.40719527;0.35772967;0.35731202;0.51684046;0.29138905;0.2614046;0.41338852;0.47389004;0.40929276;
0.43484661;0.25978902;0.50495362;0.34443414;0.3760969;0.37033787;0.45738539;0.30739987;0.4698346;0.41054469;
0.43537658;0.23908319;0.37959072;0.361388;0.4630841;0.43308088;0.29241538;0.35771048;0.56466091;0.29238161;
0.39448467;0.25436893;0.51811367;0.48243776;0.50511813;0.43886524;0.26037517;0.38455528;0.39842075;0.44376016;
0.46947968;0.31088841;0.4446159;0.46307051;0.38694564;0.42276496;0.49360222;0.31224331;0.44153973;0.50752962;
0.52762616;0.41029882;0.37507147;0.32173905;0.52400863;0.4181495;0.35935202;0.47302401;0.51918519;0.52563363;
0.53549379;0.35474646;0.32819262;0.4752512;0.40037838;0.3723599;0.26242301;0.37159747;0.42293537;0.31033781;
0.43845147;0.30966836;0.41050285;0.38630402;0.43843064;0.25877801;0.4992708;0.43869963;0.53837943;0.25513205;
0.45314801;0.45774317;0.41877761;0.38207594;0.27944475;0.50736934;0.41055796;0.38420808;0.400114;0.44766003;
0.57268995;0.3348923;0.37106693;0.42369041;0.50107646;0.33717856;0.36549279;0.54238302;0.41131032;0.48042202;
0.43652436;0.34206545;0.4059431;0.26859143;0.36941797;0.32086718;0.48053536;0.36341211;0.41216502;0.42494869;
0.48840481;0.45440054;0.53706443;0.37672293;0.3420108;0.28098744;0.29068914;0.46700478;0.40931839;0.36205813;
0.57301039;0.32132709;0.38361681;0.35807365;0.26637447;0.45277807;0.46451914;0.45236859;0.330042;0.37455574;
0.326388;0.34752589;0.33409604;0.35753652;0.466712;0.48224676;0.44654641;0.35978961;0.43192324;0.49014485;
0.4760561;0.54676652;      };
     };
     float_Data @["net_avg_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1.9019957e-07;-4.1919794e-08;2.4182214e-08;2.1657664e-08;4.9794465e-08;-2.8775053e-09;8.412168e-08;7.1152928e-09;1.8846565e-08;-2.3081165e-08;
6.073364e-08;1.0462429e-08;-2.6723166e-09;4.3400714e-08;6.333633e-08;-7.7555056e-09;1.5439412e-08;6.7218451e-08;-3.3196596e-08;2.6226557e-08;
6.7077039e-08;-1.4576546e-08;3.0695205e-08;-4.0120702e-09;2.2603112e-08;7.9853685e-08;-1.0246377e-08;3.5961708e-08;3.9119698e-08;-1.0851328e-08;
-1.0326744e-09;7.5837207e-08;2.4868051e-08;-2.22634e-08;2.8470547e-08;7.6263518e-08;-1.9490995e-08;6.7439665e-10;6.7350697e-08;6.814779e-09;
4.7868042e-08;3.2212526e-08;-5.9681233e-09;2.8783935e-08;-2.2276558e-09;2.1732301e-08;5.0410151e-08;5.0549271e-09;3.3473903e-08;2.6839549e-08;
-3.2527951e-09;4.3950099e-08;1.9937637e-08;2.1896938e-08;2.4057851e-08;1.7122662e-08;2.0527106e-10;4.6804605e-08;3.6954493e-08;1.5975527e-08;
1.2689529e-08;6.4090599e-08;-2.6882065e-08;2.8922813e-08;1.8495431e-08;6.2708374e-08;-3.6784915e-08;2.3987347e-08;7.4371457e-08;-1.4396341e-08;
3.8235967e-08;3.8149417e-09;1.7071393e-08;3.7841112e-08;3.2723065e-08;2.4088829e-08;-5.8462541e-09;7.9112951e-08;-1.8734013e-08;3.7072706e-08;
-7.1300593e-10;8.1891294e-08;1.6376873e-08;-9.6990282e-09;2.7586733e-08;4.9769162e-09;4.7594465e-08;4.4042338e-08;1.557575e-08;7.178607e-09;
1.0957519e-08;1.0911614e-08;3.2927232e-08;2.44359e-08;2.0905219e-08;5.8263481e-08;1.4611593e-08;-4.8179216e-10;3.649906e-08;-1.2154594e-08;
3.5765439e-08;6.6464736e-08;-2.3165699e-08;4.6362281e-08;8.9407592e-09;5.1506678e-08;-9.8170023e-09;6.2225666e-08;-8.9309005e-09;-3.369242e-09;
7.7357818e-08;-5.4389395e-09;-1.6340699e-09;2.2294049e-08;5.0208588e-08;1.1419577e-08;3.529707e-08;5.8998396e-08;-1.5401618e-08;2.2301146e-08;
6.2825308e-08;1.9644395e-08;1.8514362e-08;-3.6707767e-08;8.5576566e-08;-2.4026919e-08;6.3784981e-08;-9.1378851e-09;4.6734605e-10;4.9368431e-08;
2.4588687e-08;2.1234106e-08;2.3826622e-08;4.950595e-08;2.4672714e-08;2.0963531e-08;-1.3161115e-08;1.2611157e-08;4.9186866e-08;5.6658425e-09;
-1.8440258e-09;7.6929929e-08;-1.144301e-08;1.9427864e-08;-2.499525e-09;8.1761385e-08;-2.3171472e-08;6.6691392e-08;-7.2491084e-09;-2.1336273e-09;
4.6284089e-08;9.0849044e-09;9.0974801e-09;4.8576137e-08;1.8563414e-08;-4.8780668e-09;3.989415e-08;2.4659142e-08;4.0597293e-08;6.2217993e-08;
1.7451704e-08;-2.8888357e-08;7.3559292e-08;-4.1869788e-09;2.3620901e-08;2.5430831e-08;1.1089528e-08;3.4180381e-08;4.9470504e-08;-1.9075621e-08;
6.2760016e-08;-1.1608923e-08;2.3666177e-08;4.6161102e-08;1.5237318e-09;5.1993489e-08;-1.7787134e-08;2.1485461e-08;6.4150413e-08;1.4490613e-08;
-1.3607555e-08;2.3680618e-08;7.2877228e-08;-3.9357438e-08;5.2867229e-08;2.2556499e-08;-1.5860072e-09;2.0972697e-08;2.7366784e-08;4.6480878e-08;
6.0610027e-08;1.5340598e-08;5.9570637e-10;-2.9140637e-09;3.754252e-08;2.3398263e-08;1.8883537e-08;3.2879907e-08;4.0036994e-08;-1.0153349e-08;
2.1369269e-08;1.9764643e-08;7.6663453e-10;8.4494935e-08;-4.0960082e-08;3.623359e-08;5.227129e-08;1.0249781e-08;1.2412788e-08;-2.5374998e-09;
4.7236103e-08;3.5084248e-08;2.0841684e-08;-1.6462662e-08;8.2349757e-08;-3.7461032e-08;1.748578e-08;4.7688136e-08;1.2555479e-08;3.5115178e-08;
2.3576998e-08;-7.5118329e-09;6.3392378e-08;7.9297831e-09;9.0235268e-09;6.4886777e-08;2.4432939e-08;3.4558745e-10;4.9587456e-08;-2.1829356e-09;
-1.2642656e-09;1.6688428e-08;3.4124522e-08;2.1008052e-08;2.4596581e-08;-1.385871e-09;4.3457565e-08;8.4071683e-09;4.0543046e-08;-6.3589281e-09;
2.2145695e-08;1.7197195e-08;5.1456009e-08;1.2874478e-08;6.9691104e-08;2.3762661e-08;-1.2582007e-09;9.3441237e-09;5.3421267e-08;5.1809064e-09;
4.3436511e-08;1.9170983e-08;-7.1563528e-09;4.9499278e-08;-2.9591278e-09;1.082795e-08;5.0489106e-08;6.8711565e-09;4.8757968e-08;1.3650915e-08;
4.5504166e-08;2.268877e-08;-9.6628128e-09;-5.2776383e-09;3.9151637e-08;1.0496112e-08;4.5872554e-08;2.4852117e-08;3.8926366e-08;1.4340969e-08;
5.1978891e-08;-1.6495987e-08;3.2233864e-08;2.5052676e-08;5.9584963e-08;-3.5101726e-09;-1.9734211e-08;5.8626256e-08;1.0713998e-08;5.0316437e-08;
4.980516e-09;1.9176383e-08;-1.4527981e-08;3.4313604e-08;2.3645429e-08;2.9840592e-08;1.3448298e-08;6.1015015e-08;2.3454394e-09;2.9702985e-08;
-6.3406624e-10;3.6939355e-08;2.2997186e-08;-3.1707197e-09;3.0541091e-08;1.3777164e-08;5.9994086e-08;4.0494808e-08;-3.3605414e-08;2.3975e-08;
5.3337185e-08;7.6451876e-09;3.3754723e-08;-1.6915985e-09;5.0809593e-08;2.0083762e-08;4.6012172e-08;-2.2389564e-08;8.5071783e-08;-1.2099854e-08;
1.1167026e-08;6.3903116e-08;-8.5305123e-09;-7.1816535e-09;4.6172989e-08;5.0652918e-08;-1.8238396e-08;2.1079538e-08;1.0341371e-08;4.8134947e-08;
1.304186e-08;3.6730285e-08;2.717946e-08;-3.2863265e-09;3.2720468e-08;1.8224084e-08;3.1047303e-08;5.5863691e-08;2.8845667e-08;-1.6293633e-08;
1.5984803e-08;7.1067978e-09;3.4217301e-08;2.090666e-08;3.00818e-08;5.5335494e-08;-6.5433152e-09;2.417827e-08;-5.0202464e-09;4.6311229e-08;
-5.1213647e-09;4.5375767e-08;7.659188e-09;6.4356612e-08;2.4774966e-08;-3.0746214e-08;3.6454228e-08;6.4523185e-08;-3.251542e-08;3.791979e-08;
3.7572065e-08;2.7500862e-08;      };
     };
     float_Data @["Emotions_avg_cos_diff"] {
      user_data_=NULL;
      name="Emotions_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.28396896;0.26797894;0.27231422;0.27622834;0.27951741;0.27921683;0.2805599;0.28068444;0.28114736;0.2822108;
0.28174126;0.28042701;0.28174159;0.2816768;0.28167856;0.2817899;0.26636413;0.26659986;0.26659986;0.26659986;
0.26659986;0.26680148;0.2666842;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;
0.26668426;0.2666842;0.26668426;0.26668423;0.26668417;0.2666842;0.26668423;0.2666842;0.2666842;0.26668423;
0.26668423;0.2666842;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;0.26668423;0.2666842;
0.26668423;0.2666842;0.26668423;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;
0.2666842;0.2666842;0.26668423;0.26668423;0.26668423;0.2666842;0.26668423;0.26668417;0.26668423;0.2666842;
0.26668417;0.26668423;0.26668417;0.2666842;0.26668423;0.26668423;0.26668423;0.26668423;0.26668423;0.26668423;
0.2666842;0.26668423;0.26668423;0.2666842;0.26668423;0.26668423;0.26668417;0.2666842;0.2666842;0.2666842;
0.2666842;0.2666842;0.2666842;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;
0.26668423;0.2666842;0.26668426;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;0.2666842;
0.2666842;0.2666842;0.26668423;0.2666842;0.2666842;0.26668417;0.2666842;0.2666842;0.2666842;0.2666842;
0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;0.26668423;0.26668423;
0.2666842;0.2666842;0.2666842;0.26668423;0.26668417;0.2666842;0.2666842;0.2666842;0.26668426;0.26668423;
0.26668423;0.2666842;0.2666842;0.2666842;0.26668423;0.26668423;0.26668417;0.26668423;0.26668423;0.2666842;
0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;0.2666842;0.26668423;0.26668417;0.2666842;
0.26668423;0.2666842;0.2666842;0.2666842;0.26668423;0.26668423;0.26668423;0.26668426;0.26668423;0.26668423;
0.26668417;0.2666842;0.26668426;0.26668423;0.2666842;0.2666842;0.26668423;0.26668417;0.2666842;0.26668423;
0.26668423;0.2666842;0.26668426;0.26668417;0.26668423;0.2666842;0.2666842;0.2666842;0.26668423;0.26668423;
0.2666842;0.26668417;0.26668423;0.2666842;0.26668423;0.26668423;0.26668423;0.2666842;0.2666842;0.2666842;
0.26668423;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;0.2666842;0.2666842;0.26668417;
0.26668423;0.26668423;0.2666842;0.26668423;0.2666842;0.26668423;0.2666842;0.26668417;0.26668423;0.26668423;
0.2666842;0.2666842;0.2666842;0.26668423;0.26668423;0.26668423;0.26668423;0.2666842;0.2666842;0.2666842;
0.26668423;0.2666842;0.26668423;0.26668423;0.26668417;0.26668423;0.2666842;0.26668417;0.2666842;0.2666842;
0.2666842;0.26668423;0.26668423;0.2666842;0.26668423;0.26668423;0.2666842;0.26668423;0.26668423;0.2666842;
0.2666842;0.26668423;0.26668423;0.26668423;0.26668423;0.2666842;0.26668423;0.2666842;0.2666842;0.26668423;
0.26668423;0.26668423;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;
0.26668423;0.2666842;0.2666842;0.26668423;0.26668417;0.2666842;0.26668423;0.26668423;0.26668423;0.26668423;
0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.26668426;0.2666842;0.26668423;0.2666842;0.2666842;
0.2666842;0.26668423;0.26668423;0.2666842;0.2666842;0.2666842;0.2666842;0.26668423;0.2666842;0.2666842;
0.26668423;0.26668423;0.2666842;0.2666842;0.2666842;0.26668423;0.26668423;0.2666842;0.2666842;0.26668423;
0.26668423;0.2666842;0.2666842;0.26668423;0.2666842;0.26668417;0.26668423;0.2666842;0.26668423;0.26668417;
0.2666842;0.26668417;0.26668423;0.26668423;0.2666842;0.2666842;0.26668417;0.2666842;0.2666842;0.26668423;
0.2666842;0.2666842;0.2666842;0.26668423;0.2666842;0.26668423;0.2666842;0.26668423;0.2666842;0.2666842;
0.26668423;0.26668423;0.2666842;0.2666842;0.26668423;0.26668423;0.26668417;0.2666842;0.26668423;0.2666842;
0.26668423;0.2666842;      };
     };
     float_Data @["Gender_avg_cos_diff"] {
      user_data_=NULL;
      name="Gender_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] -0.01627185;-3.3113692e-09;-9.9341078e-09;3.3113692e-09;-1.9868216e-08;1.3245477e-08;0;0;3.9736431e-08;0;
-6.6227384e-09;-1.9868216e-08;0;0;0;0;1.9868216e-08;0;-1.9868216e-08;0;
-1.3245477e-08;0;1.9868216e-08;2.6490953e-08;1.9868216e-08;2.6490953e-08;0;1.3245477e-08;1.9868216e-08;1.9868216e-08;
6.6227384e-09;1.9868216e-08;1.3245477e-08;2.6490953e-08;6.6227384e-09;6.6227384e-09;1.9868216e-08;1.3245477e-08;1.3245477e-08;1.9868216e-08;
3.3113693e-08;6.6227384e-09;0;3.3113693e-08;2.6490953e-08;1.3245477e-08;1.9868216e-08;1.9868216e-08;6.6227384e-09;6.6227384e-09;
1.3245477e-08;1.9868216e-08;6.6227384e-09;1.9868216e-08;2.6490953e-08;3.3113693e-08;0;1.9868216e-08;1.9868216e-08;1.9868216e-08;
2.6490953e-08;0;1.3245477e-08;1.9868216e-08;1.9868216e-08;1.9868216e-08;2.6490953e-08;6.6227384e-09;1.9868216e-08;2.6490953e-08;
2.6490953e-08;6.6227384e-09;1.3245477e-08;2.6490953e-08;1.9868216e-08;1.9868216e-08;6.6227384e-09;0;6.6227384e-09;6.6227384e-09;
6.6227384e-09;-6.6227384e-09;2.6490953e-08;2.6490953e-08;0;0;1.3245477e-08;1.9868216e-08;2.6490953e-08;2.6490953e-08;
3.3113693e-08;1.9868216e-08;1.9868216e-08;0;1.9868216e-08;2.6490953e-08;6.6227384e-09;2.6490953e-08;1.3245477e-08;0;
6.6227384e-09;1.3245477e-08;1.9868216e-08;2.6490953e-08;1.9868216e-08;1.3245477e-08;1.3245477e-08;1.3245477e-08;2.6490953e-08;1.3245477e-08;
1.3245477e-08;-6.6227384e-09;6.6227384e-09;1.9868216e-08;1.9868216e-08;3.3113693e-08;6.6227384e-09;6.6227384e-09;6.6227384e-09;1.3245477e-08;
6.6227384e-09;1.9868216e-08;1.9868216e-08;1.3245477e-08;6.6227384e-09;2.6490953e-08;2.6490953e-08;1.9868216e-08;0;1.3245477e-08;
1.9868216e-08;1.9868216e-08;0;1.9868216e-08;6.6227384e-09;6.6227384e-09;2.6490953e-08;1.3245477e-08;6.6227384e-09;2.6490953e-08;
1.9868216e-08;6.6227384e-09;1.9868216e-08;2.6490953e-08;1.3245477e-08;0;1.3245477e-08;1.9868216e-08;2.6490953e-08;1.9868216e-08;
6.6227384e-09;1.3245477e-08;3.3113693e-08;1.3245477e-08;1.3245477e-08;2.6490953e-08;6.6227384e-09;1.3245477e-08;1.9868216e-08;3.3113693e-08;
1.9868216e-08;0;1.9868216e-08;0;6.6227384e-09;3.3113693e-08;1.3245477e-08;1.9868216e-08;1.3245477e-08;1.9868216e-08;
6.6227384e-09;1.9868216e-08;2.6490953e-08;1.3245477e-08;0;1.3245477e-08;1.9868216e-08;1.3245477e-08;1.3245477e-08;6.6227384e-09;
0;0;1.9868216e-08;1.9868216e-08;2.6490953e-08;1.9868216e-08;1.9868216e-08;0;2.6490953e-08;2.6490953e-08;
1.3245477e-08;1.3245477e-08;2.6490953e-08;0;0;2.6490953e-08;0;2.6490953e-08;1.9868216e-08;0;
2.6490953e-08;1.9868216e-08;2.6490953e-08;6.6227384e-09;0;2.6490953e-08;1.3245477e-08;1.9868216e-08;2.6490953e-08;6.6227384e-09;
2.6490953e-08;0;1.9868216e-08;2.6490953e-08;1.9868216e-08;1.9868216e-08;2.6490953e-08;3.3113693e-08;1.3245477e-08;1.9868216e-08;
0;-6.6227384e-09;2.6490953e-08;1.9868216e-08;1.9868216e-08;1.3245477e-08;6.6227384e-09;1.9868216e-08;2.6490953e-08;1.9868216e-08;
0;1.3245477e-08;2.6490953e-08;6.6227384e-09;1.9868216e-08;1.3245477e-08;1.9868216e-08;0;6.6227384e-09;6.6227384e-09;
1.3245477e-08;1.9868216e-08;0;0;6.6227384e-09;0;1.9868216e-08;1.3245477e-08;6.6227384e-09;1.9868216e-08;
1.9868216e-08;2.6490953e-08;6.6227384e-09;1.3245477e-08;2.6490953e-08;1.3245477e-08;1.3245477e-08;6.6227384e-09;1.9868216e-08;1.3245477e-08;
1.9868216e-08;2.6490953e-08;2.6490953e-08;1.3245477e-08;6.6227384e-09;1.3245477e-08;6.6227384e-09;1.3245477e-08;1.3245477e-08;6.6227384e-09;
1.9868216e-08;1.3245477e-08;1.3245477e-08;2.6490953e-08;1.9868216e-08;1.9868216e-08;2.6490953e-08;1.9868216e-08;1.3245477e-08;6.6227384e-09;
0;1.9868216e-08;0;1.9868216e-08;2.6490953e-08;2.6490953e-08;2.6490953e-08;1.3245477e-08;6.6227384e-09;1.9868216e-08;
1.3245477e-08;0;0;2.6490953e-08;2.6490953e-08;2.6490953e-08;2.6490953e-08;1.3245477e-08;2.6490953e-08;1.3245477e-08;
0;1.9868216e-08;2.6490953e-08;0;0;1.3245477e-08;1.3245477e-08;-6.6227384e-09;6.6227384e-09;0;
1.3245477e-08;6.6227384e-09;1.3245477e-08;2.6490953e-08;3.3113693e-08;1.3245477e-08;2.6490953e-08;1.3245477e-08;1.9868216e-08;6.6227384e-09;
6.6227384e-09;6.6227384e-09;6.6227384e-09;1.9868216e-08;1.9868216e-08;0;6.6227384e-09;3.3113693e-08;1.9868216e-08;6.6227384e-09;
0;1.9868216e-08;2.6490953e-08;1.9868216e-08;1.9868216e-08;2.6490953e-08;2.6490953e-08;6.6227384e-09;2.6490953e-08;1.9868216e-08;
1.9868216e-08;6.6227384e-09;2.6490953e-08;2.6490953e-08;6.6227384e-09;0;6.6227384e-09;0;3.3113693e-08;1.9868216e-08;
2.6490953e-08;1.3245477e-08;      };
     };
     float_Data @["Identity_avg_cos_diff"] {
      user_data_=NULL;
      name="Identity_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] -0.023155967;-0.0192199;-0.011847879;-0.00633877;-0.021039149;-0.022273485;-0.020003295;-0.018078774;-0.015031146;-0.010052293;
-0.011641126;0.0034097747;0.0043454836;0.0043355655;-0.011325882;-0.011288033;-0.010585676;-0.010376205;-0.010376204;-0.010376197;
-0.010376198;-0.01042996;0.005402769;0.0054027755;0.0054027755;0.0054027736;0.0054027778;0.0054027746;0.0054027638;0.0054027746;
0.0054027736;0.0054027801;0.0054027769;0.0054027736;0.0054027727;0.0054027759;0.0054027746;0.0054027801;0.0054027713;0.0054027671;
0.0054027704;0.0054027769;0.0054027778;0.0054027718;0.0054027718;0.0054027685;0.005402768;0.0054027746;0.0054027759;0.0054027755;
0.0054027736;0.0054027792;0.0054027708;0.0054027727;0.0054027746;0.0054027718;0.0054027755;0.0054027732;0.0054027759;0.0054027713;
0.0054027755;0.0054027736;0.0054027736;0.0054027769;0.0054027746;0.0054027662;0.0054027704;0.0054027718;0.0054027769;0.0054027759;
0.0054027741;0.0054027755;0.0054027755;0.0054027718;0.0054027769;0.0054027727;0.0054027755;0.0054027801;0.0054027704;0.0054027778;
0.0054027755;0.0054027801;0.0054027769;0.0054027787;0.0054027718;0.0054027713;0.0054027792;0.0054027759;0.0054027704;0.0054027778;
0.0054027713;0.0054027787;0.0054027759;0.0054027778;0.0054027727;0.0054027713;0.0054027704;0.005402768;0.0054027746;0.005402768;
0.0054027769;0.0054027736;0.0054027736;0.0054027694;0.0054027736;0.0054027704;0.0054027746;0.0054027759;0.0054027713;0.0054027755;
0.0054027769;0.0054027759;0.0054027736;0.0054027755;0.0054027718;0.0054027736;0.0054027736;0.0054027694;0.0054027755;0.0054027769;
0.0054027694;0.0054027694;0.0054027759;0.0054027685;0.0054027727;0.0054027746;0.0054027671;0.005402768;0.0054027704;0.0054027741;
0.0054027708;0.0054027759;0.0054027671;0.0054027769;0.0054027769;0.0054027769;0.0054027746;0.0054027755;0.0054027759;0.0054027792;
0.0054027736;0.0054027736;0.0054027699;0.0054027708;0.0054027755;0.0054027736;0.0054027718;0.0054027704;0.0054027718;0.0054027718;
0.0054027704;0.0054027736;0.0054027704;0.0054027736;0.0054027778;0.0054027769;0.0054027755;0.0054027736;0.0054027773;0.0054027778;
0.0054027671;0.0054027787;0.0054027736;0.0054027746;0.0054027671;0.0054027778;0.0054027727;0.0054027713;0.0054027769;0.0054027713;
0.0054027769;0.0054027718;0.0054027759;0.0054027704;0.0054027759;0.0054027671;0.0054027736;0.005402782;0.0054027769;0.0054027704;
0.0054027736;0.0054027759;0.0054027759;0.0054027736;0.0054027718;0.0054027713;0.0054027769;0.0054027718;0.0054027685;0.0054027629;
0.0054027778;0.0054027704;0.0054027746;0.0054027718;0.0054027811;0.0054027746;0.0054027713;0.0054027746;0.0054027704;0.0054027727;
0.0054027699;0.0054027713;0.0054027755;0.0054027746;0.0054027755;0.0054027671;0.0054027704;0.0054027713;0.0054027741;0.0054027704;
0.0054027787;0.0054027746;0.0054027792;0.0054027718;0.0054027769;0.0054027736;0.0054027685;0.0054027704;0.0054027736;0.0054027736;
0.0054027727;0.0054027685;0.0054027662;0.0054027694;0.0054027811;0.0054027769;0.0054027769;0.0054027746;0.0054027727;0.0054027746;
0.0054027787;0.0054027718;0.0054027694;0.0054027801;0.0054027718;0.0054027671;0.0054027676;0.0054027755;0.0054027736;0.0054027746;
0.0054027704;0.0054027671;0.005402768;0.0054027718;0.0054027769;0.0054027769;0.005402768;0.0054027727;0.0054027704;0.0054027746;
0.0054027704;0.0054027769;0.0054027699;0.0054027736;0.0054027718;0.0054027704;0.0054027746;0.0054027759;0.0054027736;0.0054027713;
0.0054027801;0.0054027736;0.0054027736;0.0054027755;0.0054027746;0.0054027755;0.0054027713;0.0054027778;0.0054027713;0.0054027773;
0.0054027671;0.0054027718;0.0054027778;0.0054027746;0.0054027694;0.005402768;0.005402782;0.0054027713;0.0054027704;0.0054027704;
0.0054027778;0.0054027727;0.0054027736;0.0054027755;0.0054027755;0.0054027643;0.0054027787;0.0054027769;0.0054027759;0.0054027746;
0.0054027759;0.0054027746;0.0054027746;0.0054027718;0.0054027736;0.0054027629;0.0054027746;0.0054027704;0.0054027736;0.0054027746;
0.0054027787;0.0054027713;0.005402782;0.0054027718;0.0054027829;0.0054027713;0.0054027704;0.0054027755;0.0054027792;0.0054027704;
0.0054027746;0.0054027736;0.0054027718;0.0054027713;0.0054027736;0.0054027769;0.005402768;0.0054027746;0.005402782;0.0054027787;
0.0054027759;0.0054027736;0.0054027746;0.0054027671;0.0054027801;0.0054027671;0.0054027792;0.0054027769;0.0054027727;0.0054027787;
0.0054027755;0.0054027694;0.005402768;0.0054027713;0.0054027704;0.0054027769;0.0054027713;0.0054027713;0.0054027685;0.0054027676;
0.0054027718;0.0054027713;0.0054027718;0.0054027704;0.0054027704;0.0054027718;0.0054027685;0.0054027769;0.0054027727;0.0054027713;
0.0054027746;0.0054027741;      };
     };
     float_Data @["Emotions_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Emotions_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.025838498;0.23448586;0.07940343;0.00045329996;-0.00025948716;-0.00013357567;-0.16471317;-7.2898139e-05;-0.083016463;-3.0315585e-05;
-0.16626576;-0.16638947;-0.083241932;-0.16652061;-0.083280563;-6.298224e-06;-0.083308309;-3.9736428e-06;-0.24996549;-0.24997626;
-0.24998175;-0.24998777;-0.3333225;0.16666251;-0.24999589;-2.2682879e-07;0.16666512;1.2583203e-07;0.16666606;0.083333068;
-6.2916016e-08;-0.16666645;-0.083333269;0.24999984;0.1666666;-0.16666661;-0.16666667;-0.083333306;0.16666664;0.25;
3.3113692e-09;-0.16666669;-0.083333336;0.25;0.083333336;2.3179584e-08;6.6227384e-09;-0.25;-0.25;-0.16666667;
0.083333336;0.25000003;-0.083333321;0.083333336;-0.25;-0.083333343;0.083333336;-0.33333334;0.083333336;-0.083333358;
0.25000003;-0.16666667;0;-0.33333334;-0.16666669;1.9868216e-08;0.16666669;-0.33333334;-0.16666667;-0.083333336;
-0.083333321;-0.083333343;-9.9341078e-09;-0.083333328;0.16666669;-0.16666667;0.16666669;-0.25;1.6556847e-08;0.16666669;
-6.6227384e-09;-0.25000003;0.083333358;-0.33333337;-0.16666667;-0.083333336;-0.16666669;0.083333358;0.16666669;6.6227384e-09;
-0.25000003;-6.6227384e-09;-3.3113692e-09;-0.33333337;-0.16666667;-0.083333351;-0.16666669;0.16666669;0;0.083333343;
-0.083333336;-0.33333337;-0.33333337;-0.083333321;-0.25000003;0.16666669;1.9868216e-08;0.33333337;-0.083333358;0;
-0.083333328;-0.083333321;0.16666669;6.6227384e-09;0.16666669;0.25000003;-0.16666669;-0.50000006;-0.083333328;-0.083333343;
-0.083333343;0.083333358;-0.16666667;-0.083333343;-0.16666667;-0.16666669;-0.16666667;1.6556847e-08;-0.16666667;0.083333358;
6.6227384e-09;0.16666669;0;-0.083333336;-0.083333321;-0.25;0.16666669;-0.25000003;0.083333358;-0.33333337;
1.9868216e-08;0.16666669;0.41666669;0.083333358;0.16666669;1.9868216e-08;-6.6227384e-09;0.33333337;-0.083333343;-0.16666667;
-0.33333337;-0.16666667;0.33333337;-0.083333321;0.25000003;-0.25000003;-0.33333337;-0.16666669;-0.25000003;1.9868216e-08;
-0.16666667;0.16666669;-0.083333328;-0.25000003;0;-0.083333336;-0.16666669;-0.33333337;0.25;-0.083333336;
1.9868216e-08;2.3179584e-08;0.083333358;-0.50000006;0.083333358;0.083333358;0.16666669;-0.25;-0.083333328;-0.083333343;
-6.6227384e-09;-0.083333343;6.6227384e-09;0.083333343;-0.16666664;-0.33333337;0.083333358;-0.16666669;-0.25;0.25000003;
0.083333343;0.083333358;-0.25;0.083333336;-0.25000003;-0.33333337;-0.33333337;0.16666669;-0.083333328;0.16666669;
0.083333358;-0.25000003;0;0.083333358;-9.9341078e-09;-0.25000003;-0.083333343;0.25000003;-0.083333343;1.9868216e-08;
-0.25000003;0.16666669;0.16666669;0.083333336;1.9868216e-08;1.9868216e-08;-0.083333321;-0.083333328;-0.25000003;-0.16666669;
0.16666669;0.33333337;0.083333358;-0.083333343;-0.16666669;-0.33333337;0.083333358;-0.16666667;0.083333343;-0.16666666;
-0.16666667;-0.083333343;6.6227384e-09;0.16666669;-0.25;0.25000003;0.16666669;-0.25;0.083333343;0.16666667;
-0.25;0.25;-0.16666667;0.083333358;-0.25000003;-0.16666667;0.083333358;-0.25;0.16666669;-0.083333321;
0.25000003;-0.16666669;-0.25;-0.41666669;-0.25000003;-0.33333337;-0.16666667;-0.25000003;0.25000003;0.25;
0.16666669;-0.16666667;0.16666669;9.9341078e-09;-0.16666667;0;-0.083333343;0.33333337;-0.16666669;-0.083333343;
0;-0.16666669;-0.083333336;-6.6227384e-09;-0.25000003;1.9868216e-08;-0.083333343;0.083333358;0.083333336;-0.083333321;
0;-0.25;-0.25000003;-0.083333343;-0.083333343;0.16666669;-0.083333321;6.6227384e-09;1.9868216e-08;-0.16666669;
1.9868216e-08;-0.41666669;-0.083333328;6.6227384e-09;-0.16666667;-0.16666667;-0.25;1.9868216e-08;0.083333358;-0.16666667;
-0.33333334;0;0.25000003;-0.083333336;-0.16666669;-0.083333321;-0.083333343;-0.25000003;-0.25000003;-0.16666669;
6.6227384e-09;6.6227384e-09;0.16666669;-0.16666669;-0.33333337;-0.16666669;0.083333358;-9.9341078e-09;-0.083333336;0.083333358;
-3.3113692e-09;0.083333358;-0.083333343;-0.16666667;0;-0.25;-0.25000003;1.9868216e-08;0.16666667;-0.33333334;
-0.16666669;-0.16666666;0.25000003;-0.16666669;-3.3113692e-09;0.16666669;-0.16666667;-0.083333343;-0.16666666;-0.083333328;
0.16666669;-0.083333321;0.083333358;-0.33333337;-0.33333337;-0.33333334;6.6227384e-09;-0.083333321;-0.16666667;0.083333358;
-0.25000003;1.9868216e-08;      };
     };
     float_Data @["Gender_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Gender_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] -0.13213798;-0.19350141;0.10244927;-0.1009906;0.10569032;-0.10639135;0.0011998779;-0.32586908;-0.32864136;0.22028823;
8.7327426e-05;0.00010970897;-0.11066499;-0.33257762;0.22183868;0.4439747;0.33305123;-1.3354752e-05;1.4642875e-05;0.33324984;
-0.44435838;-3.2352077e-06;-0.444406;-0.2222054;-0.11110558;-1.6556845e-07;-0.22221778;-3.0464597e-07;-0.33333004;-0.33333099;
1.3245477e-08;-0.22222145;0.11111079;-0.22222185;0.33333293;0.22222203;-0.44444421;0.11111107;0.44444433;-0.44444439;
-6.6227384e-09;0.33333331;0.1111111;0.44444445;-0.11111111;-0.11111111;0.22222222;-0.44444445;-0.22222222;0.22222222;
-0.11111111;-0.33333334;-0.22222222;-0.22222222;6.6227384e-09;-0.55555558;0.22222222;-1.3245477e-08;0.11111111;0.44444445;
0.1111111;-0.22222222;-0.44444445;-0.44444445;-0.33333334;0.11111111;0.22222222;0.11111111;0.22222225;-1.3245477e-08;
0.22222225;0.44444451;-0.55555558;0.11111113;-0.33333337;1.3245477e-08;-0.44444451;-1.3245477e-08;0.22222225;0.11111113;
0.11111113;0.22222225;-0.11111113;-0.66666675;0.33333337;-0.55555558;1.3245477e-08;-0.33333337;-0.11111111;0.33333337;
-1.3245477e-08;0.11111113;-0.22222225;0.22222225;-0.11111113;-0.22222225;0.33333337;0.11111113;0.11111113;0.22222225;
-0.11111113;-1.3245477e-08;-0.22222225;-0.22222225;-0.22222225;-0.22222225;-0.22222225;0.22222225;0.44444451;-0.11111113;
-0.22222225;0.33333337;-1.3245477e-08;-0.1111111;1.3245477e-08;-1.3245477e-08;0;-0.11111113;-0.11111113;-0.22222225;
0.22222225;-0.33333337;-0.33333337;0.22222225;0.22222225;0.22222225;-0.22222225;-0.11111113;0.22222225;1.3245477e-08;
0.11111113;-0.11111113;-1.3245477e-08;-0.44444451;0.11111113;-0.11111113;-0.44444451;0.11111113;-1.3245477e-08;-0.33333337;
-1.3245477e-08;-0.22222225;-0.33333337;-0.33333337;1.3245477e-08;0.22222225;-0.22222225;1.3245477e-08;0.11111113;1.3245477e-08;
-0.11111113;-0.11111113;-0.11111113;1.9868216e-08;-0.33333334;-0.22222225;0.33333337;0.11111113;0.44444451;0.11111113;
0.11111113;0.22222225;-1.3245477e-08;-0.22222225;0.11111113;0.11111113;0.11111113;-0.22222225;0.11111111;-0.44444451;
-0.22222225;-0.33333337;0.11111113;-0.1111111;0.33333337;-0.11111111;0.22222225;-0.11111113;-0.22222225;-0.1111111;
1.3245477e-08;0.11111113;1.3245477e-08;1.3245477e-08;0.33333337;0;1.3245477e-08;-0.11111113;0.33333337;-0.11111113;
0;-0.11111113;-0.33333337;-0.22222225;0.11111113;0.11111111;-0.33333337;-0.22222225;-0.11111113;-0.22222225;
-0.22222225;-0.33333337;0.22222225;1.3245477e-08;-0.22222225;0.11111113;-0.66666675;-0.11111113;0.11111113;1.3245477e-08;
-1.3245477e-08;-0.11111113;-0.33333337;-0.22222225;0.22222225;-0.44444451;-0.55555558;-0.11111113;0.11111113;0;
0;-0.55555558;0.22222225;-0.22222225;-0.11111113;-0.22222225;0.11111111;-0.33333337;0.11111113;-0.11111113;
-1.3245477e-08;-0.55555558;-0.11111113;-0.22222225;0.11111113;1.3245477e-08;-0.44444451;-0.22222222;0.33333337;-0.33333337;
-0.11111113;-0.55555558;0.33333337;0.11111113;0.22222225;0.11111113;-0.55555558;-1.3245477e-08;0;0.11111113;
0.11111113;-0.33333337;0.1111111;0.11111113;-0.11111113;-1.3245477e-08;0.22222225;-0.22222222;-1.3245477e-08;0.11111113;
0.33333337;-0.11111113;-0.11111113;-0.22222225;0.33333337;-0.11111113;-0.11111113;0.11111113;0.22222225;0.33333337;
0.33333337;-0.22222222;-0.33333337;0.22222225;-0.11111113;-0.11111113;-0.44444451;-0.22222225;0;-0.22222225;
-0.11111113;-0.33333337;0;-0.11111113;-0.11111113;-0.55555558;0.11111113;0;0.33333337;-0.55555558;
-1.3245477e-08;0.11111113;0.11111113;-0.11111113;-0.55555558;0.33333337;-1.3245477e-08;-0.11111113;-1.3245477e-08;0.11111113;
0.44444451;-0.22222225;-0.22222225;1.9868216e-08;0.33333337;-0.22222225;-0.33333334;0.44444451;1.9868216e-08;0.22222225;
0.11111113;-0.22222225;-0.11111113;-0.44444451;-0.11111113;-0.22222222;0.22222225;-0.11111113;-0.11111113;0;
0.22222225;0.11111113;0.33333337;-0.11111113;-0.33333337;-0.33333337;-0.33333337;0.22222225;-0.11111113;-0.11111113;
0.44444451;-0.33333337;-0.1111111;-0.11111113;-0.44444451;0.11111113;0.11111113;0.11111113;-0.22222225;-0.22222225;
-0.22222225;-0.33333337;-0.33333337;-0.22222225;0.11111111;0.22222225;0.11111113;-0.22222225;1.3245477e-08;0.11111113;
0.11111113;0.33333337;      };
     };
     float_Data @["Identity_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="Identity_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.01851815;-0.049377427;-0.049379908;-0.049380288;0.012345678;0.074072503;-0.049382061;-0.049382195;-0.049382295;0.19752993;
0.074073829;-0.049382597;0.13580224;-0.049382668;0.13580234;0.2592591;0.074074037;0.012345663;0.074074067;0.012345675;
-0.04938272;-0.049382724;0.07407406;-0.049382713;0.074074067;0.13580243;0.074074097;0.012345678;0.012345674;0.07407409;
0.012345677;-0.049382713;0.13580245;-0.049382709;0.25925922;0.25925922;-0.11111111;0.074074067;0.012345682;0.012345695;
0.012345691;-0.049382716;0.13580246;0.012345684;0.13580245;-0.049382713;-0.049382713;0.012345681;0.012345681;0.19753085;
0.012345678;-0.049382724;-0.1111111;0.012345686;0.074074082;-0.049382709;-0.049382705;0.012345683;0.012345688;0.13580245;
0.074074082;0.074074067;-0.11111111;-0.11111111;-0.049382705;0.074074082;0.012345689;0.012345685;0.012345688;0.012345688;
0.012345695;0.074074082;-0.11111113;0.13580246;0.012345683;0.25925925;0.012345686;0.012345688;-0.1111111;0.012345685;
-0.049382705;0.13580245;0.012345689;-0.1111111;0.13580246;-0.049382709;0.012345685;0.07407409;0.012345689;0.012345688;
0.012345685;-0.049382698;0.012345688;-0.1111111;-0.049382698;0.074074097;0.13580245;0.012345688;0.012345682;0.13580248;
0.13580246;0.13580246;0.012345688;0.074074082;0.074074067;-0.049382713;0.13580245;-0.11111111;0.07407409;0.012345682;
0.074074075;0.012345696;-0.049382709;0.074074075;0.19753082;-0.049382702;0.012345689;0.13580245;0.012345688;0.074074067;
0.012345685;0.012345688;-0.11111108;0.012345686;-0.11111111;0.13580248;0.012345689;0.012345685;0.074074075;0.012345685;
0.012345698;-0.049382705;0.13580248;0.012345685;0.074074082;-0.04938272;-0.049382702;0.074074082;0.012345682;-0.049382705;
0.012345678;0.074074082;-0.049382705;-0.049382705;-0.049382705;0.13580246;-0.049382705;-0.049382705;0.012345688;0.012345696;
0.012345692;0.012345695;-0.049382709;0.074074082;-0.049382709;-0.049382709;0.13580243;0.074074075;0.13580246;0.012345685;
0.012345692;0.012345688;0.012345678;0.074074067;0.012345686;0.13580245;0.074074082;0.074074082;-0.049382713;0.012345688;
-0.11111113;-0.049382709;-0.11111111;0.012345682;0.13580245;-0.11111111;0.012345688;0.074074067;0.012345695;-0.049382713;
0.012345688;0.012345701;0.074074067;0.012345689;0.19753085;0.07407409;0.07407409;0.012345682;0.13580245;-0.049382705;
-0.049382709;-0.049382705;0.012345682;0.012345685;0.13580246;-0.049382709;0.07407409;-0.11111109;-0.1111111;-0.11111111;
0.012345675;0.012345685;0.012345685;-0.1111111;0.012345685;0.074074082;-0.11111111;-0.049382716;0.13580245;-0.049382705;
0.012345688;0.012345688;0.012345685;0.074074082;0.074074067;0.012345685;-0.049382705;0.074074067;0.25925925;-0.049382709;
-0.049382705;-0.049382709;0.012345688;-0.11111111;0.074074067;0.074074067;0.012345688;0.012345682;0.13580245;0.13580246;
0.074074082;-0.049382709;0.012345686;0.07407409;0.074074082;0.012345685;-0.11111111;0.012345685;0.13580245;-0.1111111;
0.13580245;-0.049382709;-0.049382705;0.074074075;0.012345685;0.012345685;-0.049382713;-0.049382705;-0.049382705;0.074074082;
0.012345691;0.012345695;0.012345686;0.25925925;0.074074075;0.074074075;0.13580246;-0.11111113;0.07407409;0.13580243;
0.012345685;0.13580245;-0.049382713;-0.11111111;0.012345685;0.012345685;-0.1111111;-0.049382705;0.13580248;0.074074075;
0.012345672;-0.049382709;0.13580243;-0.049382709;0.074074082;-0.1111111;0.012345689;0.012345685;-0.049382705;-0.1111111;
0.074074097;0.012345682;0.074074067;-0.049382705;0.13580245;-0.11111113;0.012345688;0.074074082;0.074074082;0.074074075;
0.19753085;0.074074075;-0.1111111;-0.1111111;0.074074067;0.012345685;0.012345688;0.012345686;0.012345686;0.012345695;
0.13580246;-0.1111111;0.012345688;0.012345688;0.074074082;-0.1111111;0.074074052;0.074074082;0.012345685;0.074074045;
0.012345688;0.012345685;0.012345686;-0.049382713;0.012345689;-0.049382709;0.012345682;0.012345678;0.074074067;0.074074075;
0.012345678;-0.049382705;0.074074082;0.074074082;0.012345691;-0.1111111;0.07407406;0.012345685;0.012345682;-0.049382709;
0.13580251;0.012345682;-0.11111109;0.012345688;-0.11111111;-0.049382713;0.074074075;0.012345689;-0.049382709;0.07407409;
-0.1111111;0.012345688;0.012345688;0.074074075;0.13580248;0.012345685;-0.049382702;0.074074082;0.012345689;0.012345688;
0.25925922;0.19753085;      };
     };
     float_Data @["Emotions_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Emotions_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.01420493;0.014539595;0.014772102;0.014942471;0.015052403;0.015127902;0.015145823;0.01519305;0.015224664;0.015280998;
0.015277637;0.015184475;0.015128057;0.015133454;0.015232821;0.015234134;0.015338874;0.015348221;0.015348222;0.015348224;
0.015348222;0.015354898;0.015367107;0.015367106;0.015367114;0.015367109;0.015367109;0.015367107;0.015367102;0.01536711;
0.015367114;0.015367104;0.015367117;0.015367104;0.015367109;0.015367109;0.015367114;0.015367107;0.015367107;0.015367107;
0.01536711;0.015367107;0.015367107;0.015367106;0.015367106;0.01536711;0.01536711;0.015367109;0.01536711;0.015367102;
0.015367109;0.015367112;0.015367109;0.015367109;0.01536711;0.015367106;0.01536711;0.015367112;0.015367107;0.015367104;
0.015367106;0.015367107;0.015367107;0.015367109;0.015367106;0.015367114;0.015367106;0.015367109;0.015367107;0.015367109;
0.015367107;0.015367104;0.015367104;0.015367106;0.01536711;0.01536711;0.015367106;0.01536711;0.015367107;0.015367106;
0.015367104;0.01536711;0.015367107;0.01536711;0.015367116;0.015367106;0.015367106;0.01536711;0.015367107;0.015367107;
0.015367104;0.015367104;0.015367112;0.015367106;0.015367109;0.015367114;0.015367107;0.01536711;0.015367104;0.01536711;
0.015367109;0.01536711;0.015367104;0.015367109;0.015367109;0.01536711;0.015367106;0.015367107;0.015367107;0.015367106;
0.015367109;0.015367107;0.015367107;0.015367106;0.01536711;0.015367106;0.015367114;0.01536711;0.01536711;0.01536711;
0.01536711;0.015367107;0.015367112;0.015367106;0.01536711;0.01536711;0.015367109;0.015367112;0.015367102;0.01536711;
0.015367106;0.015367107;0.015367107;0.015367107;0.01536711;0.015367104;0.015367106;0.01536711;0.015367104;0.01536711;
0.01536711;0.01536711;0.015367112;0.01536711;0.01536711;0.01536711;0.015367106;0.015367107;0.015367104;0.015367109;
0.01536711;0.015367109;0.015367104;0.015367109;0.015367107;0.015367106;0.015367106;0.015367107;0.01536711;0.015367107;
0.015367102;0.015367109;0.015367109;0.015367107;0.015367104;0.01536711;0.015367117;0.015367107;0.015367107;0.015367104;
0.015367107;0.015367106;0.015367107;0.01536711;0.015367112;0.015367109;0.01536711;0.015367114;0.015367107;0.015367107;
0.015367112;0.015367116;0.015367116;0.015367114;0.015367109;0.015367109;0.015367104;0.015367106;0.015367112;0.015367107;
0.015367109;0.015367109;0.015367107;0.015367109;0.01536711;0.01536711;0.015367104;0.01536711;0.015367102;0.015367107;
0.015367114;0.015367107;0.015367104;0.015367112;0.01536711;0.015367106;0.01536711;0.015367114;0.015367106;0.015367104;
0.015367107;0.015367112;0.015367114;0.015367112;0.015367112;0.015367107;0.015367109;0.015367109;0.015367107;0.01536711;
0.01536711;0.015367106;0.015367112;0.015367109;0.015367106;0.01536711;0.01536711;0.015367107;0.015367109;0.015367107;
0.015367106;0.01536711;0.015367106;0.015367107;0.015367107;0.015367107;0.01536711;0.015367106;0.015367109;0.015367107;
0.015367102;0.015367112;0.015367107;0.015367102;0.015367106;0.01536711;0.015367114;0.015367109;0.015367106;0.015367106;
0.015367106;0.01536711;0.015367112;0.015367109;0.015367109;0.015367107;0.015367109;0.015367106;0.01536711;0.015367104;
0.015367107;0.01536711;0.015367107;0.015367109;0.015367114;0.015367106;0.015367107;0.015367104;0.015367107;0.01536711;
0.01536711;0.015367109;0.015367107;0.01536711;0.015367109;0.015367107;0.01536711;0.015367107;0.015367109;0.015367107;
0.015367107;0.015367104;0.015367107;0.015367107;0.015367109;0.015367107;0.015367106;0.01536711;0.015367107;0.015367112;
0.01536711;0.015367109;0.015367114;0.015367109;0.015367106;0.015367107;0.015367114;0.015367104;0.015367112;0.015367109;
0.015367109;0.01536711;0.015367104;0.015367104;0.015367104;0.015367112;0.01536711;0.015367109;0.015367104;0.01536711;
0.015367107;0.015367107;0.015367107;0.015367107;0.015367109;0.01536711;0.015367107;0.015367112;0.015367112;0.015367106;
0.01536711;0.01536711;0.015367109;0.015367104;0.015367107;0.015367109;0.015367106;0.015367106;0.015367109;0.015367109;
0.015367107;0.01536711;0.01536711;0.015367109;0.015367109;0.015367109;0.015367112;0.015367107;0.015367104;0.015367109;
0.015367107;0.015367107;0.015367109;0.015367109;0.015367106;0.015367106;0.015367104;0.015367109;0.01536711;0.015367112;
0.015367107;0.01536711;      };
     };
     float_Data @["Gender_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Gender_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.023347048;0.024462216;0.025412312;0.026298782;0.026393302;0.026422016;0.026795484;0.026807923;0.02682979;0.027088732;
0.027398964;0.027472897;0.027556006;0.027574439;0.027872397;0.027877174;0.027937509;0.028101129;0.028101129;0.028101124;
0.028101133;0.028084526;0.028116256;0.02811626;0.02811626;0.028116252;0.028116265;0.028116252;0.02811626;0.028116256;
0.02811626;0.02811626;0.02811626;0.028116252;0.028116252;0.02811626;0.02811626;0.028116249;0.02811626;0.028116263;
0.028116256;0.028116256;0.028116256;0.028116263;0.028116265;0.028116256;0.02811626;0.02811626;0.028116252;0.028116256;
0.028116256;0.028116263;0.028116249;0.028116265;0.028116256;0.02811626;0.028116256;0.02811626;0.028116256;0.028116256;
0.02811626;0.028116256;0.028116263;0.02811626;0.02811626;0.02811626;0.028116263;0.028116252;0.02811626;0.028116256;
0.02811626;0.028116252;0.02811626;0.028116263;0.028116263;0.028116256;0.02811626;0.028116265;0.028116256;0.028116263;
0.028116256;0.028116256;0.028116256;0.028116256;0.028116252;0.02811626;0.028116263;0.02811626;0.028116256;0.028116265;
0.02811626;0.028116252;0.028116256;0.028116263;0.02811626;0.02811626;0.028116263;0.028116256;0.028116252;0.028116256;
0.02811626;0.028116252;0.028116263;0.028116263;0.028116256;0.028116256;0.02811626;0.028116256;0.028116256;0.028116263;
0.02811626;0.02811626;0.028116256;0.028116263;0.02811626;0.028116256;0.028116256;0.028116256;0.028116256;0.02811626;
0.028116252;0.028116256;0.028116249;0.028116252;0.028116256;0.02811626;0.028116252;0.02811626;0.028116252;0.02811626;
0.028116265;0.02811626;0.028116256;0.028116252;0.028116249;0.028116256;0.028116252;0.028116256;0.02811626;0.028116263;
0.028116256;0.02811626;0.028116256;0.028116256;0.028116249;0.028116256;0.028116256;0.028116252;0.028116256;0.028116249;
0.028116252;0.028116269;0.028116247;0.02811626;0.028116256;0.028116256;0.028116256;0.028116252;0.028116252;0.028116252;
0.028116256;0.028116256;0.028116256;0.028116256;0.028116252;0.028116263;0.028116252;0.028116249;0.028116269;0.028116263;
0.028116263;0.028116252;0.028116263;0.028116252;0.028116252;0.028116249;0.028116256;0.028116256;0.028116256;0.028116256;
0.028116252;0.02811626;0.028116265;0.028116252;0.02811626;0.028116256;0.028116265;0.028116256;0.028116263;0.028116265;
0.028116249;0.028116256;0.02811626;0.02811626;0.028116256;0.02811626;0.028116263;0.028116256;0.028116256;0.028116263;
0.028116256;0.028116265;0.028116256;0.02811626;0.028116252;0.028116263;0.02811626;0.028116256;0.028116256;0.02811626;
0.02811626;0.02811626;0.028116252;0.028116256;0.02811626;0.028116252;0.02811626;0.02811626;0.028116256;0.028116256;
0.028116263;0.028116263;0.028116256;0.028116252;0.02811626;0.028116249;0.028116252;0.028116252;0.028116256;0.028116252;
0.028116256;0.028116252;0.02811626;0.028116249;0.028116249;0.028116256;0.028116256;0.028116256;0.028116263;0.02811626;
0.028116256;0.02811626;0.028116252;0.028116247;0.02811626;0.028116263;0.028116252;0.028116256;0.028116256;0.028116263;
0.028116249;0.028116249;0.02811626;0.028116263;0.028116265;0.028116249;0.02811626;0.028116263;0.02811626;0.028116252;
0.028116263;0.02811626;0.02811626;0.028116252;0.02811626;0.028116256;0.02811626;0.028116256;0.028116249;0.02811626;
0.028116256;0.028116256;0.028116252;0.028116256;0.028116247;0.028116252;0.028116252;0.028116256;0.02811626;0.028116252;
0.02811626;0.02811626;0.02811626;0.028116256;0.028116249;0.028116265;0.02811626;0.028116256;0.028116256;0.028116256;
0.028116256;0.028116249;0.028116256;0.028116249;0.02811626;0.028116252;0.028116263;0.028116256;0.028116263;0.028116252;
0.028116256;0.028116256;0.028116252;0.02811626;0.028116256;0.028116252;0.028116263;0.028116252;0.028116252;0.02811626;
0.02811626;0.028116252;0.02811626;0.028116252;0.028116252;0.028116256;0.02811626;0.028116263;0.028116249;0.028116256;
0.02811626;0.028116256;0.028116256;0.028116256;0.02811626;0.02811626;0.028116252;0.02811626;0.02811626;0.028116256;
0.028116256;0.028116252;0.02811626;0.02811626;0.028116256;0.02811626;0.02811626;0.028116265;0.02811626;0.028116252;
0.028116249;0.028116263;0.028116256;0.028116252;0.028116256;0.028116256;0.028116252;0.02811626;0.02811626;0.02811626;
0.028116256;0.02811626;      };
     };
     float_Data @["Identity_avg_avg_act_diff"] {
      user_data_=NULL;
      name="Identity_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] -0.0081206001;-0.0065275598;-0.005521575;-0.0048211743;-0.0043289028;-0.003934911;-0.0036672126;-0.0034525702;-0.0032736845;-0.0031014911;
-0.0030203837;-0.0029439712;-0.0028663685;-0.00284344;-0.0027336713;-0.002728086;-0.0026752152;-0.0026363784;-0.0026363817;-0.0026363812;
-0.0026363784;-0.0026080972;-0.0025731314;-0.002573132;-0.0025731327;-0.0025731334;-0.0025731334;-0.0025731316;-0.0025731323;-0.0025731348;
-0.0025731311;-0.0025731316;-0.002573132;-0.002573133;-0.0025731346;-0.0025731297;-0.0025731358;-0.002573133;-0.0025731297;-0.0025731327;
-0.0025731327;-0.002573132;-0.0025731334;-0.0025731318;-0.002573133;-0.0025731304;-0.002573132;-0.0025731332;-0.0025731318;-0.0025731334;
-0.0025731311;-0.002573132;-0.002573132;-0.0025731332;-0.0025731327;-0.0025731323;-0.0025731314;-0.0025731318;-0.0025731316;-0.0025731323;
-0.0025731316;-0.0025731325;-0.0025731339;-0.002573133;-0.0025731307;-0.0025731302;-0.0025731341;-0.0025731337;-0.0025731316;-0.0025731327;
-0.0025731323;-0.0025731334;-0.0025731325;-0.0025731302;-0.0025731334;-0.002573133;-0.0025731327;-0.0025731297;-0.0025731311;-0.0025731334;
-0.0025731318;-0.0025731302;-0.0025731323;-0.002573133;-0.0025731314;-0.0025731327;-0.0025731316;-0.0025731302;-0.0025731332;-0.0025731327;
-0.0025731339;-0.0025731314;-0.0025731334;-0.0025731316;-0.0025731325;-0.0025731304;-0.0025731339;-0.0025731346;-0.0025731307;-0.002573132;
-0.0025731314;-0.0025731311;-0.0025731327;-0.0025731307;-0.0025731327;-0.0025731316;-0.0025731334;-0.0025731311;-0.0025731341;-0.0025731327;
-0.0025731314;-0.0025731337;-0.0025731341;-0.0025731316;-0.0025731309;-0.0025731323;-0.002573133;-0.0025731302;-0.0025731344;-0.0025731314;
-0.0025731293;-0.0025731327;-0.002573133;-0.0025731339;-0.0025731304;-0.0025731346;-0.0025731314;-0.0025731346;-0.002573132;-0.0025731316;
-0.0025731323;-0.0025731316;-0.002573133;-0.0025731309;-0.0025731325;-0.0025731327;-0.0025731334;-0.0025731297;-0.0025731325;-0.0025731327;
-0.0025731332;-0.0025731307;-0.0025731344;-0.0025731323;-0.0025731337;-0.00257313;-0.0025731332;-0.0025731304;-0.0025731344;-0.0025731309;
-0.0025731325;-0.0025731316;-0.0025731332;-0.0025731323;-0.0025731323;-0.0025731323;-0.0025731316;-0.0025731323;-0.0025731316;-0.0025731309;
-0.0025731334;-0.0025731367;-0.0025731318;-0.002573133;-0.0025731327;-0.0025731323;-0.0025731311;-0.002573133;-0.002573132;-0.0025731351;
-0.0025731304;-0.0025731346;-0.002573133;-0.0025731311;-0.002573133;-0.0025731309;-0.0025731344;-0.002573132;-0.0025731318;-0.0025731334;
-0.0025731316;-0.0025731332;-0.0025731297;-0.0025731348;-0.0025731316;-0.0025731332;-0.0025731323;-0.0025731327;-0.0025731323;-0.0025731325;
-0.0025731297;-0.0025731341;-0.0025731318;-0.0025731334;-0.0025731323;-0.0025731323;-0.0025731334;-0.0025731309;-0.0025731323;-0.0025731337;
-0.0025731332;-0.0025731309;-0.0025731334;-0.0025731309;-0.0025731348;-0.002573132;-0.0025731316;-0.002573132;-0.0025731332;-0.0025731332;
-0.0025731314;-0.0025731318;-0.0025731325;-0.0025731332;-0.0025731304;-0.0025731327;-0.0025731332;-0.0025731316;-0.0025731314;-0.002573133;
-0.0025731334;-0.0025731316;-0.0025731297;-0.0025731341;-0.0025731318;-0.0025731323;-0.002573133;-0.0025731327;-0.0025731309;-0.002573133;
-0.0025731323;-0.0025731316;-0.0025731327;-0.0025731316;-0.0025731334;-0.0025731327;-0.0025731325;-0.002573132;-0.002573133;-0.0025731318;
-0.0025731325;-0.0025731332;-0.0025731318;-0.0025731316;-0.0025731344;-0.0025731323;-0.0025731323;-0.0025731341;-0.00257313;-0.002573133;
-0.0025731316;-0.0025731325;-0.0025731334;-0.0025731316;-0.0025731337;-0.0025731316;-0.0025731316;-0.0025731325;-0.0025731307;-0.0025731316;
-0.0025731327;-0.0025731334;-0.0025731339;-0.0025731316;-0.0025731327;-0.0025731353;-0.0025731318;-0.0025731325;-0.0025731318;-0.0025731323;
-0.002573132;-0.0025731327;-0.0025731332;-0.0025731316;-0.00257313;-0.0025731327;-0.0025731327;-0.0025731311;-0.0025731318;-0.0025731314;
-0.0025731316;-0.0025731337;-0.0025731325;-0.0025731316;-0.0025731339;-0.0025731332;-0.0025731314;-0.002573133;-0.0025731325;-0.0025731302;
-0.0025731325;-0.0025731325;-0.0025731323;-0.0025731334;-0.00257313;-0.002573133;-0.002573132;-0.0025731332;-0.002573133;-0.0025731316;
-0.002573132;-0.0025731318;-0.0025731309;-0.0025731325;-0.0025731318;-0.0025731334;-0.0025731316;-0.0025731353;-0.0025731304;-0.0025731341;
-0.0025731323;-0.0025731304;-0.0025731358;-0.0025731316;-0.0025731323;-0.0025731304;-0.0025731334;-0.0025731323;-0.0025731332;-0.0025731309;
-0.0025731316;-0.0025731327;-0.0025731325;-0.0025731339;-0.0025731316;-0.002573132;-0.0025731323;-0.0025731307;-0.0025731327;-0.0025731346;
-0.0025731314;-0.0025731327;-0.0025731325;-0.0025731309;-0.0025731309;-0.0025731307;-0.0025731334;-0.0025731337;-0.0025731348;-0.0025731297;
-0.0025731332;-0.0025731314;-0.0025731304;-0.0025731318;-0.0025731316;-0.0025731332;-0.0025731307;-0.0025731325;-0.002573133;-0.0025731323;
-0.0025731323;-0.0025731316;      };
     };
     float_Data @["Emotions_avg_net_sd"] {
      user_data_=NULL;
      name="Emotions_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.02459549;0.021085478;0.01858804;0.016974214;0.015891649;0.015006136;0.0143853;0.013881136;0.013537271;0.013180232;
0.012961976;0.012752101;0.012570592;0.012508181;0.012319841;0.01230469;0.01219295;0.012092545;0.012092546;0.012092546;
0.012092545;0.012020191;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;
0.011887562;0.011887561;0.011887561;0.011887562;0.011887561;0.011887561;0.011887561;0.011887562;0.011887562;0.011887561;
0.011887562;0.011887561;0.011887562;0.01188756;0.011887562;0.011887562;0.011887561;0.01188756;0.011887561;0.011887562;
0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;0.011887562;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;
0.011887561;0.011887562;0.011887562;0.01188756;0.011887561;0.011887561;0.011887561;0.011887562;0.011887562;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887561;0.011887561;0.011887561;0.011887562;0.01188756;0.011887561;0.011887562;
0.011887562;0.011887562;0.011887561;0.011887561;0.011887561;0.01188756;0.011887562;0.011887562;0.011887562;0.011887562;
0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;
0.011887561;0.011887561;0.011887562;0.011887561;0.011887562;0.011887561;0.011887561;0.011887562;0.011887561;0.011887562;
0.011887562;0.011887561;0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;0.011887561;0.011887561;0.011887562;
0.011887561;0.011887562;0.011887562;0.011887561;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887561;0.011887562;0.011887562;0.011887561;0.011887561;
0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;
0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;
0.011887562;0.011887561;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.01188756;0.011887561;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;0.011887561;0.011887562;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;
0.011887561;0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887561;0.011887561;0.011887562;0.011887561;0.011887562;0.011887562;0.01188756;
0.011887562;0.011887562;0.011887559;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;0.011887561;
0.011887561;0.011887562;0.011887561;0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;0.011887561;0.011887562;
0.011887562;0.011887562;0.011887561;0.011887561;0.011887562;0.011887562;0.011887561;0.011887562;0.011887562;0.011887561;
0.011887561;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887561;
0.011887561;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;
0.011887562;0.011887561;0.011887561;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;
0.011887562;0.011887561;0.011887562;0.011887561;0.011887562;0.011887562;0.011887562;0.011887561;0.011887562;0.011887561;
0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.011887562;0.01188756;0.011887561;0.011887562;0.011887562;
0.011887562;0.011887562;      };
     };
     float_Data @["Gender_avg_net_sd"] {
      user_data_=NULL;
      name="Gender_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.023015911;0.019591399;0.017300181;0.015784902;0.014819516;0.013970888;0.01338027;0.012954555;0.012586255;0.012282047;
0.012080406;0.011882917;0.011708239;0.01166676;0.011480983;0.011465991;0.011339167;0.011268313;0.011268313;0.011268313;
0.011268314;0.011210447;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077309;0.011077312;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.01107731;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077312;0.011077312;0.011077311;0.011077311;0.011077311;
0.011077312;0.01107731;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.01107731;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077312;0.011077311;0.011077311;0.01107731;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.01107731;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077312;0.011077311;0.011077311;0.011077312;0.011077311;0.01107731;0.011077312;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.01107731;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.01107731;0.011077311;0.01107731;0.011077311;0.01107731;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;
0.011077313;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077312;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.011077312;0.011077311;0.011077311;
0.011077311;0.011077311;0.011077311;0.011077311;0.011077311;0.01107731;0.011077311;0.011077311;0.011077311;0.011077311;
0.011077311;0.011077311;      };
     };
     float_Data @["Identity_avg_net_sd"] {
      user_data_=NULL;
      name="Identity_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.11353254;0.096809;0.085342973;0.077853702;0.072894663;0.068817146;0.065977894;0.063776888;0.062055606;0.06037055;
0.05945158;0.058508381;0.057646081;0.057420213;0.056514818;0.056455467;0.055881228;0.055482097;0.055482093;0.055482097;
0.055482093;0.055174861;0.054541741;0.054541737;0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;
0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541737;0.054541737;0.054541741;0.054541741;0.054541737;
0.054541733;0.054541741;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541741;0.054541737;0.054541737;
0.054541741;0.054541741;0.054541737;0.054541737;0.054541741;0.054541737;0.054541733;0.054541741;0.054541741;0.054541741;
0.054541737;0.054541737;0.054541741;0.054541733;0.054541737;0.054541737;0.054541737;0.054541733;0.054541737;0.054541737;
0.054541737;0.054541741;0.054541737;0.054541737;0.054541733;0.054541733;0.054541741;0.054541737;0.054541741;0.054541741;
0.054541741;0.054541737;0.054541741;0.054541737;0.054541741;0.054541733;0.054541737;0.054541737;0.054541741;0.054541744;
0.054541733;0.054541733;0.054541733;0.054541741;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541737;
0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;
0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541733;0.054541737;0.054541737;0.054541737;
0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541741;0.054541741;0.054541737;0.054541737;0.054541737;
0.054541741;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541737;0.054541733;0.054541737;
0.054541741;0.054541733;0.054541741;0.054541737;0.054541737;0.054541741;0.054541733;0.054541737;0.054541737;0.054541741;
0.054541741;0.054541737;0.054541741;0.054541741;0.054541737;0.054541737;0.054541733;0.054541737;0.054541741;0.054541737;
0.054541741;0.054541733;0.054541737;0.054541733;0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;
0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541737;0.054541733;0.054541741;0.054541733;
0.054541737;0.054541737;0.054541737;0.054541733;0.054541741;0.054541737;0.054541737;0.054541741;0.054541741;0.054541737;
0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541741;0.054541741;0.054541737;
0.054541733;0.054541737;0.054541737;0.054541741;0.054541733;0.054541737;0.054541737;0.054541737;0.054541733;0.054541737;
0.054541733;0.054541741;0.054541741;0.054541741;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541741;
0.054541737;0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541741;0.054541741;0.054541741;0.054541737;
0.054541737;0.054541744;0.054541741;0.054541741;0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;
0.054541737;0.054541741;0.054541737;0.054541741;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541737;
0.054541737;0.054541741;0.054541741;0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;
0.054541737;0.054541741;0.054541733;0.054541737;0.054541737;0.054541737;0.054541733;0.054541737;0.054541733;0.054541737;
0.054541741;0.054541737;0.054541733;0.054541737;0.054541741;0.054541737;0.054541737;0.054541737;0.054541741;0.054541741;
0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541733;0.054541737;0.054541741;0.054541737;0.054541737;
0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541733;0.054541741;0.054541737;0.054541737;
0.054541737;0.054541737;0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541737;
0.054541744;0.054541737;0.054541737;0.054541733;0.054541737;0.054541741;0.054541733;0.054541741;0.054541741;0.054541737;
0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541737;0.054541741;0.054541741;0.054541737;
0.054541733;0.054541733;0.054541741;0.054541737;0.054541737;0.054541737;0.054541741;0.054541741;0.054541741;0.054541733;
0.054541737;0.054541737;0.054541737;0.054541737;0.054541741;0.054541737;0.054541737;0.054541741;0.054541733;0.054541737;
0.054541737;0.054541737;      };
     };
     float_Data @["Emotions_hog_pct"] {
      user_data_=NULL;
      name="Emotions_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.33333334;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Gender_hog_pct"] {
      user_data_=NULL;
      name="Gender_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @["Identity_hog_pct"] {
      user_data_=NULL;
      name="Identity_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Emotions_dead_pct"] {
      user_data_=NULL;
      name="Emotions_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Gender_dead_pct"] {
      user_data_=NULL;
      name="Gender_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @["Identity_dead_pct"] {
      user_data_=NULL;
      name="Identity_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;      };
     };
     float_Data @["Emotio_netmax"] {
      user_data_=NULL;
      name="Emotio_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1.0721656;0.90896106;0.80437636;0.73388237;0.68660438;0.64832765;0.62164664;0.60043162;0.5843606;0.56864107;
0.56031168;0.55123335;0.54305291;0.54085946;0.53241736;0.53189188;0.52636933;0.52272129;0.52272123;0.52272135;
0.52272129;0.51977295;0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.51386154;0.51386166;0.5138616;
0.51386166;0.51386166;0.51386166;0.5138616;0.5138616;0.5138616;0.51386166;0.5138616;0.51386154;0.5138616;
0.5138616;0.51386166;0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.51386154;0.51386172;0.5138616;
0.51386166;0.51386166;0.5138616;0.51386166;0.51386166;0.51386166;0.5138616;0.51386166;0.51386154;0.51386166;
0.51386166;0.51386166;0.51386166;0.51386172;0.51386166;0.5138616;0.51386172;0.5138616;0.51386166;0.5138616;
0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.5138616;0.5138616;0.51386166;0.51386166;0.5138616;
0.5138616;0.51386166;0.51386166;0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.51386166;0.51386154;
0.51386166;0.51386166;0.5138616;0.5138616;0.5138616;0.5138616;0.5138616;0.51386166;0.51386166;0.51386172;
0.51386166;0.51386166;0.51386172;0.51386154;0.5138616;0.5138616;0.5138616;0.5138616;0.51386166;0.51386154;
0.51386166;0.51386166;0.51386166;0.51386148;0.5138616;0.5138616;0.51386166;0.51386166;0.51386166;0.5138616;
0.51386166;0.51386154;0.51386166;0.51386172;0.51386154;0.5138616;0.5138616;0.5138616;0.51386172;0.51386166;
0.51386166;0.5138616;0.51386166;0.51386166;0.5138616;0.5138616;0.5138616;0.51386166;0.51386166;0.51386166;
0.5138616;0.5138616;0.51386166;0.51386166;0.51386154;0.51386166;0.51386172;0.51386166;0.5138616;0.51386166;
0.51386166;0.51386166;0.5138616;0.5138616;0.51386166;0.51386166;0.51386166;0.51386166;0.51386166;0.51386154;
0.5138616;0.5138616;0.5138616;0.5138616;0.5138616;0.5138616;0.51386166;0.51386166;0.5138616;0.5138616;
0.51386166;0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.51386166;0.5138616;0.5138616;0.5138616;
0.51386166;0.5138616;0.5138616;0.51386166;0.51386166;0.51386166;0.51386166;0.51386166;0.5138616;0.51386166;
0.51386166;0.51386166;0.5138616;0.5138616;0.5138616;0.51386166;0.5138616;0.51386166;0.51386166;0.51386172;
0.51386166;0.51386166;0.51386166;0.51386166;0.51386166;0.5138616;0.5138616;0.51386166;0.5138616;0.51386166;
0.51386166;0.5138616;0.51386166;0.5138616;0.5138616;0.5138616;0.51386154;0.51386166;0.51386166;0.51386166;
0.5138616;0.51386166;0.5138616;0.51386166;0.51386166;0.5138616;0.5138616;0.5138616;0.5138616;0.51386166;
0.51386166;0.51386166;0.5138616;0.51386166;0.51386166;0.5138616;0.51386166;0.51386166;0.5138616;0.5138616;
0.5138616;0.51386166;0.51386166;0.51386166;0.51386172;0.51386166;0.51386166;0.51386166;0.51386166;0.51386154;
0.51386166;0.51386166;0.5138616;0.5138616;0.51386166;0.5138616;0.5138616;0.5138616;0.5138616;0.51386154;
0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.5138616;0.5138616;0.5138616;0.51386154;0.51386166;
0.51386166;0.51386172;0.5138616;0.5138616;0.5138616;0.51386166;0.51386166;0.51386154;0.5138616;0.51386166;
0.5138616;0.51386166;0.51386172;0.51386166;0.51386166;0.51386166;0.5138616;0.5138616;0.5138616;0.5138616;
0.51386166;0.51386172;0.51386154;0.5138616;0.51386166;0.51386166;0.51386166;0.51386166;0.51386172;0.5138616;
0.5138616;0.5138616;0.5138616;0.5138616;0.5138616;0.51386166;0.5138616;0.51386154;0.5138616;0.51386172;
0.5138616;0.51386166;0.5138616;0.51386166;0.51386166;0.51386166;0.51386166;0.51386166;0.5138616;0.51386172;
0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.51386166;0.5138616;0.51386166;0.5138616;0.51386166;
0.51386166;0.51386166;0.5138616;0.51386166;0.5138616;0.5138616;0.5138616;0.51386166;0.5138616;0.51386172;
0.5138616;0.5138616;0.5138616;0.5138616;0.5138616;0.51386166;0.51386166;0.5138616;0.51386166;0.51386166;
0.51386166;0.5138616;      };
     };
     float_Data @["Gender_netmax"] {
      user_data_=NULL;
      name="Gender_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1.076514;0.91294312;0.80780548;0.73703259;0.68947875;0.65106034;0.62428111;0.60298502;0.58680236;0.57108915;
0.5626812;0.55356157;0.54535365;0.54315078;0.53466791;0.53413838;0.52858919;0.52492917;0.52492917;0.52492917;
0.52492917;0.52198017;0.51603204;0.5160321;0.51603198;0.51603204;0.51603204;0.51603198;0.51603204;0.51603198;
0.51603204;0.51603204;0.51603204;0.51603198;0.51603204;0.51603198;0.5160321;0.51603198;0.51603198;0.51603198;
0.51603204;0.51603198;0.51603198;0.51603204;0.51603204;0.51603198;0.51603198;0.51603204;0.51603198;0.51603204;
0.51603198;0.5160321;0.51603204;0.5160321;0.5160321;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;
0.51603204;0.51603204;0.51603198;0.51603198;0.51603198;0.51603204;0.51603198;0.51603198;0.51603204;0.51603204;
0.51603204;0.5160321;0.51603198;0.51603204;0.51603204;0.5160321;0.51603204;0.51603204;0.51603198;0.51603198;
0.51603204;0.51603204;0.51603204;0.51603198;0.5160321;0.5160321;0.51603204;0.51603204;0.51603198;0.5160321;
0.51603204;0.51603204;0.51603198;0.51603204;0.51603204;0.51603204;0.51603204;0.51603204;0.51603204;0.51603198;
0.51603198;0.5160321;0.51603198;0.51603204;0.5160321;0.5160321;0.5160321;0.51603204;0.51603198;0.51603204;
0.51603204;0.51603198;0.51603204;0.51603198;0.51603204;0.51603204;0.51603198;0.51603198;0.51603198;0.51603198;
0.51603204;0.51603198;0.51603204;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;0.51603204;0.51603198;
0.51603198;0.51603198;0.51603198;0.51603198;0.51603204;0.51603204;0.51603198;0.51603198;0.51603198;0.51603204;
0.51603198;0.5160321;0.51603204;0.51603204;0.51603204;0.51603198;0.51603198;0.51603204;0.5160321;0.51603204;
0.51603204;0.51603204;0.51603198;0.51603198;0.51603198;0.51603204;0.5160321;0.51603204;0.51603198;0.51603198;
0.51603204;0.51603204;0.51603204;0.51603204;0.51603204;0.51603198;0.5160321;0.51603198;0.51603204;0.51603204;
0.51603204;0.51603198;0.51603198;0.51603198;0.51603198;0.51603204;0.51603204;0.51603204;0.51603204;0.51603204;
0.51603204;0.5160321;0.51603198;0.51603204;0.51603198;0.51603198;0.51603204;0.51603198;0.51603198;0.5160321;
0.51603198;0.51603204;0.51603204;0.51603198;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;0.51603198;
0.51603204;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;0.5160321;0.51603198;0.5160321;0.5160321;
0.51603198;0.51603198;0.51603198;0.51603204;0.51603198;0.51603204;0.51603204;0.51603204;0.51603204;0.51603198;
0.51603198;0.51603204;0.51603204;0.5160321;0.51603204;0.51603204;0.51603204;0.51603204;0.51603198;0.51603204;
0.5160321;0.51603198;0.51603204;0.51603198;0.51603198;0.51603204;0.51603204;0.5160321;0.5160321;0.51603204;
0.51603198;0.51603204;0.51603198;0.5160321;0.51603204;0.51603204;0.51603198;0.51603204;0.51603198;0.51603204;
0.51603204;0.51603198;0.51603198;0.51603198;0.51603198;0.5160321;0.51603204;0.51603198;0.51603204;0.51603204;
0.51603204;0.51603204;0.51603198;0.51603204;0.5160321;0.51603204;0.51603198;0.5160321;0.51603198;0.51603204;
0.51603198;0.51603198;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;0.51603204;0.51603198;0.51603198;
0.51603198;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;0.51603204;0.51603204;0.51603198;0.51603198;
0.51603204;0.51603198;0.51603204;0.51603198;0.51603204;0.51603204;0.51603198;0.51603204;0.51603204;0.51603204;
0.51603198;0.51603204;0.51603198;0.51603198;0.51603204;0.51603198;0.51603204;0.51603204;0.51603204;0.5160321;
0.51603204;0.51603198;0.51603198;0.51603204;0.51603204;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;
0.51603204;0.51603198;0.5160321;0.51603204;0.51603204;0.51603198;0.51603204;0.51603198;0.51603204;0.51603198;
0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;0.51603204;0.51603198;0.51603198;0.51603198;0.51603204;
0.51603204;0.51603198;0.51603198;0.51603204;0.51603204;0.51603204;0.51603198;0.5160321;0.51603198;0.51603204;
0.51603198;0.51603204;      };
     };
     float_Data @["Identi_netmax"] {
      user_data_=NULL;
      name="Identi_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 1.1299679;0.95837241;0.84786582;0.77362806;0.72379899;0.68341708;0.65526885;0.632945;0.6159817;0.59949195;
0.5906384;0.58106476;0.57245749;0.57014912;0.56123602;0.56067652;0.55485535;0.55100977;0.55100971;0.55100971;
0.55100971;0.54790956;0.54167062;0.54167068;0.54167062;0.54167062;0.54167062;0.54167068;0.54167062;0.54167068;
0.54167056;0.54167062;0.54167062;0.54167062;0.54167062;0.54167062;0.54167056;0.54167056;0.54167062;0.54167062;
0.54167056;0.54167062;0.54167062;0.54167056;0.54167062;0.54167068;0.54167056;0.54167062;0.54167056;0.54167056;
0.54167056;0.54167062;0.54167068;0.54167068;0.54167062;0.54167056;0.54167056;0.54167056;0.54167068;0.54167068;
0.54167062;0.54167062;0.54167056;0.54167062;0.54167056;0.54167062;0.54167056;0.54167068;0.54167056;0.54167062;
0.54167062;0.54167056;0.54167068;0.54167068;0.54167062;0.54167062;0.54167056;0.54167062;0.54167062;0.54167062;
0.54167062;0.54167062;0.54167068;0.54167062;0.54167068;0.54167068;0.54167062;0.54167062;0.54167062;0.54167062;
0.54167062;0.54167062;0.54167056;0.54167062;0.54167062;0.54167062;0.54167068;0.54167062;0.54167068;0.54167068;
0.54167062;0.54167062;0.54167062;0.54167056;0.54167056;0.54167062;0.54167062;0.54167056;0.54167062;0.54167056;
0.54167068;0.54167068;0.54167056;0.54167062;0.54167056;0.54167056;0.54167068;0.54167062;0.54167062;0.54167062;
0.54167062;0.54167062;0.54167062;0.54167056;0.54167068;0.54167062;0.54167056;0.54167062;0.54167062;0.54167062;
0.54167062;0.54167068;0.54167062;0.54167056;0.54167056;0.54167062;0.54167062;0.54167056;0.54167056;0.54167056;
0.54167056;0.54167062;0.54167056;0.54167062;0.54167062;0.54167068;0.54167062;0.54167068;0.54167062;0.54167056;
0.54167056;0.54167062;0.54167056;0.54167068;0.54167068;0.54167056;0.54167062;0.54167062;0.54167062;0.54167068;
0.54167062;0.54167062;0.54167068;0.54167056;0.54167056;0.54167062;0.54167056;0.54167068;0.54167068;0.54167062;
0.54167062;0.54167062;0.54167068;0.54167068;0.54167062;0.54167062;0.54167062;0.54167062;0.54167062;0.54167068;
0.54167068;0.54167062;0.54167062;0.54167056;0.54167062;0.54167056;0.54167062;0.54167062;0.54167074;0.54167062;
0.54167062;0.54167068;0.54167062;0.54167062;0.54167068;0.54167062;0.54167056;0.54167068;0.54167062;0.54167056;
0.54167056;0.54167056;0.54167062;0.54167062;0.54167062;0.54167056;0.54167068;0.54167068;0.54167062;0.54167056;
0.54167056;0.54167062;0.54167056;0.54167062;0.54167062;0.54167056;0.54167068;0.54167062;0.54167062;0.54167068;
0.54167068;0.54167062;0.54167062;0.54167062;0.54167068;0.54167062;0.54167056;0.54167062;0.54167068;0.54167062;
0.54167062;0.54167056;0.54167056;0.54167056;0.54167062;0.54167062;0.54167056;0.54167062;0.54167056;0.54167068;
0.54167062;0.54167056;0.54167062;0.54167062;0.54167062;0.54167062;0.54167062;0.54167068;0.54167068;0.54167062;
0.54167068;0.54167062;0.54167062;0.54167068;0.54167062;0.54167062;0.54167056;0.54167062;0.54167056;0.54167062;
0.54167062;0.54167062;0.54167062;0.54167068;0.54167062;0.54167056;0.54167062;0.54167062;0.54167062;0.54167056;
0.54167056;0.54167056;0.54167068;0.54167056;0.54167062;0.54167074;0.54167068;0.54167062;0.54167056;0.54167056;
0.54167068;0.54167056;0.54167062;0.54167056;0.54167062;0.54167062;0.54167056;0.54167068;0.54167068;0.54167062;
0.54167068;0.54167062;0.54167062;0.54167062;0.54167062;0.54167068;0.54167056;0.54167062;0.54167062;0.54167062;
0.54167062;0.54167062;0.54167056;0.54167068;0.54167062;0.54167056;0.54167068;0.54167062;0.54167056;0.54167062;
0.54167062;0.54167056;0.54167062;0.54167062;0.54167056;0.54167056;0.54167068;0.54167062;0.54167056;0.54167062;
0.54167068;0.54167062;0.54167062;0.54167062;0.54167062;0.54167062;0.54167062;0.54167068;0.54167068;0.54167068;
0.54167062;0.54167062;0.54167056;0.54167056;0.54167068;0.54167056;0.54167062;0.54167056;0.54167056;0.54167062;
0.54167062;0.54167056;0.54167056;0.54167062;0.54167056;0.54167062;0.54167062;0.54167062;0.54167062;0.54167062;
0.54167068;0.54167056;      };
     };
     float_Data @["Emotio_avg_act"] {
      user_data_=NULL;
      name="Emotio_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.13585536;0.16577715;0.19074729;0.21158521;0.22897473;0.24348654;0.25559682;0.26570302;0.27413681;0.28117493;
0.28704828;0.29194972;0.29604006;0.29945347;0.30230206;0.30467921;0.30666295;0.30831841;0.30969989;0.3108528;
0.3118149;0.31261781;0.31328782;0.31384695;0.31431362;0.31470305;0.31502798;0.31529915;0.3155255;0.31571433;
0.31587192;0.31600347;0.31611317;0.31620479;0.3162812;0.31634498;0.31639835;0.31644273;0.31647977;0.31651068;
0.31653646;0.31655803;0.316576;0.31659102;0.31660351;0.31661397;0.3166227;0.31662998;0.31663603;0.31664109;
0.31664529;0.31664881;0.31665176;0.31665421;0.31665635;0.31665796;0.31665945;0.31666052;0.3166616;0.31666246;
0.316663;0.31666353;0.31666407;0.31666461;0.31666514;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;0.31666517;
0.31666517;0.31666517;      };
     };
     float_Data @["Gender_avg_act"] {
      user_data_=NULL;
      name="Gender_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.16205731;0.21384501;0.25706252;0.29312813;0.32322544;0.34834209;0.36930221;0.38679373;0.40139061;0.41357195;
0.4237375;0.43222076;0.43930012;0.44520801;0.45013824;0.45425248;0.45768592;0.46055123;0.46294233;0.46493766;
0.46660286;0.46799251;0.46915215;0.47011995;0.47092751;0.47160149;0.47216389;0.47263321;0.47302485;0.47335172;
0.47362444;0.47385207;0.47404203;0.47420061;0.4743329;0.47444329;0.47453541;0.47461227;0.47467643;0.47472987;
0.47477457;0.47481188;0.474843;0.47486901;0.47489071;0.47490883;0.47492394;0.47493654;0.47494704;0.4749558;
0.47496313;0.47496924;0.47497433;0.47497857;0.47498208;0.47498503;0.47498751;0.47498965;0.47499126;0.47499278;
0.47499385;0.47499493;0.47499576;0.4749963;0.47499683;0.47499737;0.47499791;0.47499844;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;0.47499853;
0.47499853;0.47499853;      };
     };
     float_Data @["Identi_avg_act"] {
      user_data_=NULL;
      name="Identi_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [352] 0.09917257;0.098482065;0.09790583;0.097424962;0.097023666;0.096688777;0.096409298;0.096176066;0.095981441;0.095819034;
0.095683508;0.095570408;0.095476024;0.095397234;0.095331497;0.095276646;0.095230862;0.095192648;0.095160767;0.095134176;
0.095111966;0.095093437;0.095077977;0.095065035;0.095054269;0.095045283;0.095037788;0.09503153;0.095026314;0.095021956;
0.095018327;0.095015295;0.095012762;0.095010653;0.095008895;0.095007427;0.095006198;0.095005177;0.09500432;0.095003605;
0.095003016;0.09500251;0.095002107;0.095001757;0.095001489;0.095001221;0.095001027;0.095000893;0.095000759;0.095000625;
0.095000491;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;0.095000371;
0.095000371;0.095000371;      };
     };
     float_Data @["Emotio_netrel"] {
      user_data_=NULL;
      name="Emotio_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 3;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [3 1 352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
     float_Data @["Gender_netrel"] {
      user_data_=NULL;
      name="Gender_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [2 1 352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;      };
     };
     float_Data @["Identi_netrel"] {
      user_data_=NULL;
      name="Identi_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [10 1 352] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [352] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestTrialOutputData"] {
    user_data_=NULL;
    name="TestTrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["group"] {
      user_data_=NULL;
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      user_data_=NULL;
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["tick"] {
      user_data_=NULL;
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["time"] {
      user_data_=NULL;
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      user_data_=NULL;
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      user_data_=NULL;
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["output_name"] {
      user_data_=NULL;
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["rt_cycles"] {
      user_data_=NULL;
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["sse"] {
      user_data_=NULL;
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["norm_err"] {
      user_data_=NULL;
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cos_err"] {
      user_data_=NULL;
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      user_data_=NULL;
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_sse"] {
      user_data_=NULL;
      name="Emotio_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_sse"] {
      user_data_=NULL;
      name="Gender_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_sse"] {
      user_data_=NULL;
      name="Identi_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_bin_err"] {
      user_data_=NULL;
      name="Emotio_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_bin_err"] {
      user_data_=NULL;
      name="Gender_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_bin_err"] {
      user_data_=NULL;
      name="Identi_lay_bin_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_net_sd"] {
      user_data_=NULL;
      name="Emotio_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_net_sd"] {
      user_data_=NULL;
      name="Gender_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_net_sd"] {
      user_data_=NULL;
      name="Identi_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestEpochOutputData"] {
    user_data_=NULL;
    name="TestEpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      user_data_=NULL;
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      user_data_=NULL;
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_sse"] {
      user_data_=NULL;
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cnt_err"] {
      user_data_=NULL;
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_cor"] {
      user_data_=NULL;
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_err"] {
      user_data_=NULL;
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_norm_err"] {
      user_data_=NULL;
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cos_err"] {
      user_data_=NULL;
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_ext_rew"] {
      user_data_=NULL;
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cycles"] {
      user_data_=NULL;
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_tot"] {
      user_data_=NULL;
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_usr"] {
      user_data_=NULL;
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_avg_sse"] {
      user_data_=NULL;
      name="Emotio_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_avg_sse"] {
      user_data_=NULL;
      name="Gender_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_avg_sse"] {
      user_data_=NULL;
      name="Identi_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_cnt_err"] {
      user_data_=NULL;
      name="Emotio_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_cnt_err"] {
      user_data_=NULL;
      name="Gender_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_cnt_err"] {
      user_data_=NULL;
      name="Identi_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_pct_cor"] {
      user_data_=NULL;
      name="Emotio_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_pct_cor"] {
      user_data_=NULL;
      name="Gender_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_pct_cor"] {
      user_data_=NULL;
      name="Identi_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_pct_err"] {
      user_data_=NULL;
      name="Emotio_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_pct_err"] {
      user_data_=NULL;
      name="Gender_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_pct_err"] {
      user_data_=NULL;
      name="Identi_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_avg_norm_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotio_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Emotio_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Gender_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identi_lay_avg_cos_err"] {
      user_data_=NULL;
      name="Identi_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Emotions_avg_net_sd"] {
      user_data_=NULL;
      name="Emotions_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Gender_avg_net_sd"] {
      user_data_=NULL;
      name="Gender_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["Identity_avg_net_sd"] {
      user_data_=NULL;
      name="Identity_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   user_data_=NULL;
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  user_data_=NULL;
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["LeabraStartup"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @["DocLink"] {
     user_data_=NULL;
     name="DocLink";
     doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].doc$$;
    };
   };
   name="LeabraStartup";
   short_nm="Startup";
   tags="Leabra, Startup";
   desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batch_start=xxx] [n_batches=xx} [tag=xxx] and other opts -- see code";
   version {
    user_data_=NULL;
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=STARTUP_RUN;
   stop_step_cond {
    user_data_=NULL;
    expr=;
   };
   objs {
    user_data_=NULL;
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    user_data_=NULL;
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    user_data_=NULL;
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["network"] {
     user_data_=NULL;
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @["input_data"] {
     user_data_=NULL;
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    user_data_=NULL;
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["train_prog"] {
     user_data_=NULL;
     name="train_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="set this to point to your train process";
     init_from=NULL;
    };
    ProgVar @["batch_prog"] {
     user_data_=NULL;
     name="batch_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @["param_set"] {
     user_data_=NULL;
     name="param_set";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of saved parameter set to apply at startup";
     init_from=NULL;
    };
    ProgVar @["tag"] {
     user_data_=NULL;
     name="tag";
     var_type=T_String;
     string_val="_gui";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["batch_str"] {
     user_data_=NULL;
     name="batch_str";
     var_type=T_String;
     string_val="00";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @["log_dir"] {
     user_data_=NULL;
     name="log_dir";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @["log_file_nm"] {
     user_data_=NULL;
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @["batch_start"] {
     user_data_=NULL;
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @["EpochOutputData"] {
     user_data_=NULL;
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["TrialOutputData"] {
     user_data_=NULL;
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["MyClusterRun"] {
     user_data_=NULL;
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].ctrl_panels["ClusterRun"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["param_sets"] {
     user_data_=NULL;
     name="param_sets";
     var_type=T_Object;
     object_type=ParamSet_Group;
     object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].param_sets$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    user_data_=NULL;
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    user_data_=NULL;
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    user_data_=NULL;
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    RegisterArgs @[0] {
     user_data_=NULL;
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    PrintExpr @[1] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      user_data_=NULL;
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[2] {
     user_data_=NULL;
     desc="= Std variables in startup program itself =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Std variables in startup program itself =";
    };
    ProgVarFmArg @[3] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:tag in Program:LeabraStartup from Arg:tag";
     prog=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[4] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_dir in Program:LeabraStartup from Arg:log_dir";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    ProgVarFmArg @[5] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:param_set in Program:LeabraStartup from Arg:param_set";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$;
     var_name="param_set";
     arg_name="param_set";
    };
    ProgVarFmArg @[6] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[7] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:rnd_init in Program:LeabraTrain from Arg:rnd_init";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="rnd_init";
     arg_name="rnd_init";
    };
    ProgVarFmArg @[8] {
     user_data_=NULL;
     desc="starting batch -- replaces b_start";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:batch_start in Program:LeabraBatch from Arg:batch_start";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="batch_start";
     arg_name="batch_start";
    };
    ProgVarFmArg @[9] {
     user_data_=NULL;
     desc="number of batches to run";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:n_batches in Program:LeabraBatch from Arg:n_batches";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="n_batches";
     arg_name="n_batches";
    };
    ProgVarFmArg @[10] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_wts_interval in Program:LeabraTrain from Arg:save_wts_interval";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_wts_interval";
     arg_name="save_wts_interval";
    };
    ProgVarFmArg @[11] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_final_wts in Program:LeabraTrain from Arg:save_final_wts";
     prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_final_wts";
     arg_name="save_final_wts";
    };
    ControlPanelsFmArgs @[12] {
     user_data_=NULL;
     desc="sets any arg listed in the control panel";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["MyClusterRun"]$$;
    };
    If @[13] {
     user_data_=NULL;
     desc="set variables to values stored in a param set";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (param_set.nonempty())";
     cond {
      user_data_=NULL;
      expr="param_set.nonempty()";
     };
     true_code {
      user_data_=NULL;
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="param_sets->LoadParamSet(param_set)";
       result_var=NULL;
       obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["param_sets"]$$;
       method=ParamSet_Group::LoadParamSet;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="set_name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="param_set";
	 };
	};
       };
       meth_sig="bool LoadParamSet(taString& set_name)";
       meth_desc=;
      };
     };
    };
    Comment @[14] {
     user_data_=NULL;
     desc="= Add your own variables here =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Add your own variables here =";
    };
    Comment @[15] {
     user_data_=NULL;
     desc="= Below saves log files of standard data tables =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Below saves log files of standard data tables =";
    };
    If @[16] {
     user_data_=NULL;
     desc="set tag for starting batch (new code in v 8.0)";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="if (taMisc::CheckArgByName(\"batch_start\"))";
     cond {
      user_data_=NULL;
      expr="taMisc::CheckArgByName(\"batch_start\")";
     };
     true_code {
      user_data_=NULL;
      name=;
      el_typ=ProgCode;
      el_def=0;
      ProgVarFmArg @[0] {
       user_data_=NULL;
       desc="read in the arg to us too, so we can set file names based on it";
       flags=CAN_REVERT_TO_CODE;
       code_string="Set Var:batch_start in Program:LeabraStartup from Arg:batch_start";
       prog=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"]$;
       var_name="batch_start";
       arg_name="batch_start";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc="string version with leading zeros";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch_str = taMisc::LeadingZeros(batch_start, 2)";
       result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["batch_str"]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[2] {
       user_data_=NULL;
       desc="add to tag for setting log file names";
       flags=CAN_REVERT_TO_CODE;
       code_string="tag += \".\" + batch_str";
       var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["tag"]$$;
       expr {
	user_data_=NULL;
	expr="\".\" + batch_str";
       };
      };
      If @[3] {
       user_data_=NULL;
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=CAN_REVERT_TO_CODE;
       code_string="if (batch_start == 0)";
       cond {
	user_data_=NULL;
	expr="batch_start == 0";
       };
       true_code {
	user_data_=NULL;
	name=;
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag.before(\".00\",-1), log_dir, false)";
	 result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$$;
	 obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taMisc::FullArgStringToFile(log_file_nm)";
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[17] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      user_data_=NULL;
      expr=;
     };
     true_code {
      user_data_=NULL;
      name=;
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc="save args to file: last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
       result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
       obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::FullArgStringToFile(log_file_nm)";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    MiscCall @[18] {
     user_data_=NULL;
     desc="report any args that didn't get used!";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="taMisc::ReportUnusedArgs(true)";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::ReportUnusedArgs;
     meth_args {
      user_data_=NULL;
      name="ProgArg_List_0";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="err";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
    };
    Comment @[19] {
     user_data_=NULL;
     desc="== Save epoch log -- on by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save epoch log -- on by default ==";
    };
    MethodCall @[20] {
     user_data_=NULL;
     desc="last arg is to include dmem proc number";
     flags=CAN_REVERT_TO_CODE;
     code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
     result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="tag";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[21] {
     user_data_=NULL;
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=CAN_REVERT_TO_CODE;
     code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
     result_var=NULL;
     obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[22] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving epoch log data to:\" log_file_nm";
     message="Saving epoch log data to:";
     print_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    Comment @[23] {
     user_data_=NULL;
     desc="== Save trial log -- OFF by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save trial log -- OFF by default ==";
    };
    MethodCall @[24] {
     user_data_=NULL;
     desc="last arg is to include dmem proc number";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["TrialOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="tag";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[25] {
     user_data_=NULL;
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
     result_var=NULL;
     obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["TrialOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[26] {
     user_data_=NULL;
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving trial log data to:\" log_file_nm";
     message="Saving trial log data to:";
     print_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    OtherProgramVar @[27] {
     user_data_=NULL;
     desc="propagate the tag";
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$$;
     set_other=1;
     var_1=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs["LeabraStartup"].vars["tag"]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch_prog.name";
     expr {
      user_data_=NULL;
      expr="\"Running: \" << batch_prog.name";
     };
     debug=0;
    };
    ProgramCall @[29] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraBatch(network, input_data)";
     prog_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="network";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="input_data";
       };
      };
     };
     target=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    user_data_=NULL;
    name="doc";
    desc=;
    web_doc=1;
    wiki="emergent";
    url="Startup_program";
    full_url="https://grey.colorado.edu/emergent/index.php/Startup_program";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp["LeabraAll_Std"] {
   user_data_=NULL;
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @["LeabraBatch"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].doc$$;
     };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      user_data_=NULL;
      name="batch";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["batch_start"] {
      user_data_=NULL;
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @["n_batches"] {
      user_data_=NULL;
      name="n_batches";
      var_type=T_Int;
      int_val=10;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
      local_ctr_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["i"] {
	user_data_=NULL;
	name="i";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
      expr {
       user_data_=NULL;
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      user_data_=NULL;
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
      path="batch";
      expr {
       user_data_=NULL;
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      user_data_=NULL;
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  user_data_=NULL;
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="true";
	  };
	 };
	};
	target=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       user_data_=NULL;
       expr="i=0";
      };
      test {
       user_data_=NULL;
       expr="i<n_batches";
      };
      iter {
       user_data_=NULL;
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrain"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].doc$$;
     };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      seeds {
       user_data_=NULL;
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @["RndSeed_1"] {
	user_data_=NULL;
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @["RndSeed_2"] {
	user_data_=NULL;
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @["RndSeed_3"] {
	user_data_=NULL;
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @["RndSeed_4"] {
	user_data_=NULL;
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @["RndSeed_5"] {
	user_data_=NULL;
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @["RndSeed_6"] {
	user_data_=NULL;
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @["RndSeed_7"] {
	user_data_=NULL;
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @["RndSeed_8"] {
	user_data_=NULL;
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @["RndSeed_9"] {
	user_data_=NULL;
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @["RndSeed_10"] {
	user_data_=NULL;
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @["RndSeed_11"] {
	user_data_=NULL;
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @["RndSeed_12"] {
	user_data_=NULL;
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @["RndSeed_13"] {
	user_data_=NULL;
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @["RndSeed_14"] {
	user_data_=NULL;
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @["RndSeed_15"] {
	user_data_=NULL;
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @["RndSeed_16"] {
	user_data_=NULL;
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @["RndSeed_17"] {
	user_data_=NULL;
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @["RndSeed_18"] {
	user_data_=NULL;
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @["RndSeed_19"] {
	user_data_=NULL;
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @["RndSeed_20"] {
	user_data_=NULL;
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @["RndSeed_21"] {
	user_data_=NULL;
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @["RndSeed_22"] {
	user_data_=NULL;
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @["RndSeed_23"] {
	user_data_=NULL;
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @["RndSeed_24"] {
	user_data_=NULL;
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @["RndSeed_25"] {
	user_data_=NULL;
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      user_data_=NULL;
      name="RndInitType";
      desc=;
      enums {
       user_data_=NULL;
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	user_data_=NULL;
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	user_data_=NULL;
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @["BATCH_SEEDS"] {
	user_data_=NULL;
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      user_data_=NULL;
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      user_data_=NULL;
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      user_data_=NULL;
      name="epoch";
      var_type=T_Int;
      int_val=352;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      user_data_=NULL;
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit"] {
      user_data_=NULL;
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @["n_under_thr"] {
      user_data_=NULL;
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @["save_final_wts"] {
      user_data_=NULL;
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @["save_wts_interval"] {
      user_data_=NULL;
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @["n_under_cnt"] {
      user_data_=NULL;
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seeds"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      user_data_=NULL;
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["GetRandomSeed"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      name="GetRandomSeed";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_init"]$$;
	cases {
	 user_data_=NULL;
	 name=;
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seeds"]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
      expr {
       user_data_=NULL;
       expr="false";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      user_data_=NULL;
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Build;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     MemberAssign @[3] {
      user_data_=NULL;
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       user_data_=NULL;
       expr="no_prompts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	local_ctr_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 user_data_=NULL;
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  user_data_=NULL;
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   user_data_=NULL;
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 user_data_=NULL;
	 expr=;
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 user_data_=NULL;
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   user_data_=NULL;
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network";
	      };
	     };
	    };
	    target=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       user_data_=NULL;
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       user_data_=NULL;
       expr="save_final_wts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @["LeabraEpoch"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].doc$$;
     };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      user_data_=NULL;
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      user_data_=NULL;
      name="trial";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["step_on_err"] {
      user_data_=NULL;
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      user_data_=NULL;
      name="data_loop_index";
      var_type=T_Int;
      int_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
      local_ctr_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      local_ctr_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=Network::Init_Epoch;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      user_data_=NULL;
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 user_data_=NULL;
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 user_data_=NULL;
	 name="ProgEl_List_100";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   user_data_=NULL;
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
      index_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
      order_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      user_data_=NULL;
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       user_data_=NULL;
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      user_data_=NULL;
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrial"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].doc$$;
     };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 4";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      user_data_=NULL;
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      update_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarter"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].doc$$;
     };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      user_data_=NULL;
      name="cycle";
      var_type=T_Int;
      int_val=25;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$$;
      local_ctr_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	user_data_=NULL;
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	user_data_=NULL;
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$;
	expr {
	 user_data_=NULL;
	 expr="network.cycle";
	};
       };
      };
      init {
       user_data_=NULL;
       expr="cyc=0";
      };
      test {
       user_data_=NULL;
       expr="cyc<cycle_max";
      };
      iter {
       user_data_=NULL;
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      update_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycle"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].doc$$;
     };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
      update_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputs"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].doc$$;
     };
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$;
      network=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      layer_data {
       user_data_=NULL;
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	user_data_=NULL;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	user_data_=NULL;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {user_data_=NULL: name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	user_data_=NULL;
	col_name="Gender";
	net_target=LAYER;
	layer_name="Gender";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	user_data_=NULL;
	col_name="Identity";
	net_target=LAYER;
	layer_name="Identity";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	user_data_=NULL;
	col_name="Emotions";
	net_target=LAYER;
	layer_name="Emotions";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["layer_writer_0"] {
      user_data_=NULL;
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitor"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].doc$$;
     };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	user_data_=NULL;
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	user_data_=NULL;
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	user_data_=NULL;
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	user_data_=NULL;
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	user_data_=NULL;
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	user_data_=NULL;
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	user_data_=NULL;
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	user_data_=NULL;
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	user_data_=NULL;
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	user_data_=NULL;
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	user_data_=NULL;
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	user_data_=NULL;
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	user_data_=NULL;
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	user_data_=NULL;
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_bin_err"] {
	user_data_=NULL;
	name="lay_bin_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.bin_err";
	var_label="lay_bin_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	user_data_=NULL;
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	user_data_=NULL;
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	user_data_=NULL;
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_cos_diff"] {
	user_data_=NULL;
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_trial_cos_diff"] {
	user_data_=NULL;
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_act_diff"] {
	user_data_=NULL;
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_diff"] {
	user_data_=NULL;
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_cos_diff"] {
	user_data_=NULL;
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act_diff"] {
	user_data_=NULL;
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitor"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].doc$$;
     };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	user_data_=NULL;
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	user_data_=NULL;
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	user_data_=NULL;
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	user_data_=NULL;
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	user_data_=NULL;
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	user_data_=NULL;
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	user_data_=NULL;
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	user_data_=NULL;
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	user_data_=NULL;
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	user_data_=NULL;
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	user_data_=NULL;
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	user_data_=NULL;
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	user_data_=NULL;
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	user_data_=NULL;
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	user_data_=NULL;
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	user_data_=NULL;
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_cos_diff"] {
	user_data_=NULL;
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_trial_cos_diff"] {
	user_data_=NULL;
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_avg_act_diff"] {
	user_data_=NULL;
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_diff"] {
	user_data_=NULL;
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_trial_cos_diff"] {
	user_data_=NULL;
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_avg_act_diff"] {
	user_data_=NULL;
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	user_data_=NULL;
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["hog_pct"] {
	user_data_=NULL;
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["dead_pct"] {
	user_data_=NULL;
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netmax"] {
	user_data_=NULL;
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act"] {
	user_data_=NULL;
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netrel"] {
	user_data_=NULL;
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      user_data_=NULL;
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      user_data_=NULL;
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SaveWeights"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].doc$$;
     };
    };
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      user_data_=NULL;
      name="tag";
      var_type=T_String;
      string_val="_gui";
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      user_data_=NULL;
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      user_data_=NULL;
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      user_data_=NULL;
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      user_data_=NULL;
      name="batch_str";
      var_type=T_String;
      string_val="00";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      user_data_=NULL;
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      user_data_=NULL;
      desc=;
      flags=0;
      code_string=;
      cond {
       user_data_=NULL;
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	user_data_=NULL;
	desc=;
	flags=0;
	code_string=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      user_data_=NULL;
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      user_data_=NULL;
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       user_data_=NULL;
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="fname";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] {
   user_data_=NULL;
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @["LeabraEpochTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].doc$$;
     };
    };
    name="LeabraEpochTest";
    short_nm="EpcTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["data_loop_order"] {
      user_data_=NULL;
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      user_data_=NULL;
      name="trial";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      user_data_=NULL;
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
      local_ctr_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      user_data_=NULL;
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      user_data_=NULL;
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$$;
      index_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
      order_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      user_data_=NULL;
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       user_data_=NULL;
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      user_data_=NULL;
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitorTest(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      user_data_=NULL;
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].doc$$;
     };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsTest(network, input_data)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarterTest(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 4";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      user_data_=NULL;
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitorTest(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      update_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarterTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].doc$$;
     };
    };
    name="LeabraQuarterTest";
    short_nm="QrtTst";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      user_data_=NULL;
      name="cycle";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$$;
      local_ctr_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	user_data_=NULL;
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	user_data_=NULL;
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="program_name()";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="grab_camera_img";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$;
	expr {
	 user_data_=NULL;
	 expr="network.cycle";
	};
       };
      };
      init {
       user_data_=NULL;
       expr="cyc=0";
      };
      test {
       user_data_=NULL;
       expr="cyc<cycle_max";
      };
      iter {
       user_data_=NULL;
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      update_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycleTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].doc$$;
     };
    };
    name="LeabraCycleTest";
    short_nm="CycTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
      update_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputsTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].doc$$;
     };
    };
    name="ApplyInputsTest";
    short_nm="InTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      layer_data {
       user_data_=NULL;
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	user_data_=NULL;
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	user_data_=NULL;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	user_data_=NULL;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].doc$$;
     };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	user_data_=NULL;
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	user_data_=NULL;
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	user_data_=NULL;
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	user_data_=NULL;
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	user_data_=NULL;
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	user_data_=NULL;
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	user_data_=NULL;
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	user_data_=NULL;
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	user_data_=NULL;
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	user_data_=NULL;
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	user_data_=NULL;
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	user_data_=NULL;
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	user_data_=NULL;
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	user_data_=NULL;
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_bin_err"] {
	user_data_=NULL;
	name="lay_bin_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.bin_err";
	var_label="lay_bin_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	user_data_=NULL;
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	user_data_=NULL;
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	user_data_=NULL;
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].doc$$;
     };
    };
    name="LeabraEpochMonitorTest";
    short_nm="EpcMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	user_data_=NULL;
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	user_data_=NULL;
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	user_data_=NULL;
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	user_data_=NULL;
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	user_data_=NULL;
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	user_data_=NULL;
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	user_data_=NULL;
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	user_data_=NULL;
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	user_data_=NULL;
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	user_data_=NULL;
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	user_data_=NULL;
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	user_data_=NULL;
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	user_data_=NULL;
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	user_data_=NULL;
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	user_data_=NULL;
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	user_data_=NULL;
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	user_data_=NULL;
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestEpochOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      user_data_=NULL;
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestEpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  user_data_=NULL;
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_114";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     user_data_=NULL;
     name="view_win_lft";
     value 8 0=-0.005856515;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     user_data_=NULL;
     name="view_win_top";
     value 8 0=-0.01098901;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     user_data_=NULL;
     name="view_win_wd";
     value 8 0=1.011713;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     user_data_=NULL;
     name="view_win_ht";
     value 8 0=1.021978;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     user_data_=NULL;
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     user_data_=NULL;
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABAAAAAewAAAKIAf////8BAAAAAQA=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"]$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable\"] - projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable.proj [*]";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    user_data_=NULL;
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_115";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       user_data_=NULL;
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0.03021978;
     o=Horizontal;
    };
   };
   frames {
    user_data_=NULL;
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     user_data_=NULL;
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"]$;
    };
    PanelViewer @["Editor"] {
     user_data_=NULL;
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_116";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       user_data_=NULL;
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      user_data_=NULL;
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["Network_0"] {
       user_data_=NULL;
       name="Network_0";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["Network_0_View"] {
	  user_data_=NULL;
	  name="Network_0_View";
	  m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.7: y=0.7: z=0.7: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0: y=1: z=-1: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;	  };
	  unit_src_path=".layers[0].units[36]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=16: y=16: z=4.2: };
	  max_size2d {x=16: y=34: z=1: };
	  eff_max_size {x=16: y=16: z=4.2: };
	  font_sizes {
	   user_data_=NULL;
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   user_data_=NULL;
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.4;
	   unit_trans=0.4;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   user_data_=NULL;
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   user_data_=NULL;
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    user_data_=NULL;
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    user_data_=NULL;
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    user_data_=NULL;
	    var_name="bias.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    user_data_=NULL;
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    user_data_=NULL;
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    user_data_=NULL;
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[6] {
	    user_data_=NULL;
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    user_data_=NULL;
	    var_name="act_q0";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    user_data_=NULL;
	    var_name="act_q1";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    user_data_=NULL;
	    var_name="act_q2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    user_data_=NULL;
	    var_name="act_q3";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    user_data_=NULL;
	    var_name="act_q4";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    user_data_=NULL;
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;Emotions=-1;Gender=-1;Identity=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.9127705: z=2.325769: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.524852;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       user_data_=NULL;
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["EpochOutputData_Graph"] {
	  user_data_=NULL;
	  name="EpochOutputData_Graph";
	  m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=1: max=50: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_sse"] {
	    user_data_=NULL;
	    name="avg_sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=2.90517: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["cnt_err"] {
	    user_data_=NULL;
	    name="cnt_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=18: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_cor"] {
	    user_data_=NULL;
	    name="pct_cor";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_cor"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_err"] {
	    user_data_=NULL;
	    name="pct_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_norm_err"] {
	    user_data_=NULL;
	    name="avg_norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cos_err"] {
	    user_data_=NULL;
	    name="avg_cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_ext_rew"] {
	    user_data_=NULL;
	    name="avg_ext_rew";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cycles"] {
	    user_data_=NULL;
	    name="avg_cycles";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=8.16667: fix_max=0: max=26.2222: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_tot"] {
	    user_data_=NULL;
	    name="epoch_time_tot";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_usr"] {
	    user_data_=NULL;
	    name="epoch_time_usr";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_cnt_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_cnt_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Gender_lay_cnt_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_cnt_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Identi_lay_cnt_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_cnt_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_cor";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_cor"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_cor";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_cor"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_cor";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_cor"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_pct_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_pct_err"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_pct_err"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_trial_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="net_avg_avg_act_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_trial_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_trial_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_trial_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_trial_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_trial_cos_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_trial_cos_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_avg_act_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_avg_act_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_avg_act_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_avg_act_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_avg_act_diff";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_avg_act_diff"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_avg_net_sd"] {
	    user_data_=NULL;
	    name="Emotions_avg_net_sd";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_net_sd"] {
	    user_data_=NULL;
	    name="Gender_avg_net_sd";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_avg_net_sd"] {
	    user_data_=NULL;
	    name="Identity_avg_net_sd";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_hog_pct"] {
	    user_data_=NULL;
	    name="Emotions_hog_pct";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_hog_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_hog_pct"] {
	    user_data_=NULL;
	    name="Gender_hog_pct";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_hog_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_hog_pct"] {
	    user_data_=NULL;
	    name="Identity_hog_pct";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_hog_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotions_dead_pct"] {
	    user_data_=NULL;
	    name="Emotions_dead_pct";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_dead_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_dead_pct"] {
	    user_data_=NULL;
	    name="Gender_dead_pct";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_dead_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identity_dead_pct"] {
	    user_data_=NULL;
	    name="Identity_dead_pct";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_dead_pct"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_netmax"] {
	    user_data_=NULL;
	    name="Emotio_netmax";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netmax"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_netmax"] {
	    user_data_=NULL;
	    name="Gender_netmax";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netmax"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_netmax"] {
	    user_data_=NULL;
	    name="Identi_netmax";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netmax"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_avg_act"] {
	    user_data_=NULL;
	    name="Emotio_avg_act";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_avg_act"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_avg_act"] {
	    user_data_=NULL;
	    name="Gender_avg_act";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_act"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_avg_act"] {
	    user_data_=NULL;
	    name="Identi_avg_act";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_avg_act"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Emotio_netrel"] {
	    user_data_=NULL;
	    name="Emotio_netrel";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netrel"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Gender_netrel"] {
	    user_data_=NULL;
	    name="Gender_netrel";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netrel"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["Identi_netrel"] {
	    user_data_=NULL;
	    name="Identi_netrel";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netrel"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=351: };
	  page_rows=412;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   user_data_=NULL;
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=1: max=50: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  z_axis {
	   user_data_=NULL;
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  tot_plots=16;
	  plots {
	   user_data_=NULL;
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_plot_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=2.905168: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=18: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_cycles";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=8.166667: fix_max=0: max=26.22222: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.325586: fix_max=0: max=0.462465: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  errbars {
	   user_data_=NULL;
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_err_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   user_data_=NULL;
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   user_data_=NULL;
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.465: y=0.5129999: z=1.637373: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.147373;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       user_data_=NULL;
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=10;
       visible=1;
       root_view {
	user_data_=NULL;
	name="T3DataViewRoot_1";
	m_data=NULL;
	cur_font_size=10;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="T3DataView_List_1";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["EpochOutputData_Grid"] {
	  user_data_=NULL;
	  name="EpochOutputData_Grid";
	  m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"]$;
	  cur_font_size=10;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_sse"] {
	    user_data_=NULL;
	    name="avg_sse";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["cnt_err"] {
	    user_data_=NULL;
	    name="cnt_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["pct_cor"] {
	    user_data_=NULL;
	    name="pct_cor";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["pct_err"] {
	    user_data_=NULL;
	    name="pct_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_norm_err"] {
	    user_data_=NULL;
	    name="avg_norm_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_cos_err"] {
	    user_data_=NULL;
	    name="avg_cos_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_ext_rew"] {
	    user_data_=NULL;
	    name="avg_ext_rew";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["avg_cycles"] {
	    user_data_=NULL;
	    name="avg_cycles";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch_time_tot"] {
	    user_data_=NULL;
	    name="epoch_time_tot";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch_time_usr"] {
	    user_data_=NULL;
	    name="epoch_time_usr";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_sse";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_sse";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_avg_sse"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_sse";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_sse"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_cnt_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Gender_lay_cnt_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_cnt_err"] {
	    user_data_=NULL;
	    name="Identi_lay_cnt_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_cnt_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_cor";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_cor";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_pct_cor"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_cor";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_cor"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_pct_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_pct_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_pct_err"] {
	    user_data_=NULL;
	    name="Gender_lay_pct_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_pct_err"] {
	    user_data_=NULL;
	    name="Identi_lay_pct_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_pct_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_norm_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_norm_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_norm_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_norm_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_avg_cos_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_lay_avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Gender_lay_avg_cos_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_lay_avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="Identi_lay_avg_cos_err";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_lay_avg_cos_err"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["net_avg_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["net_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["net_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="net_avg_avg_act_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_trial_cos_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_trial_cos_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Emotions_avg_avg_act_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Gender_avg_avg_act_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="Identity_avg_avg_act_diff";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_avg_act_diff"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_avg_net_sd"] {
	    user_data_=NULL;
	    name="Emotions_avg_net_sd";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_avg_net_sd"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_net_sd"] {
	    user_data_=NULL;
	    name="Gender_avg_net_sd";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_net_sd"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_avg_net_sd"] {
	    user_data_=NULL;
	    name="Identity_avg_net_sd";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_avg_net_sd"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_hog_pct"] {
	    user_data_=NULL;
	    name="Emotions_hog_pct";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_hog_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_hog_pct"] {
	    user_data_=NULL;
	    name="Gender_hog_pct";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_hog_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_hog_pct"] {
	    user_data_=NULL;
	    name="Identity_hog_pct";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_hog_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions_dead_pct"] {
	    user_data_=NULL;
	    name="Emotions_dead_pct";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotions_dead_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_dead_pct"] {
	    user_data_=NULL;
	    name="Gender_dead_pct";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_dead_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity_dead_pct"] {
	    user_data_=NULL;
	    name="Identity_dead_pct";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identity_dead_pct"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_netmax"] {
	    user_data_=NULL;
	    name="Emotio_netmax";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netmax"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_netmax"] {
	    user_data_=NULL;
	    name="Gender_netmax";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netmax"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_netmax"] {
	    user_data_=NULL;
	    name="Identi_netmax";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netmax"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_avg_act"] {
	    user_data_=NULL;
	    name="Emotio_avg_act";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_avg_act"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_avg_act"] {
	    user_data_=NULL;
	    name="Gender_avg_act";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_avg_act"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_avg_act"] {
	    user_data_=NULL;
	    name="Identi_avg_act";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_avg_act"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_netrel"] {
	    user_data_=NULL;
	    name="Emotio_netrel";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Emotio_netrel"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_netrel"] {
	    user_data_=NULL;
	    name="Gender_netrel";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Gender_netrel"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_netrel"] {
	    user_data_=NULL;
	    name="Identi_netrel";
	    m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["EpochOutputData"].data["Identi_netrel"]$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="T3Annotation_List_12";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=9: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="ColorScale_1";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="T3SavedView_List_10";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.52625: y=0.449525: z=1.382483: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.388733;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["TestTrialOutputData"] {
       user_data_=NULL;
       name="TestTrialOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["TestTrialOutputData_Grid"] {
	  user_data_=NULL;
	  name="TestTrialOutputData_Grid";
	  m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["train_mode"] {
	    user_data_=NULL;
	    name="train_mode";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["train_mode"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["group"] {
	    user_data_=NULL;
	    name="group";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["group"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["trial"] {
	    user_data_=NULL;
	    name="trial";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["trial"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["tick"] {
	    user_data_=NULL;
	    name="tick";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["tick"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["time"] {
	    user_data_=NULL;
	    name="time";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["time"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["trial_name"] {
	    user_data_=NULL;
	    name="trial_name";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["trial_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["group_name"] {
	    user_data_=NULL;
	    name="group_name";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["group_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["output_name"] {
	    user_data_=NULL;
	    name="output_name";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["output_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["rt_cycles"] {
	    user_data_=NULL;
	    name="rt_cycles";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["rt_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["sse"] {
	    user_data_=NULL;
	    name="sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["norm_err"] {
	    user_data_=NULL;
	    name="norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["cos_err"] {
	    user_data_=NULL;
	    name="cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["ext_rew"] {
	    user_data_=NULL;
	    name="ext_rew";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_sse"] {
	    user_data_=NULL;
	    name="Emotio_lay_sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_sse"] {
	    user_data_=NULL;
	    name="Gender_lay_sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_sse"] {
	    user_data_=NULL;
	    name="Identi_lay_sse";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_sse"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_bin_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_bin_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_bin_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_bin_err"] {
	    user_data_=NULL;
	    name="Gender_lay_bin_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_bin_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_bin_err"] {
	    user_data_=NULL;
	    name="Identi_lay_bin_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_bin_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_norm_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_norm_err"] {
	    user_data_=NULL;
	    name="Gender_lay_norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_norm_err"] {
	    user_data_=NULL;
	    name="Identi_lay_norm_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_norm_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_cos_err"] {
	    user_data_=NULL;
	    name="Emotio_lay_cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_cos_err"] {
	    user_data_=NULL;
	    name="Gender_lay_cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_cos_err"] {
	    user_data_=NULL;
	    name="Identi_lay_cos_err";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_cos_err"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotio_lay_net_sd"] {
	    user_data_=NULL;
	    name="Emotio_lay_net_sd";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Emotio_lay_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender_lay_net_sd"] {
	    user_data_=NULL;
	    name="Gender_lay_net_sd";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Gender_lay_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identi_lay_net_sd"] {
	    user_data_=NULL;
	    name="Identi_lay_net_sd";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["OutputData"]["TestTrialOutputData"].data["Identi_lay_net_sd"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5: y=0.44875: z=1.270144: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.276394;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["Osumnis_oof_phaicz"] {
       user_data_=NULL;
       name="Osumnis_oof_phaicz";
       m_data=NULL;
       cur_font_size=10;
       visible=1;
       root_view {
	user_data_=NULL;
	name="T3DataViewRoot_1";
	m_data=NULL;
	cur_font_size=10;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="T3DataView_List_1";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["Osumnis_oof_phaicz_Grid"] {
	  user_data_=NULL;
	  name="Osumnis_oof_phaicz_Grid";
	  m_data=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"]$;
	  cur_font_size=10;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Name"] {
	    user_data_=NULL;
	    name="Name";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Name"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Input"] {
	    user_data_=NULL;
	    name="Input";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Input"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Emotions"] {
	    user_data_=NULL;
	    name="Emotions";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Emotions"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=3;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Gender"] {
	    user_data_=NULL;
	    name="Gender";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Gender"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Identity"] {
	    user_data_=NULL;
	    name="Identity";
	    m_data=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].data.gp["InputData"]["Osumnis_oof_phaicz"].data["Identity"]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="T3Annotation_List_11";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="T3DataView_List_1";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=9: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="ColorScale_1";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="T3SavedView_List_8";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.52625: y=0.4486249: z=1.308439: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.305939;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    user_data_=NULL;
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_117";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       user_data_=NULL;
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       user_data_=NULL;
       name="view_win_top";
       value 8 0=0.0989011;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       user_data_=NULL;
       name="view_win_wd";
       value 8 0=0.06149341;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       user_data_=NULL;
       name="view_win_ht";
       value 8 0=0.842033;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       user_data_=NULL;
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       user_data_=NULL;
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc=;
 tree_state{ .;.docs;.wizards;.wizards[0];.ctrl_panels;.data;.data.gp[0];.data.gp[0][0];.data.gp[0][1];.data.gp[0][2];.data.gp[1];.data.gp[2];.programs;.programs.gp[0];.viewers[0];.viewers[0].frames[2];.networks;.networks[0];.networks[0].specs;.networks[0].layers;.networks[0].layers[0];.networks[0].layers[0].projections;.networks[0].layers[0].projections[0];.networks[0].layers[0].projections[1];.networks[0].layers[0].projections[2]; };
 networks {
  user_data_=NULL;
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["Network_0"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_7";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     user_data_=NULL;
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     user_data_=NULL;
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     user_data_=NULL;
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     user_data_=NULL;
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     user_data_=NULL;
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     user_data_=NULL;
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     user_data_=NULL;
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     user_data_=NULL;
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     user_data_=NULL;
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     user_data_=NULL;
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     user_data_=NULL;
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     user_data_=NULL;
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     user_data_=NULL;
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     user_data_=NULL;
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     user_data_=NULL;
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     user_data_=NULL;
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     user_data_=NULL;
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     user_data_=NULL;
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     user_data_=NULL;
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     user_data_=NULL;
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     user_data_=NULL;
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     user_data_=NULL;
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     user_data_=NULL;
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     user_data_=NULL;
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     user_data_=NULL;
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     user_data_=NULL;
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     user_data_=NULL;
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="Network_0";
   desc=;
   specs {
    user_data_=NULL;
    name="specs";
    el_typ=LeabraLayerSpec;
    el_def=0;
    LeabraLayerSpec @["HiddenLayer"] {
     user_data_=NULL;
     name="HiddenLayer";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       user_data_=NULL;
       name="Input_Output";
       is_used=1;
       desc=;
       unique{ lay_inhib;kwta;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {user_data_=NULL: on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {user_data_=NULL: targ_init=0.1: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {user_data_=NULL: trial=1: };
       del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
       lay_lrate=1;
       cos_diff {
	user_data_=NULL;
	avg_tau=100;
	lrate_mod=0;
	lrmod_fm_trc=0;
	lrmod_z_thr=-1.5;
	set_net_unlrn=0;
	avg_dt=0.01;
	avg_dt_c=0.99;
       };
       lstats {
	user_data_=NULL;
	hog_thr=0.3;
	dead_thr=0.01;
       };
      };
     };
     lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {user_data_=NULL: targ_init=0.1: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
     decay {user_data_=NULL: trial=1: };
     del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      user_data_=NULL;
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      user_data_=NULL;
      hog_thr=0.3;
      dead_thr=0.01;
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     user_data_=NULL;
     name="LeabraUnitSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
     bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"].children["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
     act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      user_data_=NULL;
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
     init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
     dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
     e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
     adapt {
      user_data_=NULL;
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {
      user_data_=NULL;
      on=0;
      delay=4;
     };
     deep_raw_qtr=Q4;
     deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
     da_mod {user_data_=NULL: on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      user_data_=NULL;
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     user_data_=NULL;
     name="LeabraConSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_0"] {
       user_data_=NULL;
       name="LeabraBiasSpec_0";
       is_used=1;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;learn;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {user_data_=NULL: type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.08;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
      LeabraConSpec @["TopDownCons"] {
       user_data_=NULL;
       name="TopDownCons";
       is_used=0;
       desc="top-down connections from output layers down to hidden etc typically need to be weaker than bottom-up";
       unique{ wt_scale;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=0.2: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
      };
     };
     rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     use_lrate_sched=1;
     cur_lrate=0.04;
     lrs_mult=1;
     lrate_sched {
      user_data_=NULL;
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     use_unlearnable=1;
     xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
     dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
     wt_bal {
      user_data_=NULL;
      on=1;
      hi_thr=0.4;
      hi_gain=4;
      lo_thr=0.2;
      lo_gain=4;
     };
     adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] {
     user_data_=NULL;
     name="FullPrjnSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
    };
   };
   param_seqs {
    user_data_=NULL;
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    user_data_=NULL;
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=16: y=16: z=5: };
    max_disp_size2d {x=16: y=34: };
    LeabraLayer @["Input"] {
     user_data_=NULL;
     name="Input";
     desc=;
     flags=ABS_POS;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=16: y=16: n_not_xy=0: n=256: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=16: y=16: n_not_xy=0: n=256: };
     disp_geom {x=16: y=16: n_not_xy=0: n=256: };
     scaled_disp_geom {x=16: y=16: n_not_xy=0: n=1: };
     n_recv_prjns=3;
     n_send_prjns=3;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Identity"] {
       user_data_=NULL;
       name="Fm_Identity";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Identity"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Gender"] {
       user_data_=NULL;
       name="Fm_Gender";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Gender"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @["Fm_Emotions"] {
       user_data_=NULL;
       name="Fm_Emotions";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Emotions"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Emotions"].projections["Fm_Input"];
      Projection_Group @. = [1] = LeabraPrjn .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Gender"].projections["Fm_Input"];
      Projection_Group @. = [2] = LeabraPrjn .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Identity"].projections["Fm_Input"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$$: };
     dist {
      user_data_=NULL;
      fm_input=0;
      fm_output=1;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2313185;
     acts_p_avg=0.2313185;
     acts_p_avg_eff=0.2313185;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["Emotions"] {
     user_data_=NULL;
     name="Emotions";
     desc=;
     flags=ABS_POS;
     layer_type=TARGET;
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=0: y=6: };
     pos2d_abs {x=0: y=6: };
     disp_scale=1;
     un_geom {x=3: y=1: n_not_xy=0: n=3: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=3: y=1: n_not_xy=0: n=3: };
     disp_geom {x=3: y=1: n_not_xy=0: n=3: };
     scaled_disp_geom {x=3: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Input"] {
       user_data_=NULL;
       name="Fm_Input";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Input"]$$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Input"].projections["Fm_Emotions"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=1;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1282967;
     acts_p_avg=0.3166652;
     acts_p_avg_eff=0.3166652;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"].children["Input_Output"]$: };
     adapt_gi=1;
    };
    LeabraLayer @["Gender"] {
     user_data_=NULL;
     name="Gender";
     desc=;
     flags=ABS_POS;
     layer_type=TARGET;
     pos {x=0: y=0: z=3: };
     pos_abs {x=0: y=0: z=3: };
     pos2d {x=0: y=30: };
     pos2d_abs {x=0: y=30: };
     disp_scale=1;
     un_geom {x=2: y=1: n_not_xy=0: n=2: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=2: y=1: n_not_xy=0: n=2: };
     disp_geom {x=2: y=1: n_not_xy=0: n=2: };
     scaled_disp_geom {x=2: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Input"] {
       user_data_=NULL;
       name="Fm_Input";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Input"]$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Input"].projections["Fm_Gender"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=1;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.152783;
     acts_p_avg=0.4749985;
     acts_p_avg_eff=0.4749985;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["Identity"] {
     user_data_=NULL;
     name="Identity";
     desc=;
     flags=ABS_POS;
     layer_type=TARGET;
     pos {x=0: y=0: z=4: };
     pos_abs {x=0: y=0: z=4: };
     pos2d {x=0: y=33: };
     pos2d_abs {x=0: y=33: };
     disp_scale=1;
     un_geom {x=10: y=1: n_not_xy=0: n=10: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=10: y=1: n_not_xy=0: n=10: };
     disp_geom {x=10: y=1: n_not_xy=0: n=10: };
     scaled_disp_geom {x=10: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=1;
     n_send_prjns=1;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @["Fm_Input"] {
       user_data_=NULL;
       name="Fm_Input";
       off=0;
       disp=1;
       from_type=CUSTOM;
       from=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Input"]$;
       spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["FullPrjnSpec_0"]$: };
       con_type=LeabraCon;
       con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraConSpec_0"]$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].layers["Input"].projections["Fm_Identity"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["LeabraUnitSpec_0"]$: };
     dist {
      user_data_=NULL;
      fm_input=1;
      fm_output=0;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.1252552;
     acts_p_avg=0.09500037;
     acts_p_avg_eff=0.09500037;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["projects_1_nohidden_with_graphy_thing_and_EpochOutputDataTable"].networks["Network_0"].specs["HiddenLayer"]$: };
     adapt_gi=1;
    };
   };
   weights {
    user_data_=NULL;
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=MANUAL_POS|ABS_POS|BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TEST;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    user_data_=NULL;
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    user_data_=NULL;
    run_time {user_data_=NULL: name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    sync_time {user_data_=NULL: name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    total_time {user_data_=NULL: name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
   };
   cuda {
    user_data_=NULL;
    sync_units=0;
    sync_cons=0;
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
    n_threads=32;
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=272;
   n_cons=7680;
   max_prjns=3;
   max_disp_size {x=16: y=16: z=5: };
   max_disp_size2d {x=16: y=34: };
   times {
    user_data_=NULL;
    quarter=25;
    gate_cyc=18;
    deep_cyc=5;
    time_inc=0.001;
    wt_bal_int=10;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    user_data_=NULL;
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    agg_unlearnable=0;
    wt_bal=0;
   };
   net_misc {
    user_data_=NULL;
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=1;
    diff_scale_p=0;
    diff_scale_q1=0;
    wt_bal=1;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   deep {
    user_data_=NULL;
    on=0;
    ctxt=0;
    raw_net=0;
    mod_net=0;
    raw_qtr=0;
   };
   rel_netin {
    user_data_=NULL;
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};
